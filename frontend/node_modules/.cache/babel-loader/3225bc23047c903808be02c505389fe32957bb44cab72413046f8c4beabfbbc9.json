{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createTextVNode as _createTextVNode, withCtx as _withCtx, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"payment-container\"\n};\nconst _hoisted_2 = {\n  class: \"payment-method\"\n};\nconst _hoisted_3 = {\n  class: \"payment-method\"\n};\nconst _hoisted_4 = {\n  class: \"payment-action\"\n};\nconst _hoisted_5 = {\n  class: \"qrcode-container\"\n};\nconst _hoisted_6 = {\n  class: \"qrcode\"\n};\nconst _hoisted_7 = [\"src\"];\nconst _hoisted_8 = [\"src\"];\nconst _hoisted_9 = {\n  key: 2,\n  class: \"qrcode-placeholder\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_van_nav_bar = _resolveComponent(\"van-nav-bar\");\n  const _component_van_tag = _resolveComponent(\"van-tag\");\n  const _component_van_card = _resolveComponent(\"van-card\");\n  const _component_van_cell = _resolveComponent(\"van-cell\");\n  const _component_van_cell_group = _resolveComponent(\"van-cell-group\");\n  const _component_van_icon = _resolveComponent(\"van-icon\");\n  const _component_van_radio = _resolveComponent(\"van-radio\");\n  const _component_van_button = _resolveComponent(\"van-button\");\n  const _component_van_popup = _resolveComponent(\"van-popup\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_van_nav_bar, {\n    title: \"订单支付\",\n    \"left-text\": \"返回\",\n    \"left-arrow\": \"\",\n    onClickLeft: $setup.onClickLeft\n  }, null, 8 /* PROPS */, [\"onClickLeft\"]), _createVNode(_component_van_card, {\n    title: \"八字命理AI人生指导\",\n    desc: \"个性化人生指导建议\",\n    price: \"9.90\",\n    currency: \"¥\"\n  }, {\n    tags: _withCtx(() => [_createVNode(_component_van_tag, {\n      plain: \"\",\n      type: \"primary\"\n    }, {\n      default: _withCtx(() => _cache[4] || (_cache[4] = [_createTextVNode(\"专业分析\")])),\n      _: 1 /* STABLE */,\n      __: [4]\n    }), _createVNode(_component_van_tag, {\n      plain: \"\",\n      type: \"success\"\n    }, {\n      default: _withCtx(() => _cache[5] || (_cache[5] = [_createTextVNode(\"AI解读\")])),\n      _: 1 /* STABLE */,\n      __: [5]\n    }), _createVNode(_component_van_tag, {\n      plain: \"\",\n      type: \"warning\"\n    }, {\n      default: _withCtx(() => _cache[6] || (_cache[6] = [_createTextVNode(\"PDF报告\")])),\n      _: 1 /* STABLE */,\n      __: [6]\n    })]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_van_cell_group, {\n    inset: \"\",\n    title: \"订单信息\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_van_cell, {\n      title: \"订单编号\",\n      value: $setup.orderId\n    }, null, 8 /* PROPS */, [\"value\"]), _createVNode(_component_van_cell, {\n      title: \"创建时间\",\n      value: $setup.createTime\n    }, null, 8 /* PROPS */, [\"value\"]), _createVNode(_component_van_cell, {\n      title: \"支付金额\",\n      value: \"¥9.90\"\n    })]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_van_cell_group, {\n    inset: \"\",\n    title: \"选择支付方式\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_van_cell, {\n      clickable: \"\",\n      onClick: _cache[0] || (_cache[0] = $event => $setup.paymentMethod = 'wechat')\n    }, {\n      title: _withCtx(() => [_createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_van_icon, {\n        name: \"wechat\",\n        color: \"#07C160\",\n        size: \"24\"\n      }), _cache[7] || (_cache[7] = _createElementVNode(\"span\", {\n        class: \"payment-name\"\n      }, \"微信支付\", -1 /* HOISTED */))])]),\n      \"right-icon\": _withCtx(() => [_createVNode(_component_van_radio, {\n        name: 'wechat',\n        checked: $setup.paymentMethod === 'wechat'\n      }, null, 8 /* PROPS */, [\"checked\"])]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_van_cell, {\n      clickable: \"\",\n      onClick: _cache[1] || (_cache[1] = $event => $setup.paymentMethod = 'alipay')\n    }, {\n      title: _withCtx(() => [_createElementVNode(\"div\", _hoisted_3, [_createVNode(_component_van_icon, {\n        name: \"alipay\",\n        color: \"#1677FF\",\n        size: \"24\"\n      }), _cache[8] || (_cache[8] = _createElementVNode(\"span\", {\n        class: \"payment-name\"\n      }, \"支付宝\", -1 /* HOISTED */))])]),\n      \"right-icon\": _withCtx(() => [_createVNode(_component_van_radio, {\n        name: 'alipay',\n        checked: $setup.paymentMethod === 'alipay'\n      }, null, 8 /* PROPS */, [\"checked\"])]),\n      _: 1 /* STABLE */\n    })]),\n    _: 1 /* STABLE */\n  }), _createElementVNode(\"div\", _hoisted_4, [_createVNode(_component_van_button, {\n    round: \"\",\n    block: \"\",\n    type: \"primary\",\n    onClick: $setup.onPayment\n  }, {\n    default: _withCtx(() => _cache[9] || (_cache[9] = [_createTextVNode(\" 立即支付 \")])),\n    _: 1 /* STABLE */,\n    __: [9]\n  }, 8 /* PROPS */, [\"onClick\"])]), _createVNode(_component_van_popup, {\n    show: $setup.showQRCode,\n    \"onUpdate:show\": _cache[3] || (_cache[3] = $event => $setup.showQRCode = $event),\n    round: \"\"\n  }, {\n    default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_5, [_cache[13] || (_cache[13] = _createElementVNode(\"h3\", null, \"请扫码支付\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_6, [$setup.qrCodeUrl && $setup.qrCodeUrl.startsWith('data:') ? (_openBlock(), _createElementBlock(\"img\", {\n      key: 0,\n      src: $setup.qrCodeUrl,\n      alt: \"支付二维码\"\n    }, null, 8 /* PROPS */, _hoisted_7)) : $setup.qrCodeUrl ? (_openBlock(), _createElementBlock(\"iframe\", {\n      key: 1,\n      src: $setup.qrCodeUrl,\n      frameborder: \"0\",\n      width: \"200\",\n      height: \"200\"\n    }, null, 8 /* PROPS */, _hoisted_8)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_9, _cache[10] || (_cache[10] = [_createElementVNode(\"p\", null, \"正在加载支付二维码...\", -1 /* HOISTED */)])))]), _cache[14] || (_cache[14] = _createElementVNode(\"p\", null, \"支付金额: ¥9.90\", -1 /* HOISTED */)), _createVNode(_component_van_button, {\n      type: \"primary\",\n      block: \"\",\n      onClick: $setup.checkPaymentStatus\n    }, {\n      default: _withCtx(() => _cache[11] || (_cache[11] = [_createTextVNode(\" 我已完成支付 \")])),\n      _: 1 /* STABLE */,\n      __: [11]\n    }, 8 /* PROPS */, [\"onClick\"]), _createVNode(_component_van_button, {\n      plain: \"\",\n      block: \"\",\n      onClick: _cache[2] || (_cache[2] = $event => $setup.showQRCode = false),\n      style: {\n        \"margin-top\": \"10px\"\n      }\n    }, {\n      default: _withCtx(() => _cache[12] || (_cache[12] = [_createTextVNode(\" 取消 \")])),\n      _: 1 /* STABLE */,\n      __: [12]\n    })])]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"show\"])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createVNode","_component_van_nav_bar","title","onClickLeft","$setup","_component_van_card","desc","price","currency","tags","_withCtx","_component_van_tag","plain","type","default","_cache","_createTextVNode","_","__","_component_van_cell_group","inset","_component_van_cell","value","orderId","createTime","clickable","onClick","$event","paymentMethod","_createElementVNode","_hoisted_2","_component_van_icon","name","color","size","_component_van_radio","checked","_hoisted_3","_hoisted_4","_component_van_button","round","block","onPayment","_component_van_popup","show","showQRCode","_hoisted_5","_hoisted_6","qrCodeUrl","startsWith","src","alt","_hoisted_7","frameborder","width","height","_hoisted_8","_hoisted_9","checkPaymentStatus","style"],"sources":["D:\\Python\\20250603开发八字命理AI指导功能页码\\开发八字命理AI指导功能页码\\frontend\\src\\Payment.vue"],"sourcesContent":["<template>\n  <div class=\"payment-container\">\n    <van-nav-bar\n      title=\"订单支付\"\n      left-text=\"返回\"\n      left-arrow\n      @click-left=\"onClickLeft\"\n    />\n    \n    <van-card\n      title=\"八字命理AI人生指导\"\n      desc=\"个性化人生指导建议\"\n      price=\"9.90\"\n      currency=\"¥\"\n    >\n      <template #tags>\n        <van-tag plain type=\"primary\">专业分析</van-tag>\n        <van-tag plain type=\"success\">AI解读</van-tag>\n        <van-tag plain type=\"warning\">PDF报告</van-tag>\n      </template>\n    </van-card>\n    \n    <van-cell-group inset title=\"订单信息\">\n      <van-cell title=\"订单编号\" :value=\"orderId\" />\n      <van-cell title=\"创建时间\" :value=\"createTime\" />\n      <van-cell title=\"支付金额\" value=\"¥9.90\" />\n    </van-cell-group>\n    \n    <van-cell-group inset title=\"选择支付方式\">\n      <van-cell clickable @click=\"paymentMethod = 'wechat'\">\n        <template #title>\n          <div class=\"payment-method\">\n            <van-icon name=\"wechat\" color=\"#07C160\" size=\"24\" />\n            <span class=\"payment-name\">微信支付</span>\n          </div>\n        </template>\n        <template #right-icon>\n          <van-radio :name=\"'wechat'\" :checked=\"paymentMethod === 'wechat'\" />\n        </template>\n      </van-cell>\n      \n      <van-cell clickable @click=\"paymentMethod = 'alipay'\">\n        <template #title>\n          <div class=\"payment-method\">\n            <van-icon name=\"alipay\" color=\"#1677FF\" size=\"24\" />\n            <span class=\"payment-name\">支付宝</span>\n          </div>\n        </template>\n        <template #right-icon>\n          <van-radio :name=\"'alipay'\" :checked=\"paymentMethod === 'alipay'\" />\n        </template>\n      </van-cell>\n    </van-cell-group>\n    \n    <div class=\"payment-action\">\n      <van-button round block type=\"primary\" @click=\"onPayment\">\n        立即支付\n      </van-button>\n    </div>\n    \n    <van-popup :show=\"showQRCode\" @update:show=\"showQRCode = $event\" round>\n      <div class=\"qrcode-container\">\n        <h3>请扫码支付</h3>\n        <div class=\"qrcode\">\n          <img v-if=\"qrCodeUrl && qrCodeUrl.startsWith('data:')\" :src=\"qrCodeUrl\" alt=\"支付二维码\" />\n          <iframe v-else-if=\"qrCodeUrl\" :src=\"qrCodeUrl\" frameborder=\"0\" width=\"200\" height=\"200\"></iframe>\n          <div v-else class=\"qrcode-placeholder\">\n            <p>正在加载支付二维码...</p>\n          </div>\n        </div>\n        <p>支付金额: ¥9.90</p>\n        <van-button type=\"primary\" block @click=\"checkPaymentStatus\">\n          我已完成支付\n        </van-button>\n        <van-button plain block @click=\"showQRCode = false\" style=\"margin-top: 10px\">\n          取消\n        </van-button>\n      </div>\n    </van-popup>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, watch, onUnmounted } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport { Toast } from 'vant';\nimport axios from 'axios';\n\nexport default {\n  name: 'PaymentPage',\n  setup() {\n    const route = useRoute();\n    const router = useRouter();\n    \n    // 从路由参数获取订单信息\n    const gender = route.query.gender;\n    const calendarType = route.query.calendarType;\n    const birthDate = route.query.birthDate;\n    const birthTime = route.query.birthTime;\n    const birthPlace = route.query.birthPlace;\n    const livingPlace = route.query.livingPlace;\n    const focusAreas = route.query.focusAreas?.split(',') || [];\n    \n    // 支付相关状态\n    const orderId = ref('');\n    const createTime = ref(new Date().toLocaleString());\n    const paymentMethod = ref('wechat');\n    const showQRCode = ref(false);\n    const qrCodeUrl = ref('');\n    const isProcessing = ref(false);\n    \n    onMounted(async () => {\n      // 调用API创建订单\n      try {\n        Toast.loading({\n          message: '正在创建订单...',\n          duration: 0,\n          forbidClick: true\n        });\n        \n        // 调用订单创建API\n        const response = await axios.post('/api/order/create/simple', {\n          gender,\n          birthDate,\n          birthTime,\n          birthPlace,\n          livingPlace,\n          focusAreas: focusAreas || [],\n          calendarType: calendarType || 'solar'\n        });\n        \n        if (response.data.code === 200) {\n          orderId.value = response.data.data.orderId;\n          createTime.value = new Date().toLocaleString();\n          Toast.success('订单创建成功');\n          console.log('订单创建成功', orderId.value);\n        } else {\n          Toast.fail(response.data.message || '创建订单失败');\n        }\n      } catch (error) {\n        console.error('创建订单失败:', error);\n        Toast.fail('创建订单失败，请重试');\n      }\n    });\n    \n    const onClickLeft = () => {\n      router.go(-1);\n    };\n    \n    const onPayment = () => {\n      // 检查订单ID\n      if (!orderId.value) {\n        Toast.fail('订单尚未创建，请刷新页面重试');\n        return;\n      }\n      \n      // 根据支付方式获取真实二维码\n      Toast.loading({\n        message: '正在获取支付二维码...',\n        duration: 0,\n        forbidClick: true\n      });\n      \n      // 创建真实支付订单并获取支付二维码\n      const createPayment = async () => {\n        try {\n          const paymentData = {\n            paymentMethod: paymentMethod.value,\n            birthDate,\n            birthTime,\n            gender,\n            focusAreas,\n            calendarType,\n            birthPlace,\n            livingPlace\n          };\n          \n          // 调用真实支付API\n          const response = await axios.post(`/api/order/create/payment/${orderId.value}`, paymentData);\n          \n          if (response.data.code === 200) {\n            Toast.clear();\n            \n            // 解析支付二维码返回数据\n            if (response.data.data.qr_image) {\n              // 直接使用Base64二维码图片\n              qrCodeUrl.value = response.data.data.qr_image;\n              showQRCode.value = true;\n            } else if (response.data.data.code_url) {\n              // 生成二维码图片\n              qrCodeUrl.value = response.data.data.code_url;\n              showQRCode.value = true;\n            } else if (response.data.data.pay_url) {\n              // 支付宝URL\n              window.open(response.data.data.pay_url, '_blank');\n            } else {\n              Toast.fail('未获取到支付二维码');\n            }\n          } else {\n            Toast.fail(response.data.message || '获取支付二维码失败');\n          }\n        } catch (error) {\n          console.error('获取支付二维码出错:', error);\n          Toast.fail('获取支付二维码失败');\n        }\n      };\n      \n      createPayment();\n    };\n    \n    const onPaymentSuccess = async () => {\n      if (isProcessing.value) {\n        return false;\n      }\n      \n      isProcessing.value = true;\n      Toast.loading({\n        message: '正在查询支付结果...',\n        duration: 0,\n        forbidClick: true\n      });\n      \n      try {\n        // 查询支付结果API\n        console.log('查询支付结果:', orderId.value);\n        \n        // 增加重试次数，微信支付状态更新可能有延迟\n        let retryCount = 0;\n        const maxRetries = 3;\n        let response;\n        let paymentSuccess = false;\n        \n        // 重试查询支付状态\n        while (retryCount < maxRetries && !paymentSuccess) {\n          response = await axios.get(`/api/order/query/${orderId.value}`);\n          console.log(`支付查询响应 (尝试 ${retryCount + 1}/${maxRetries}):`, response.data);\n          \n          if (response.data.code === 200 && response.data.data.status === 'paid') {\n            paymentSuccess = true;\n            break;\n          }\n          \n          // 如果查询失败，等待2秒后重试\n          if (!paymentSuccess) {\n            await new Promise(resolve => setTimeout(resolve, 2000));\n            retryCount++;\n          }\n        }\n        \n        // 如果重试后仍未成功，尝试手动更新接口\n        if (!paymentSuccess) {\n          console.log('查询支付状态失败，尝试手动更新订单状态');\n          response = await axios.get(`/api/order/manual_update/${orderId.value}`);\n          console.log('手动更新响应:', response.data);\n          paymentSuccess = (response.data.code === 200 && response.data.data.status === 'paid');\n        }\n        \n        if (paymentSuccess) {\n          Toast.success('支付成功');\n          showQRCode.value = false;\n          \n          // 使用服务器返回的resultId\n          const resultId = response.data.data.resultId;\n          \n          if (!resultId) {\n            console.error('服务器未返回有效的resultId');\n            Toast.fail('获取结果ID失败，请联系客服');\n            return;\n          }\n          \n          console.log('获取到结果ID:', resultId);\n          \n          // 请求立即计算完整的命盘数据\n          try {\n            Toast.loading({\n              message: '正在生成八字命盘...',\n              duration: 0,\n              forbidClick: true\n            });\n            \n            // 获取基础URL，确保在不同环境下都能正确请求API\n            const baseUrl = process.env.VUE_APP_API_URL || window.location.origin;\n            console.log('使用API基础URL:', baseUrl);\n            \n            // 修改：使用正确的update API端点\n            console.log('正在请求更新八字数据:', resultId);\n            const updateResponse = await axios.post(`${baseUrl}/api/bazi/update/${resultId}`, {\n              birthDate,\n              birthTime,\n              gender,\n              calendarType,\n              birthPlace,\n              livingPlace,\n              focusAreas,\n              forceRecalculate: true,        // 强制重新计算基础数据\n              generateShenshaData: true,     // 生成神煞数据\n              generateDayunData: true,       // 生成大运数据 \n              generateLiunianData: true,     // 生成流年数据\n              useDeepseekAPI: true           // 使用DeepSeek API进行分析\n            });\n            \n            console.log('八字数据更新响应:', updateResponse.data);\n            \n            if (updateResponse.data.code === 200) {\n              Toast.success('命盘数据生成中');\n              \n              // 确保延迟足够长，以便后端完成八字数据处理\n              setTimeout(async () => {\n                try {\n                  console.log('正在请求八字深度分析:', resultId);\n                  const analyzeResponse = await axios.post(`${baseUrl}/api/bazi/analyze/${resultId}`, {\n                    useDeepseekAPI: true\n                  });\n                  console.log('八字深度分析响应:', analyzeResponse.data);\n                  Toast.success('命盘分析已开始');\n                  \n                  // 跳转到结果页面，传递必要参数\n                  redirectToResultPage(resultId);\n                } catch (analyzeError) {\n                  console.error('深度分析请求失败:', analyzeError);\n                  Toast.fail('命盘分析请求失败');\n                  // 即使分析失败，仍然跳转到结果页面\n                  redirectToResultPage(resultId);\n                }\n              }, 3000); // 延长等待时间到3秒\n            } else {\n              console.error('八字数据更新失败:', updateResponse.data.message);\n              Toast.fail('命盘计算请求失败: ' + (updateResponse.data.message || '未知错误'));\n              // 即使更新失败，仍然跳转到结果页面\n              redirectToResultPage(resultId);\n            }\n          } catch (calcError) {\n            console.error('命盘计算请求失败:', calcError);\n            Toast.fail('命盘计算请求失败: ' + (calcError.message || '未知错误'));\n            // 即使请求失败，仍然跳转到结果页面\n            redirectToResultPage(resultId);\n          }\n        } else {\n          Toast.fail(response?.data?.message || '支付处理失败');\n          isProcessing.value = false;\n        }\n      } catch (error) {\n        console.error('支付处理出错:', error);\n        \n        // 错误处理：尝试构造默认结果ID\n        Toast.clear();\n        Toast.fail('支付处理出错，将使用默认结果ID');\n        \n        // 构造默认结果ID\n        const defaultResultId = 'RES' + orderId.value.replace(/^BZ/, '');\n        console.log('使用默认结果ID:', defaultResultId);\n        \n        // 即使出错也跳转到结果页面，使用默认结果ID\n        redirectToResultPage(defaultResultId);\n      } finally {\n        isProcessing.value = false;\n      }\n    };\n    \n    // 添加结果页面跳转函数\n    const redirectToResultPage = (resultId) => {\n      // 延迟跳转，给用户体验更好的过渡\n      setTimeout(() => {\n        router.push({\n          path: `/result/${resultId}`,\n          query: {\n            birthDate,\n            birthTime,\n            gender,\n            birthPlace,\n            livingPlace,\n            originalOrderId: orderId.value // 传递原始订单ID\n          }\n        });\n      }, 1000);\n    };\n    \n    const checkPaymentStatus = async () => {\n      if (isProcessing.value) return;\n      \n      isProcessing.value = true;\n      Toast.loading({\n        message: '正在查询支付状态...',\n        duration: 0,\n        forbidClick: true\n      });\n      \n      try {\n        const response = await axios.get(`/api/order/query/${orderId.value}`);\n        console.log('支付状态查询响应:', response.data);\n        \n        if (response.data.code === 200 && response.data.data.status === 'paid') {\n          // 支付成功，继续处理\n          onPaymentSuccess();\n        } else {\n          Toast.fail('未检测到支付完成，请确认支付或稍后再试');\n          isProcessing.value = false;\n        }\n      } catch (error) {\n        console.error('查询支付状态失败:', error);\n        Toast.fail('查询支付状态失败');\n        isProcessing.value = false;\n      }\n    };\n    \n    // 添加轮询支付状态的方法\n    let paymentStatusInterval = null;\n    \n    const startPaymentStatusPolling = () => {\n      // 每5秒查询一次支付状态\n      paymentStatusInterval = setInterval(async () => {\n        try {\n          const response = await axios.get(`/api/order/query/${orderId.value}`);\n          console.log('轮询支付状态:', response.data);\n          \n          if (response.data.code === 200 && response.data.data.status === 'paid') {\n            // 支付成功，停止轮询并处理\n            clearInterval(paymentStatusInterval);\n            onPaymentSuccess();\n          }\n        } catch (error) {\n          console.error('轮询支付状态失败:', error);\n        }\n      }, 5000);\n    };\n    \n    // 在显示二维码时开始轮询，在组件销毁时清除轮询\n    watch(showQRCode, (newVal) => {\n      if (newVal) {\n        startPaymentStatusPolling();\n      } else if (paymentStatusInterval) {\n        clearInterval(paymentStatusInterval);\n      }\n    });\n    \n    onUnmounted(() => {\n      if (paymentStatusInterval) {\n        clearInterval(paymentStatusInterval);\n      }\n    });\n\n    return {\n      orderId,\n      createTime,\n      paymentMethod,\n      showQRCode,\n      qrCodeUrl,\n      isProcessing,\n      onClickLeft,\n      onPayment,\n      onPaymentSuccess,\n      checkPaymentStatus\n    };\n  }\n};\n</script>\n\n<style scoped>\n.payment-container {\n  padding-bottom: 20px;\n}\n\n.payment-method {\n  display: flex;\n  align-items: center;\n}\n\n.payment-name {\n  margin-left: 10px;\n}\n\n.payment-action {\n  padding: 20px 16px;\n}\n\n.qrcode-container {\n  padding: 20px;\n  text-align: center;\n  width: 280px;\n}\n\n.qrcode {\n  width: 200px;\n  height: 200px;\n  margin: 20px auto;\n  background-color: #f2f3f5;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: 1px solid #ebedf0;\n  border-radius: 4px;\n  overflow: hidden;\n}\n\n.qrcode iframe {\n  border: none;\n  width: 100%;\n  height: 100%;\n}\n\n.qrcode img {\n  max-width: 100%;\n  max-height: 100%;\n}\n\n.qrcode-placeholder {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  color: #969799;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
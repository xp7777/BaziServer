{"ast":null,"code":"import axios from 'axios';\n\n// 创建一个axios实例\nconst http = axios.create({\n  baseURL: 'http://localhost:5000',\n  // 后端API基础URL\n  timeout: 10000,\n  // 请求超时时间\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器 - 添加token\nhttp.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    // 确保token格式正确，不要添加Bearer前缀（后端可能已经处理）\n    config.headers['Authorization'] = token.startsWith('Bearer ') ? token : `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  console.error('请求拦截器错误:', error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器 - 处理错误\nhttp.interceptors.response.use(response => {\n  // 正常响应处理\n  return response;\n}, error => {\n  console.error('API请求错误:', error);\n\n  // 根据错误状态码处理特殊情况\n  if (error.response) {\n    const status = error.response.status;\n    const errorMessage = error.response.data?.message || '未知错误';\n    switch (status) {\n      case 401:\n        console.log('未授权，请重新登录');\n        // 可以在这里处理登出逻辑或跳转到登录页\n        localStorage.removeItem('token'); // 清除无效的token\n        break;\n      case 404:\n        console.log(`请求的资源不存在: ${errorMessage}`);\n        break;\n      case 500:\n        console.log(`服务器错误: ${errorMessage}`);\n        break;\n      default:\n        console.log(`未知错误(${status}): ${errorMessage}`);\n    }\n  } else if (error.request) {\n    // 请求已发出但没有收到响应\n    console.log('服务器未响应，请检查网络连接或后端服务是否运行');\n  } else {\n    // 设置请求时发生错误\n    console.log(`请求配置错误: ${error.message}`);\n  }\n  return Promise.reject(error);\n});\nexport default http;","map":{"version":3,"names":["axios","http","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","startsWith","error","console","Promise","reject","response","status","errorMessage","data","message","log","removeItem"],"sources":["C:/Users/123/Desktop/开发八字命理AI指导功能页码/frontend/src/api/http.js"],"sourcesContent":["import axios from 'axios';\n\n// 创建一个axios实例\nconst http = axios.create({\n  baseURL: 'http://localhost:5000', // 后端API基础URL\n  timeout: 10000, // 请求超时时间\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器 - 添加token\nhttp.interceptors.request.use(\n  config => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      // 确保token格式正确，不要添加Bearer前缀（后端可能已经处理）\n      config.headers['Authorization'] = token.startsWith('Bearer ') ? token : `Bearer ${token}`;\n    }\n    return config;\n  },\n  error => {\n    console.error('请求拦截器错误:', error);\n    return Promise.reject(error);\n  }\n);\n\n// 响应拦截器 - 处理错误\nhttp.interceptors.response.use(\n  response => {\n    // 正常响应处理\n    return response;\n  },\n  error => {\n    console.error('API请求错误:', error);\n    \n    // 根据错误状态码处理特殊情况\n    if (error.response) {\n      const status = error.response.status;\n      const errorMessage = error.response.data?.message || '未知错误';\n      \n      switch (status) {\n        case 401:\n          console.log('未授权，请重新登录');\n          // 可以在这里处理登出逻辑或跳转到登录页\n          localStorage.removeItem('token'); // 清除无效的token\n          break;\n        case 404:\n          console.log(`请求的资源不存在: ${errorMessage}`);\n          break;\n        case 500:\n          console.log(`服务器错误: ${errorMessage}`);\n          break;\n        default:\n          console.log(`未知错误(${status}): ${errorMessage}`);\n      }\n    } else if (error.request) {\n      // 请求已发出但没有收到响应\n      console.log('服务器未响应，请检查网络连接或后端服务是否运行');\n    } else {\n      // 设置请求时发生错误\n      console.log(`请求配置错误: ${error.message}`);\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\nexport default http; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAAC;EACxBC,OAAO,EAAE,uBAAuB;EAAE;EAClCC,OAAO,EAAE,KAAK;EAAE;EAChBC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAJ,IAAI,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAC3BC,MAAM,IAAI;EACR,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACT;IACAD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAGK,KAAK,CAACG,UAAU,CAAC,SAAS,CAAC,GAAGH,KAAK,GAAG,UAAUA,KAAK,EAAE;EAC3F;EACA,OAAOD,MAAM;AACf,CAAC,EACDK,KAAK,IAAI;EACPC,OAAO,CAACD,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;EAChC,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAb,IAAI,CAACK,YAAY,CAACY,QAAQ,CAACV,GAAG,CAC5BU,QAAQ,IAAI;EACV;EACA,OAAOA,QAAQ;AACjB,CAAC,EACDJ,KAAK,IAAI;EACPC,OAAO,CAACD,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;;EAEhC;EACA,IAAIA,KAAK,CAACI,QAAQ,EAAE;IAClB,MAAMC,MAAM,GAAGL,KAAK,CAACI,QAAQ,CAACC,MAAM;IACpC,MAAMC,YAAY,GAAGN,KAAK,CAACI,QAAQ,CAACG,IAAI,EAAEC,OAAO,IAAI,MAAM;IAE3D,QAAQH,MAAM;MACZ,KAAK,GAAG;QACNJ,OAAO,CAACQ,GAAG,CAAC,WAAW,CAAC;QACxB;QACAZ,YAAY,CAACa,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;QAClC;MACF,KAAK,GAAG;QACNT,OAAO,CAACQ,GAAG,CAAC,aAAaH,YAAY,EAAE,CAAC;QACxC;MACF,KAAK,GAAG;QACNL,OAAO,CAACQ,GAAG,CAAC,UAAUH,YAAY,EAAE,CAAC;QACrC;MACF;QACEL,OAAO,CAACQ,GAAG,CAAC,QAAQJ,MAAM,MAAMC,YAAY,EAAE,CAAC;IACnD;EACF,CAAC,MAAM,IAAIN,KAAK,CAACP,OAAO,EAAE;IACxB;IACAQ,OAAO,CAACQ,GAAG,CAAC,yBAAyB,CAAC;EACxC,CAAC,MAAM;IACL;IACAR,OAAO,CAACQ,GAAG,CAAC,WAAWT,KAAK,CAACQ,OAAO,EAAE,CAAC;EACzC;EAEA,OAAON,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeb,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
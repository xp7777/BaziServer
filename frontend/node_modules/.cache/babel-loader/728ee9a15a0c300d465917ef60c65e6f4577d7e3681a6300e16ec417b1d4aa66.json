{"ast":null,"code":"import { ref, onMounted, reactive, computed, watch, onUnmounted } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport { Toast, Dialog } from 'vant';\nimport { jsPDF } from 'jspdf';\nimport html2canvas from 'html2canvas';\nimport axios from 'axios';\nimport MarkdownIt from 'markdown-it'; // 添加markdown-it导入\n\n// 创建markdown解析器实例\n\nexport default {\n  __name: 'Result',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const md = new MarkdownIt({\n      html: true,\n      breaks: true,\n      linkify: true,\n      typographer: true\n    });\n    const route = useRoute();\n    const router = useRouter();\n    const resultId = ref(route.params.id || route.query.resultId);\n    const activeTab = ref(0);\n    const loading = ref(false);\n\n    // 添加分析状态相关变量\n    const isAnalyzing = ref(false);\n    const analyzeProgress = ref(0);\n    const analyzeTimer = ref(null);\n\n    // 渲染Markdown内容\n    const renderMarkdown = content => {\n      if (!content) return '';\n      try {\n        // 检查内容是否已经是HTML\n        if (content.includes('<') && content.includes('>') && content.includes('<div') || content.includes('<p>')) {\n          // 如果已经含有HTML标签，可能已经被渲染过，直接返回\n          return content;\n        }\n\n        // 预处理八字分析特殊格式\n        let processedContent = content;\n\n        // 处理加粗文本 **文本**\n        processedContent = processedContent.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>');\n\n        // 处理分隔符 --\n        processedContent = processedContent.replace(/\\s*--\\s*/g, '<hr>');\n\n        // 处理标题（以#开头的行）\n        processedContent = processedContent.replace(/^(#+)\\s+(.*?)$/gm, (match, hashes, text) => {\n          const level = Math.min(hashes.length, 6);\n          return `<h${level}>${text}</h${level}>`;\n        });\n\n        // 处理列表（以-或数字开头的行）\n        processedContent = processedContent.replace(/^- (.*?)$/gm, '<li>$1</li>');\n        processedContent = processedContent.replace(/^(\\d+)\\. (.*?)$/gm, '<li>$1. $2</li>');\n\n        // 将连续的<li>元素包装在<ul>或<ol>中\n        if (processedContent.includes('<li>')) {\n          // 简单检测是否含有数字列表\n          const hasNumberList = /^<li>\\d+\\./.test(processedContent);\n          const listTag = hasNumberList ? 'ol' : 'ul';\n\n          // 将连续的<li>元素包装在列表标签中\n          processedContent = processedContent.replace(/(<li>.*?<\\/li>\\n*)+/g, match => {\n            return `<${listTag}>${match}</${listTag}>`;\n          });\n        }\n\n        // 处理段落\n        if (!processedContent.includes('<p>')) {\n          const paragraphs = processedContent.split('\\n\\n');\n          processedContent = paragraphs.map(p => {\n            // 如果段落不是以HTML标签开头，则添加<p>标签\n            if (p.trim() && !p.trim().startsWith('<')) {\n              return `<p>${p}</p>`;\n            }\n            return p;\n          }).join('\\n');\n        }\n\n        // 最后使用markdown-it处理任何剩余的Markdown标记\n        return md.render(processedContent);\n      } catch (e) {\n        console.error('Markdown渲染失败:', e);\n        return content; // 如果渲染失败，返回原始内容\n      }\n    };\n\n    // 用户年龄，从URL参数或localStorage获取\n    const userAge = ref(null);\n    // 尝试从URL参数获取年龄\n    if (route.query.age && !isNaN(parseInt(route.query.age))) {\n      userAge.value = parseInt(route.query.age);\n    }\n    // 如果URL参数中没有年龄，尝试从localStorage获取\n    else if (localStorage.getItem('userAge') && !isNaN(parseInt(localStorage.getItem('userAge')))) {\n      userAge.value = parseInt(localStorage.getItem('userAge'));\n    }\n    // 记录用户年龄到控制台，便于调试\n    console.log('用户年龄:', userAge.value);\n\n    // 从分析文本中提取特定部分内容\n    const getAnalysisContent = sectionName => {\n      try {\n        // 如果是性格特点或学业发展，直接从对应字段获取\n        if (sectionName === '性格特点' && aiAnalysis.value.personality) {\n          return aiAnalysis.value.personality;\n        }\n        if (sectionName === '学业发展' && aiAnalysis.value.education) {\n          return aiAnalysis.value.education;\n        }\n\n        // 处理健康分析文本，尝试提取学业、性格等内容\n        if (aiAnalysis.value.health) {\n          const healthText = aiAnalysis.value.health;\n\n          // 查找各部分的标记\n          const sectionMatch = healthText.match(new RegExp(`###\\\\s*${sectionName}([\\\\s\\\\S]*?)(?=###|$)`, 'i'));\n          if (sectionMatch && sectionMatch[1]) {\n            return sectionMatch[1].trim();\n          }\n\n          // 如果是未来发展，尝试从overall中提取\n          if (sectionName === '未来发展' && aiAnalysis.value.overall) {\n            const futureMatch = aiAnalysis.value.overall.match(/未来(\\d+)年[：:]([\\s\\S]*?)(?=（本分析|$)/i);\n            if (futureMatch && futureMatch[2]) {\n              return futureMatch[2].trim();\n            }\n          }\n        }\n\n        // 如果没有找到对应部分或提取失败，返回空字符串\n        return '';\n      } catch (e) {\n        console.error(`提取${sectionName}内容时出错:`, e);\n        return '';\n      }\n    };\n\n    // 修改数据初始化\n    const focusAreas = ref([]);\n    const analysisResult = ref({});\n\n    // 初始化八字数据\n    const baziData = ref({\n      yearPillar: {\n        heavenlyStem: '',\n        earthlyBranch: '',\n        naYin: '',\n        shiShen: '',\n        wangShuai: ''\n      },\n      monthPillar: {\n        heavenlyStem: '',\n        earthlyBranch: '',\n        naYin: '',\n        shiShen: '',\n        wangShuai: ''\n      },\n      dayPillar: {\n        heavenlyStem: '',\n        earthlyBranch: '',\n        naYin: '',\n        shiShen: '',\n        wangShuai: ''\n      },\n      hourPillar: {\n        heavenlyStem: '',\n        earthlyBranch: '',\n        naYin: '',\n        shiShen: '',\n        wangShuai: ''\n      },\n      fiveElements: {},\n      flowingYears: [],\n      shenSha: {\n        dayChong: '',\n        zhiShen: '',\n        xiShen: '',\n        fuShen: '',\n        caiShen: '',\n        benMing: [],\n        yearGan: [],\n        yearZhi: [],\n        dayGan: [],\n        dayZhi: []\n      },\n      daYun: {\n        startAge: 0,\n        startYear: 0,\n        isForward: true,\n        daYunList: []\n      },\n      birthDate: null,\n      birthTime: null,\n      gender: null\n    });\n\n    // 初始化分析数据\n    const aiAnalysis = ref({\n      health: '',\n      career: '',\n      relationship: '',\n      children: '',\n      social: '',\n      future: '',\n      parents: '',\n      education: '',\n      // 新增字段\n      coreAnalysis: '',\n      fiveElements: '',\n      shenShaAnalysis: '',\n      keyPoints: ''\n    });\n    const testApiConnection = async () => {\n      try {\n        Toast.loading('正在测试API连接...');\n        // 使用配置好的http实例\n        const response = await axios.get('/');\n        console.log('API根路径响应:', response.data);\n        Toast.success('API连接成功');\n        return true;\n      } catch (error) {\n        console.error('API连接测试失败:', error);\n        Toast.fail('API连接失败，请检查后端服务');\n        return false;\n      }\n    };\n    onMounted(async () => {\n      // 先测试API连接\n      const isApiConnected = await testApiConnection();\n      if (!isApiConnected) {\n        console.warn('API连接失败，将使用模拟数据');\n        loading.value = false;\n        return;\n      }\n      console.log('结果页面加载，URL参数中的ID:', resultId.value);\n\n      // 如果没有resultId，尝试从本地存储获取\n      const localResultId = localStorage.getItem('resultId');\n      if (!resultId.value && localResultId) {\n        console.log('从本地存储获取ID:', localResultId);\n        // 更新resultId为从本地存储获取的值\n        resultId.value = localResultId;\n      }\n\n      // 确保resultId是字符串类型，不是布尔值或其他数据类型\n      if (resultId.value === true || resultId.value === false) {\n        console.error('resultId不应该是布尔值:', resultId.value);\n        resultId.value = localResultId || route.query.resultId || '';\n      }\n      console.log('最终使用的resultId:', resultId.value);\n\n      // 如果resultId为空或无效，显示错误并尝试从URL查询参数获取\n      if (!resultId.value) {\n        console.error('缺少结果ID，无法获取分析结果');\n\n        // 尝试从URL查询参数获取备选ID\n        const urlResultId = route.query.resultId;\n        if (urlResultId) {\n          console.log('从URL查询参数获取备选ID:', urlResultId);\n          resultId.value = urlResultId;\n        } else {\n          Toast.fail('缺少结果ID，无法获取分析结果');\n          loading.value = false;\n          return;\n        }\n      }\n\n      // 存储确认的resultId到本地存储\n      localStorage.setItem('resultId', resultId.value);\n\n      // 显示加载提示\n      Toast.loading({\n        message: '正在加载八字分析结果，请稍候...',\n        duration: 0,\n        forbidClick: true\n      });\n\n      // 调用getBaziResult函数获取结果\n      await getBaziResult();\n\n      // 检查分析是否完成\n      const stillAnalyzing = Object.values(aiAnalysis.value).some(value => typeof value === 'string' && value.includes('正在分析'));\n      if (stillAnalyzing) {\n        console.log('检测到分析仍在进行中...');\n        Toast.loading({\n          message: '正在生成八字分析结果，这可能需要30-60秒...',\n          duration: 0\n        });\n\n        // 设置分析状态为进行中\n        analysisStatus.value = 'pending';\n\n        // 启动轮询\n        await pollAnalysisStatus(resultId.value);\n        Toast.success('分析完成');\n\n        // 分析完成后更新状态\n        analysisStatus.value = 'completed';\n        analysisProgress.value = 100;\n      }\n\n      // 关闭加载提示\n      Toast.clear();\n    });\n    const getElementName = element => {\n      if (!element) return '--';\n      const elementNames = {\n        'wood': '木',\n        'fire': '火',\n        'earth': '土',\n        'metal': '金',\n        'water': '水',\n        '木': '木',\n        '火': '火',\n        '土': '土',\n        '金': '金',\n        '水': '水'\n      };\n      return elementNames[element] || element;\n    };\n    const onClickLeft = () => {\n      router.push('/');\n    };\n\n    // 修改后的直接流下载函数，适应后端始终返回文件流\n    const downloadPDFAsStream = async () => {\n      Toast.loading({\n        message: '正在生成PDF并下载报告...',\n        duration: 0,\n        position: 'middle',\n        forbidClick: true\n      });\n      if (!resultId.value) {\n        Toast.clear();\n        Toast.fail('缺少结果ID，无法下载报告');\n        return false;\n      }\n      try {\n        console.log('直接下载报告, 结果ID:', resultId.value);\n\n        // 创建下载链接，添加时间戳避免缓存问题和force参数强制重新生成\n        const timestamp = new Date().getTime();\n        // 默认启用markdown解析\n        const downloadUrl = `/api/bazi/pdf/${resultId.value}?t=${timestamp}&force=true&parseMarkdown=true`;\n        console.log('下载URL:', downloadUrl);\n\n        // 使用fetch API获取文件流\n        const response = await fetch(downloadUrl, {\n          method: 'GET',\n          cache: 'no-cache',\n          headers: {\n            'Cache-Control': 'no-cache, no-store, must-revalidate',\n            'Pragma': 'no-cache',\n            'Expires': '0'\n          }\n        });\n\n        // 检查错误\n        if (!response.ok) {\n          let errorMsg = `下载失败: HTTP错误 ${response.status}`;\n          try {\n            const contentType = response.headers.get('content-type');\n            if (contentType && contentType.includes('application/json')) {\n              const errorData = await response.json();\n              errorMsg = errorData.message || errorMsg;\n            } else {\n              // 如果不是JSON格式的错误，尝试获取文本错误信息\n              const errorText = await response.text();\n              if (errorText) {\n                errorMsg = `下载失败: ${errorText.substring(0, 100)}`;\n              }\n            }\n          } catch (e) {\n            console.error('解析错误响应失败:', e);\n          }\n          throw new Error(errorMsg);\n        }\n\n        // 检查内容类型\n        const contentType = response.headers.get('content-type');\n        const disposition = response.headers.get('content-disposition');\n        console.log('响应内容类型:', contentType);\n        console.log('响应内容处置:', disposition);\n\n        // 确定文件名和扩展名\n        let filename = `八字命理分析_${resultId.value}.pdf`;\n        if (disposition && disposition.includes('filename=')) {\n          const filenameMatch = disposition.match(/filename=[\"']?([^\"']+)[\"']?/);\n          if (filenameMatch && filenameMatch[1]) {\n            filename = filenameMatch[1];\n          }\n        }\n\n        // 确定文件类型\n        const fileExtension = contentType && contentType.includes('html') ? 'html' : 'pdf';\n        if (!filename.endsWith(fileExtension)) {\n          filename = `八字命理分析_${resultId.value}.${fileExtension}`;\n        }\n\n        // 转换为Blob对象\n        const blob = await response.blob();\n        console.log('PDF Blob大小:', blob.size, '字节');\n\n        // 检查Blob大小 - 注意：当浏览器接管下载时，可能会导致blob.size为0\n        // 因此，如果有Content-Disposition头部，我们应该认为下载已经开始\n        const isDownloadStarted = disposition && disposition.includes('attachment');\n        if (blob.size === 0 && !isDownloadStarted) {\n          throw new Error('下载的文件为空');\n        }\n\n        // 对于小文件，我们可以验证文件内容\n        // 但对于大文件或浏览器接管的下载，跳过验证\n        if (blob.size > 0 && blob.size < 1024 * 1024 && contentType && contentType.includes('pdf')) {\n          try {\n            // 读取文件头部以验证是否为有效的PDF\n            const fileReader = new FileReader();\n            const headerPromise = new Promise((resolve, reject) => {\n              fileReader.onloadend = e => resolve(e.target.result);\n              fileReader.onerror = e => reject(e);\n            });\n            fileReader.readAsArrayBuffer(blob.slice(0, 5));\n            const header = await headerPromise;\n            const headerView = new Uint8Array(header);\n            const headerString = String.fromCharCode.apply(null, headerView);\n            if (!headerString.startsWith('%PDF')) {\n              console.error('无效的PDF文件头:', headerString);\n              throw new Error('下载的不是有效的PDF文件');\n            } else {\n              console.log('PDF文件头验证通过');\n            }\n          } catch (e) {\n            console.error('验证PDF文件失败:', e);\n            // 如果是浏览器接管下载导致的验证失败，我们不抛出错误\n            if (!isDownloadStarted) {\n              throw new Error('验证PDF文件失败: ' + e.message);\n            } else {\n              console.warn('浏览器接管了下载，跳过PDF验证');\n            }\n          }\n        }\n\n        // 不管浏览器是否已经接管下载，我们都手动创建一个下载链接\n        try {\n          // 创建下载链接\n          const url = window.URL.createObjectURL(blob);\n          console.log('创建Blob URL:', url);\n\n          // 使用iframe方式下载，避免某些浏览器的下载拦截\n          const iframe = document.createElement('iframe');\n          iframe.style.display = 'none';\n          document.body.appendChild(iframe);\n\n          // 创建a标签并触发下载\n          const a = document.createElement('a');\n          a.href = url;\n          a.download = `八字命理分析_${resultId.value}.pdf`; // 强制使用自定义文件名\n          a.target = '_blank';\n          a.rel = 'noopener noreferrer';\n\n          // 在iframe中添加a标签并点击\n          iframe.contentWindow.document.body.appendChild(a);\n          console.log('触发下载, 文件名:', a.download);\n          a.click();\n\n          // 清理\n          setTimeout(() => {\n            window.URL.revokeObjectURL(url);\n            document.body.removeChild(iframe);\n            console.log('清理下载资源完成');\n          }, 1000); // 增加延时确保下载开始\n        } catch (e) {\n          console.error('创建下载链接失败:', e);\n\n          // 尝试使用window.open直接打开PDF\n          try {\n            console.log('尝试使用window.open方法下载');\n            const pdfWindow = window.open(downloadUrl, '_blank');\n            if (!pdfWindow) {\n              console.warn('弹出窗口被阻止，尝试其他方法');\n              // 提示用户直接打开链接\n              Dialog.alert({\n                title: '下载提示',\n                message: '系统无法自动下载PDF，请点击确定后手动保存文件',\n                confirmButtonText: '确定'\n              }).then(() => {\n                window.open(downloadUrl, '_blank');\n              });\n            }\n          } catch (openError) {\n            console.error('使用window.open下载失败:', openError);\n            throw new Error('下载失败，请尝试使用其他浏览器');\n          }\n        }\n        Toast.clear();\n        Toast.success('报告下载成功');\n        return true;\n      } catch (error) {\n        console.error('直接下载PDF出错:', error);\n        Toast.clear();\n\n        // 检查是否是因为浏览器已经接管了下载而导致的错误\n        if (error.message && (error.message.includes('下载的文件为空') || error.message.includes('验证PDF文件失败'))) {\n          // 如果是这类错误，可能是浏览器已经开始下载，我们不显示错误\n          console.log('可能是浏览器已经接管了下载，不显示错误');\n          Toast.success('报告下载已开始，请等待浏览器完成下载');\n          return true;\n        }\n\n        // 显示错误信息\n        Toast.fail(error.message || '下载失败，请稍后重试');\n        return false;\n      }\n    };\n\n    // 修改主下载函数，添加重试逻辑\n    const downloadPDF = async () => {\n      Toast.loading({\n        message: '正在准备生成PDF报告...',\n        duration: 5000,\n        position: 'middle'\n      });\n      if (!resultId.value) {\n        Toast.fail('缺少结果ID，无法生成报告');\n        return;\n      }\n      try {\n        // 先重新加载最新的数据，确保PDF包含最新的追问分析结果\n        Toast.loading({\n          message: '正在同步最新数据...',\n          duration: 5000\n        });\n\n        // 获取最新的基础分析结果\n        await getBaziResult();\n\n        // 获取最新的追问分析结果\n        await loadFollowupResults();\n        Toast.loading({\n          message: '正在生成并下载PDF报告...',\n          duration: 5000\n        });\n\n        // 最多尝试3次下载\n        let attempts = 0;\n        let success = false;\n        while (attempts < 3 && !success) {\n          attempts++;\n          if (attempts > 1) {\n            console.log(`尝试第${attempts}次下载...`);\n            Toast.loading({\n              message: `尝试第${attempts}次下载...`,\n              duration: 2000\n            });\n            // 在重试之前等待一段时间\n            await new Promise(resolve => setTimeout(resolve, 2000));\n          }\n\n          // 使用流式下载模式，并处理返回值\n          success = await downloadPDFAsStream();\n\n          // 如果流式下载成功，直接返回，不再尝试其他方法\n          if (success === true) {\n            return;\n          }\n        }\n\n        // 如果多次尝试后仍然失败，提示用户\n        if (!success) {\n          Toast.clear();\n          Dialog.alert({\n            title: 'PDF下载失败',\n            message: '下载PDF报告失败，请稍后再试。如果问题持续存在，请联系客服。'\n          });\n        }\n      } catch (error) {\n        console.error('下载PDF过程中发生错误:', error);\n        Toast.clear();\n        Toast.fail('生成PDF报告失败: ' + (error.message || '未知错误'));\n      }\n    };\n\n    // 本地生成PDF的函数\n    const generatePDFLocally = async () => {\n      console.log('使用客户端jsPDF库生成PDF');\n\n      // 获取内容元素\n      const element = document.querySelector('.result-container');\n      if (!element) {\n        throw new Error('找不到要转换的内容元素');\n      }\n      Toast.loading({\n        message: '正在捕获页面内容...',\n        duration: 5000\n      });\n      try {\n        // 在捕获内容前先应用Markdown格式（临时）\n        const sections = document.querySelectorAll('.analysis-section');\n        const originalContents = [];\n\n        // 确保所有Markdown内容都已经被渲染为HTML\n        sections.forEach((section, index) => {\n          const contentElement = section.querySelector('p, .markdown-content');\n          if (contentElement && !contentElement.classList.contains('markdown-content')) {\n            originalContents.push({\n              element: contentElement,\n              content: contentElement.innerHTML\n            });\n\n            // 如果内容中有Markdown语法但尚未渲染，则渲染它\n            if (contentElement.textContent.includes('**') || contentElement.textContent.includes('##') || contentElement.textContent.includes('--') || contentElement.textContent.includes('- ')) {\n              contentElement.innerHTML = md.render(contentElement.textContent);\n              contentElement.classList.add('markdown-content-temp');\n            }\n          }\n        });\n\n        // 使用html2canvas捕获内容\n        const canvas = await html2canvas(element, {\n          scale: 1,\n          useCORS: true,\n          logging: false,\n          windowWidth: document.documentElement.offsetWidth,\n          windowHeight: document.documentElement.offsetHeight\n        });\n        Toast.loading({\n          message: '正在生成PDF文件...',\n          duration: 5000\n        });\n\n        // 创建PDF文档\n        const pdf = new jsPDF('p', 'mm', 'a4');\n\n        // 计算尺寸和比例\n        const imgData = canvas.toDataURL('image/png');\n        const imgWidth = 210; // A4宽度，单位mm\n        const pageHeight = 297; // A4高度，单位mm\n        const imgHeight = canvas.height * imgWidth / canvas.width;\n        let heightLeft = imgHeight;\n        let position = 0;\n\n        // 添加首页\n        pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);\n        heightLeft -= pageHeight;\n\n        // 如果内容超过一页，添加更多页\n        while (heightLeft > 0) {\n          position = heightLeft - imgHeight;\n          pdf.addPage();\n          pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);\n          heightLeft -= pageHeight;\n        }\n\n        // 添加页脚\n        const pageCount = pdf.internal.getNumberOfPages();\n        for (let i = 1; i <= pageCount; i++) {\n          pdf.setPage(i);\n          pdf.setFontSize(10);\n          pdf.setTextColor(150);\n          pdf.text(`八字命理AI分析报告 - 页 ${i} / ${pageCount}`, pdf.internal.pageSize.getWidth() / 2, pdf.internal.pageSize.getHeight() - 10, {\n            align: 'center'\n          });\n        }\n\n        // 恢复原始内容\n        originalContents.forEach(item => {\n          if (item && item.element) {\n            item.element.innerHTML = item.content;\n            item.element.classList.remove('markdown-content-temp');\n          }\n        });\n\n        // 保存PDF\n        pdf.save(`八字命理分析_${resultId.value}.pdf`);\n        return true;\n      } catch (error) {\n        console.error('本地PDF生成错误:', error);\n        throw error;\n      }\n    };\n    const shareResult = () => {\n      Toast.success('分享功能开发中');\n    };\n\n    // 处理本地PDF生成\n    const handleLocalPDFGeneration = async () => {\n      try {\n        Toast.loading({\n          message: '正在本地生成PDF...',\n          duration: 0,\n          forbidClick: true\n        });\n\n        // 确保所有内容都已经渲染Markdown\n        const sections = document.querySelectorAll('.analysis-section');\n        const originalContents = [];\n        let needsRendering = false;\n\n        // 检查是否有内容需要渲染\n        sections.forEach(section => {\n          const contentElement = section.querySelector('p:not(.markdown-content)');\n          if (contentElement) {\n            needsRendering = true;\n          }\n        });\n\n        // 如果需要渲染，先将所有内容进行Markdown渲染\n        if (needsRendering) {\n          console.log('检测到需要渲染Markdown内容');\n          sections.forEach(section => {\n            const contentElements = section.querySelectorAll('p:not(.markdown-content)');\n            contentElements.forEach(element => {\n              const text = element.textContent;\n              if (text && (text.includes('**') || text.includes('#') || text.includes('-') || text.includes('1.') || text.includes('\\n'))) {\n                originalContents.push({\n                  element: element,\n                  content: element.innerHTML\n                });\n                element.innerHTML = md.render(text);\n                element.classList.add('markdown-content');\n                element.classList.add('temp-rendered');\n              }\n            });\n          });\n        }\n\n        // 生成PDF\n        await generatePDFLocally();\n\n        // 恢复原始内容\n        if (needsRendering) {\n          document.querySelectorAll('.temp-rendered').forEach(element => {\n            const original = originalContents.find(item => item.element === element);\n            if (original) {\n              element.innerHTML = original.content;\n              element.classList.remove('markdown-content');\n              element.classList.remove('temp-rendered');\n            }\n          });\n        }\n        Toast.clear();\n        Toast.success('本地PDF生成成功');\n      } catch (error) {\n        console.error('本地PDF生成失败:', error);\n        Toast.clear();\n        Toast.fail('本地PDF生成失败: ' + (error.message || '未知错误'));\n      }\n    };\n\n    // 添加分析状态检查函数\n    const checkAnalysisStatus = async resultId => {\n      try {\n        console.log('检查分析状态:', resultId);\n        const response = await axios.get(`/api/bazi/result/${resultId}`);\n        if (response.data.code === 200) {\n          // 检查AI分析是否已经生成\n          const aiAnalysisData = response.data.data.aiAnalysis || {};\n\n          // 统计已完成和正在分析的项目\n          let totalItems = 0;\n          let completedItems = 0;\n          Object.entries(aiAnalysisData).forEach(([key, value]) => {\n            totalItems++;\n            if (!(typeof value === 'string' && value.includes('正在分析'))) {\n              completedItems++;\n            }\n          });\n\n          // 更新进度\n          if (totalItems > 0) {\n            analyzeProgress.value = Math.floor(completedItems / totalItems * 100);\n          }\n\n          // 检查是否还有\"正在分析\"的内容\n          const stillAnalyzing = Object.values(aiAnalysisData).some(value => typeof value === 'string' && value.includes('正在分析'));\n          isAnalyzing.value = stillAnalyzing;\n          if (stillAnalyzing) {\n            console.log('分析仍在进行中...', `完成度: ${analyzeProgress.value}%`);\n            return false;\n          } else {\n            console.log('分析已完成');\n            return true;\n          }\n        }\n        return false;\n      } catch (error) {\n        console.error('检查分析状态出错:', error);\n        return false;\n      }\n    };\n\n    // 轮询检查分析状态\n    const pollAnalysisStatus = async resultId => {\n      let attempts = 0;\n      const maxAttempts = 30; // 最多轮询30次，约60秒\n\n      // 启动模拟进度条\n      if (!analyzeTimer.value) {\n        let progress = analysisProgress.value || 0;\n        analyzeTimer.value = setInterval(() => {\n          if (progress < 95) {\n            // 最多到95%，留5%给实际完成时\n            progress += Math.random() * 3;\n            if (progress > 95) progress = 95;\n            analysisProgress.value = Math.floor(progress);\n          }\n        }, 1000);\n      }\n\n      // 检查分析状态\n      const checkAnalysisStatus = async resultId => {\n        try {\n          const response = await axios.get(`/api/bazi/result/${resultId}`);\n          if (response.data.code === 200) {\n            const data = response.data.data;\n\n            // 更新AI分析结果\n            if (data.aiAnalysis) {\n              aiAnalysis.value = {\n                ...aiAnalysis.value,\n                ...data.aiAnalysis\n              };\n            }\n\n            // 检查分析状态\n            const status = data.analysisStatus || 'completed';\n            const progress = data.analysisProgress || 0;\n\n            // 更新状态和进度\n            analysisStatus.value = status;\n            analysisProgress.value = progress;\n\n            // 检查是否完成\n            if (status === 'completed' || progress >= 100) {\n              return true;\n            }\n\n            // 检查内容是否已生成（即使状态未更新）\n            const allGenerated = !Object.values(aiAnalysis.value).some(value => typeof value === 'string' && value.includes('正在分析'));\n            return allGenerated;\n          }\n          return false;\n        } catch (error) {\n          console.error('检查分析状态失败:', error);\n          return false;\n        }\n      };\n      return new Promise(resolve => {\n        const checkInterval = setInterval(async () => {\n          attempts++;\n          const isComplete = await checkAnalysisStatus(resultId);\n          if (isComplete || attempts >= maxAttempts) {\n            clearInterval(checkInterval);\n\n            // 清除模拟进度定时器\n            if (analyzeTimer.value) {\n              clearInterval(analyzeTimer.value);\n              analyzeTimer.value = null;\n            }\n            if (isComplete) {\n              // 如果完成，确保进度显示100%\n              analysisProgress.value = 100;\n              setTimeout(() => {\n                analysisStatus.value = 'completed';\n              }, 1000); // 短暂显示100%后隐藏进度条\n            }\n            await getBaziResult(); // 最后再获取一次完整结果\n            Toast.clear();\n            resolve(isComplete);\n          }\n        }, 2000); // 每2秒检查一次\n      });\n    };\n\n    // 重新加载八字数据\n    const reloadBaziData = async () => {\n      try {\n        Toast.loading({\n          message: '正在加载现有分析结果...',\n          duration: 0,\n          forbidClick: true\n        });\n        const response = await axios.get(`/api/bazi/result/${resultId.value}`);\n        if (response.data.code === 200) {\n          // 更新八字数据\n          if (response.data.data.baziChart) {\n            baziChart.value = response.data.data.baziChart;\n          }\n\n          // 更新AI分析结果\n          if (response.data.data.aiAnalysis) {\n            aiAnalysis.value = response.data.data.aiAnalysis;\n          }\n\n          // 检查分析状态和进度\n          analysisStatus.value = response.data.data.analysisStatus || 'completed';\n          analysisProgress.value = response.data.data.analysisProgress || 100;\n\n          // 如果分析已完成但进度条未达到100%，强制设置为100%\n          if (analysisStatus.value === 'completed' && analysisProgress.value < 100) {\n            analysisProgress.value = 100;\n          }\n          console.log('分析状态:', analysisStatus.value);\n          console.log('分析进度:', analysisProgress.value);\n          console.log('AI分析结果更新:', aiAnalysis.value);\n\n          // 重新加载追问分析结果\n          console.log('重新加载追问分析结果...');\n          await loadFollowupResults();\n\n          // 遍历所有已支付的追问选项，强制重新获取分析结果\n          const paidOptions = followupOptions.value.filter(option => option.paid);\n          if (paidOptions.length > 0) {\n            console.log('发现已支付的追问选项，强制重新获取:', paidOptions.map(o => o.id));\n            for (const option of paidOptions) {\n              await getFollowupAnalysis(option.id);\n            }\n          }\n          Toast.success('数据刷新成功');\n        } else {\n          Toast.fail(response.data.message || '加载失败');\n        }\n      } catch (error) {\n        console.error('重新加载失败:', error);\n        Toast.fail('加载失败: ' + (error.message || '未知错误'));\n      }\n    };\n\n    // 追问相关状态\n    const followupOptions = ref([{\n      id: 'marriage',\n      name: '婚姻感情',\n      selected: false,\n      paid: false\n    }, {\n      id: 'career',\n      name: '事业财运',\n      selected: false,\n      paid: false\n    }, {\n      id: 'children',\n      name: '子女情况',\n      selected: false,\n      paid: false\n    }, {\n      id: 'parents',\n      name: '父母情况',\n      selected: false,\n      paid: false\n    }, {\n      id: 'health',\n      name: '身体健康',\n      selected: false,\n      paid: false\n    }, {\n      id: 'education',\n      name: '学业',\n      selected: false,\n      paid: false\n    }, {\n      id: 'relationship',\n      name: '人际关系',\n      selected: false,\n      paid: false\n    }, {\n      id: 'fiveYears',\n      name: '近五年运势',\n      selected: false,\n      paid: false\n    }]);\n    const currentFollowup = ref(null);\n    const showFollowupDialog = ref(false);\n    const followupAnalysis = ref({});\n    const isLoadingFollowup = ref(false);\n\n    // 选择追问选项\n    const selectFollowupOption = async option => {\n      // 设置当前选择的追问选项\n      currentFollowup.value = option;\n\n      // 如果已经支付过，直接显示结果\n      if (option.paid) {\n        console.log(`选择已支付的追问: ${option.id}`);\n\n        // 如果已有分析结果，直接显示\n        if (followupAnalysis.value[option.id]) {\n          console.log(`已有${option.id}分析结果，直接显示`);\n          return;\n        }\n\n        // 如果没有分析结果，尝试获取\n        console.log(`尝试获取${option.id}分析结果`);\n        Toast.loading({\n          message: '正在加载分析结果...',\n          duration: 0\n        });\n        try {\n          // 尝试获取分析结果\n          const analysis = await getFollowupAnalysis(option.id);\n          if (analysis && typeof analysis === 'string' && analysis.length > 0) {\n            Toast.success('加载成功');\n            console.log(`成功获取${option.id}分析结果，长度: ${analysis.length}`);\n          } else {\n            Toast.fail('分析结果尚未生成完成，请稍后再试');\n            console.warn(`获取${option.id}分析结果失败或为空`);\n          }\n        } catch (error) {\n          console.error(`获取${option.id}分析失败:`, error);\n          Toast.fail('获取分析失败，请重试');\n        } finally {\n          Toast.clear();\n        }\n        return;\n      }\n\n      // 否则显示支付对话框\n      showFollowupDialog.value = true;\n    };\n\n    // 支付追问费用\n    const payForFollowup = async () => {\n      if (!currentFollowup.value) return;\n      try {\n        isLoadingFollowup.value = true;\n\n        // 第一步：创建订单\n        Toast.loading({\n          message: '正在创建订单...',\n          forbidClick: true,\n          duration: 0\n        });\n\n        // 获取URL参数\n        const urlParams = new URLSearchParams(window.location.search);\n\n        // 创建追问订单\n        const orderResponse = await axios.post('/api/order/create/followup', {\n          resultId: resultId.value,\n          area: currentFollowup.value.id\n        });\n        if (orderResponse.data.code === 200) {\n          const followupOrderId = orderResponse.data.data.orderId;\n          console.log('追问订单创建成功:', followupOrderId);\n\n          // 调用微信支付\n          Toast.loading({\n            message: '正在准备支付...',\n            forbidClick: true,\n            duration: 0\n          });\n\n          // 获取微信支付参数\n          const paymentResponse = await axios.post('/api/order/payment', {\n            orderId: followupOrderId,\n            paymentMethod: 'wechat',\n            deviceType: 'pc',\n            returnQrCode: true // 返回二维码图片\n          });\n          if (paymentResponse.data.code === 200) {\n            Toast.clear();\n\n            // 显示微信支付二维码\n            const paymentData = paymentResponse.data.data;\n            const qrCodeImage = paymentData.qr_image;\n            Dialog.confirm({\n              title: '微信支付',\n              message: `\n            <div style=\"text-align: center\">\n              <p>请使用微信扫描下方二维码支付</p>\n              <p>金额: ￥9.9</p>\n              <img src=\"${qrCodeImage}\" style=\"width: 200px; height: 200px\" />\n              <p style=\"font-size: 12px; color: #999\">付款完成后，请点击\"已完成支付\"按钮</p>\n            </div>\n          `,\n              messageAlign: 'center',\n              confirmButtonText: '已完成支付',\n              cancelButtonText: '取消',\n              showCancelButton: true\n            }).then(async () => {\n              // 用户点击\"已完成支付\"\n              Toast.loading({\n                message: '正在确认支付结果...',\n                forbidClick: true,\n                duration: 0\n              });\n\n              // 轮询检查支付结果\n              let checkCount = 0;\n              const maxChecks = 10;\n              let isPaid = false;\n              while (checkCount < maxChecks && !isPaid) {\n                try {\n                  const statusResponse = await axios.get(`/api/order/status/${followupOrderId}`);\n                  if (statusResponse.data.code === 200) {\n                    const orderStatus = statusResponse.data.data.status;\n                    if (orderStatus === 'paid') {\n                      isPaid = true;\n\n                      // 如果有返回新的resultId，更新它\n                      if (statusResponse.data.data.resultId) {\n                        resultId.value = statusResponse.data.data.resultId;\n                        localStorage.setItem('resultId', statusResponse.data.data.resultId);\n                      }\n                      break;\n                    }\n                  }\n                } catch (error) {\n                  console.error('检查支付状态出错:', error);\n                }\n\n                // 等待2秒后再次检查\n                await new Promise(resolve => setTimeout(resolve, 2000));\n                checkCount++;\n              }\n              Toast.clear();\n              if (isPaid) {\n                // 支付成功\n                Toast.success('支付成功');\n\n                // 更新UI，将当前追问项标记为已付费\n                const index = followupOptions.value.findIndex(o => o.id === currentFollowup.value.id);\n                if (index !== -1) {\n                  followupOptions.value[index].paid = true;\n                  followupOptions.value = [...followupOptions.value]; // 强制Vue更新\n                }\n\n                // 加载分析结果\n                Toast.loading({\n                  message: '正在生成分析结果，这可能需要30-60秒...',\n                  forbidClick: true,\n                  duration: 0\n                });\n\n                // 轮询检查分析结果状态\n                const area = currentFollowup.value.id;\n                await pollFollowupStatus();\n              } else {\n                // 支付未完成\n                Toast.fail('未检测到支付完成，请稍后再试');\n              }\n            }).catch(() => {\n              // 用户取消支付\n              Toast.clear();\n              Toast.info('已取消支付');\n            });\n          } else {\n            Toast.clear();\n            Toast.fail(paymentResponse.data.message || '获取支付参数失败');\n          }\n        } else {\n          Toast.fail('创建订单失败');\n        }\n      } catch (error) {\n        console.error('追问支付过程出错:', error);\n        Toast.fail('处理失败，请重试');\n      } finally {\n        isLoadingFollowup.value = false;\n      }\n    };\n\n    // 自定义轮询检查追问分析状态\n    const pollFollowupStatus = async () => {\n      const area = currentFollowup.value.id;\n      console.log(`开始轮询追问分析状态: ${area}`);\n\n      // 开始计时\n      const startTime = new Date().getTime();\n      const timeoutMs = 120000; // 120秒超时\n      let attempts = 0;\n      const maxAttempts = 60; // 最多等待120秒（60次 * 2秒）\n      let isComplete = false;\n      while (attempts < maxAttempts && !isComplete) {\n        attempts++;\n        try {\n          // 等待2秒\n          await new Promise(resolve => setTimeout(resolve, 2000));\n\n          // 检查是否超时\n          const currentTime = new Date().getTime();\n          if (currentTime - startTime > timeoutMs) {\n            console.warn(`轮询追问分析状态超时: ${area}`);\n            break;\n          }\n\n          // 检查追问分析结果\n          console.log(`尝试第${attempts}次获取追问分析: ${area}`);\n          const response = await axios.get(`/api/bazi/followup/${resultId.value}/${area}`);\n          if (response.data.code === 200 && response.data.data && response.data.data.analysis) {\n            // 检查分析内容是否为\"正在分析\"\n            const analysis = response.data.data.analysis;\n            if (typeof analysis === 'string' && !analysis.includes('正在分析')) {\n              console.log(`成功获取追问分析结果: ${area}`);\n              isComplete = true;\n              followupAnalysis.value[area] = analysis;\n              break;\n            } else {\n              console.log(`追问分析结果还在生成中: ${area}`);\n            }\n          }\n        } catch (error) {\n          // 只有非404错误才打印详细信息\n          if (!error.response || error.response.status !== 404) {\n            console.error('检查追问分析状态出错:', error);\n          }\n\n          // 如果遇到404错误，表示追问分析尚未创建完毕\n          if (error.response && error.response.status === 404) {\n            console.log('追问分析尚未创建完毕，继续等待...');\n          } else if (attempts >= maxAttempts / 2) {\n            // 如果尝试次数超过一半且仍然失败，不要退出轮询，但记录错误\n            console.warn(`获取分析数据失败(${attempts}/${maxAttempts})，继续尝试...`);\n          }\n        }\n      }\n\n      // 无论是否完成，都尝试获取最终结果\n      console.log(`轮询完成，最终尝试获取追问分析: ${area}`);\n      try {\n        const finalResult = await getFollowupAnalysis(area);\n        console.log(`最终获取追问分析结果: ${finalResult ? '成功' : '失败'}`);\n\n        // 更新UI\n        Toast.clear();\n        if (finalResult) {\n          Toast.success('分析已完成');\n\n          // 支付成功且分析完成后，切换到AI分析结果标签页显示结果\n          activeTab.value = 1; // 切换到AI分析结果标签\n\n          // 滚动到相应分析部分\n          setTimeout(() => {\n            const sectionMap = {\n              'relationship': '婚姻感情',\n              'marriage': '婚姻感情',\n              'career': '事业财运',\n              'work': '事业财运',\n              'money': '事业财运',\n              'wealth': '事业财运',\n              'children': '子女情况',\n              'family': '子女情况',\n              'parents': '父母情况',\n              'health': '身体健康',\n              'education': '学业',\n              'study': '学业',\n              'social': '人际关系',\n              'friends': '人际关系',\n              'future': '近五年运势',\n              'fiveYears': '近五年运势'\n            };\n            const targetTitle = sectionMap[currentFollowup.value.id];\n            if (targetTitle) {\n              // 查找并滚动到对应的分析部分\n              const sections = document.querySelectorAll('.analysis-section h3');\n              for (let i = 0; i < sections.length; i++) {\n                if (sections[i].textContent.includes(targetTitle)) {\n                  sections[i].scrollIntoView({\n                    behavior: 'smooth',\n                    block: 'center'\n                  });\n\n                  // 高亮显示该部分\n                  const section = sections[i].parentElement;\n                  section.classList.add('highlight-section');\n                  setTimeout(() => {\n                    section.classList.remove('highlight-section');\n                  }, 3000);\n                  break;\n                }\n              }\n            }\n          }, 500);\n        } else {\n          Toast.success('正在生成分析，请稍后刷新查看');\n        }\n        showFollowupDialog.value = false;\n        return finalResult;\n      } catch (error) {\n        console.error('获取最终追问分析结果失败:', error);\n        Toast.clear();\n        Toast.fail('分析生成失败，请稍后刷新页面');\n\n        // 如果分析结果仍然不可用，显示友好的错误信息\n        followupAnalysis.value[area] = \"分析正在处理中，请稍后刷新页面查看。\";\n        return null;\n      }\n    };\n\n    // 获取追问分析结果\n    const getFollowupAnalysis = async area => {\n      loading.value = true;\n      try {\n        console.log(`开始获取[${area}]追问分析，结果ID: ${resultId.value}`);\n        const response = await axios.get(`/api/bazi/followup/${resultId.value}/${area}`);\n        if (response.data.code === 200) {\n          console.log('获取追问分析成功，响应数据:', response.data);\n          console.log('响应data字段详情:', JSON.stringify(response.data.data));\n\n          // 处理分析结果为null或空的情况\n          if (!response.data.data) {\n            console.warn(`追问分析结果data为空: ${area}`);\n            const defaultMessage = `${followupOptions.value.find(o => o.id === area)?.name || area}分析正在生成中，请稍后刷新页面查看。`;\n            followupAnalysis.value[area] = defaultMessage;\n            return defaultMessage;\n          }\n\n          // 提取分析内容，处理不同的响应格式\n          let analysisContent = null;\n          if (response.data.data.analysis) {\n            // 标准格式：{area, analysis}\n            analysisContent = response.data.data.analysis;\n            console.log(`获取到标准格式分析结果, 类型: ${typeof analysisContent}, 长度: ${analysisContent ? analysisContent.length : 0}`);\n          } else if (typeof response.data.data === 'string') {\n            // 直接字符串格式\n            analysisContent = response.data.data;\n            console.log(`获取到字符串格式分析结果, 长度: ${analysisContent.length}`);\n          } else if (response.data.data[area]) {\n            // 对象格式：{area1: \"分析1\", area2: \"分析2\"}\n            analysisContent = response.data.data[area];\n            console.log(`获取到对象格式分析结果, 长度: ${analysisContent ? analysisContent.length : 0}`);\n          } else {\n            // 尝试遍历所有属性，看是否有匹配的内容\n            console.log('尝试查找匹配内容，data的所有键:', Object.keys(response.data.data));\n            for (const key in response.data.data) {\n              if (key.toLowerCase() === area.toLowerCase() || area === 'fiveYears' && key === 'future' || area === 'future' && key === 'fiveYears') {\n                analysisContent = response.data.data[key];\n                console.log(`找到匹配的键[${key}]，内容长度: ${analysisContent ? analysisContent.length : 0}`);\n                break;\n              }\n            }\n          }\n\n          // 检查分析结果是否为null或空\n          if (!analysisContent) {\n            console.warn(`无法从响应中提取有效分析内容: ${area}`);\n            const defaultMessage = `${followupOptions.value.find(o => o.id === area)?.name || area}分析尚未生成，请稍后刷新页面查看。`;\n            followupAnalysis.value[area] = defaultMessage;\n            return defaultMessage;\n          }\n\n          // 检查分析结果是否是空字符串\n          if (typeof analysisContent === 'string' && analysisContent.trim() === '') {\n            console.warn(`追问分析结果为空字符串: ${area}`);\n            const defaultMessage = `${followupOptions.value.find(o => o.id === area)?.name || area}分析正在生成中，请稍后刷新页面查看。`;\n            followupAnalysis.value[area] = defaultMessage;\n            return defaultMessage;\n          }\n\n          // 记录有效的分析结果\n          console.log(`获取到有效的[${area}]分析结果，长度: ${analysisContent.length}`);\n\n          // 存储并返回分析结果\n          followupAnalysis.value[area] = analysisContent;\n          return analysisContent;\n        } else {\n          console.error('获取追问分析失败:', response.data);\n          const errorMessage = `获取分析失败: ${response.data.message || '未知错误'}`;\n          followupAnalysis.value[area] = errorMessage;\n          return errorMessage;\n        }\n      } catch (error) {\n        console.error('获取追问分析出错:', error);\n        const errorMessage = `获取分析出错: ${error.message || '请稍后重试'}`;\n        followupAnalysis.value[area] = errorMessage;\n        return errorMessage;\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 检查已支付的追问\n    const checkPaidFollowups = async () => {\n      try {\n        const response = await axios.get(`/api/bazi/followup/list/${resultId.value}`);\n        if (response.data.code === 200 && response.data.data.followups) {\n          const paidFollowups = response.data.data.followups;\n\n          // 更新已支付的追问选项\n          followupOptions.value = followupOptions.value.map(option => {\n            const isPaid = paidFollowups.some(f => f.area === option.id);\n            if (isPaid) {\n              // 如果已支付，获取分析结果\n              getFollowupAnalysis(option.id);\n            }\n            return {\n              ...option,\n              paid: isPaid\n            };\n          });\n        }\n      } catch (error) {\n        console.error('检查已支付追问出错:', error);\n      }\n    };\n\n    // 获取八字分析结果\n    const getBaziResult = async () => {\n      loading.value = true;\n      error.value = '';\n\n      // 添加重试机制\n      let retryCount = 0;\n      const maxRetries = 3;\n      let success = false;\n      while (retryCount < maxRetries && !success) {\n        try {\n          console.log(`获取八字分析结果 (尝试 ${retryCount + 1}/${maxRetries})，ID: ${resultId.value}`);\n          const response = await axios.get(`/api/bazi/result/${resultId.value}`);\n          if (response.data.code === 200) {\n            // 将结果数据赋值给响应变量\n            const result = response.data.data;\n\n            // 更新八字图数据\n            if (result.baziChart) {\n              baziChart.value = result.baziChart;\n\n              // 计算年龄\n              if (result.baziChart.birthDate) {\n                const birthYear = parseInt(result.baziChart.birthDate.split('-')[0]);\n                const currentYear = new Date().getFullYear();\n                userAge.value = currentYear - birthYear;\n                console.log('用户年龄:', userAge.value);\n              }\n            }\n\n            // 更新AI分析结果\n            if (result.aiAnalysis) {\n              aiAnalysis.value = result.aiAnalysis;\n            }\n\n            // 更新用户信息\n            if (result.gender) {\n              userGender.value = result.gender === 'male' ? '男' : '女';\n            }\n            if (result.birthTime) {\n              userBirthTime.value = result.birthTime;\n            }\n\n            // 更新分析状态\n            analysisStatus.value = result.analysisStatus || 'completed';\n            analysisProgress.value = result.analysisProgress || 100;\n\n            // 更新订单ID\n            orderId.value = result.orderId || '';\n\n            // 标记为成功\n            success = true;\n            loading.value = false;\n\n            // 检查是否有神煞数据\n            if (result.baziChart && result.baziChart.shenSha) {\n              shenShaData.value = result.baziChart.shenSha;\n            }\n\n            // 检查是否有大运数据\n            if (result.baziChart && result.baziChart.daYun) {\n              daYunData.value = result.baziChart.daYun;\n            }\n\n            // 检查是否有流年数据\n            if (result.baziChart && result.baziChart.flowingYears) {\n              flowingYearsData.value = result.baziChart.flowingYears;\n            }\n            return true;\n          } else {\n            console.error('获取八字分析结果失败:', response.data.message);\n            error.value = response.data.message || '获取分析结果失败';\n            retryCount++;\n            await new Promise(resolve => setTimeout(resolve, 1000)); // 等待1秒后重试\n          }\n        } catch (e) {\n          console.error('获取八字分析结果出错:', e);\n          error.value = e.message || '获取分析结果出错';\n\n          // 如果是404错误，可能是结果记录还未创建，尝试手动更新订单状态\n          if (e.response && e.response.status === 404) {\n            console.log('结果记录不存在，尝试手动更新订单状态');\n\n            // 从resultId中提取orderId\n            let orderId = '';\n            if (resultId.value.startsWith('RES')) {\n              orderId = 'BZ' + resultId.value.substring(3);\n              console.log('从resultId提取的orderId:', orderId);\n              try {\n                // 尝试手动更新订单状态\n                const manualResponse = await axios.get(`/api/order/manual_update/${orderId}`);\n                console.log('手动更新响应:', manualResponse.data);\n                if (manualResponse.data.code === 200) {\n                  console.log('手动更新成功，等待2秒后重试获取结果');\n                  // 等待2秒后重试，给后端时间创建记录\n                  await new Promise(resolve => setTimeout(resolve, 2000));\n                }\n              } catch (manualError) {\n                console.error('手动更新失败:', manualError);\n              }\n            }\n          }\n          retryCount++;\n          await new Promise(resolve => setTimeout(resolve, 1000)); // 等待1秒后重试\n        }\n      }\n      if (!success) {\n        loading.value = false;\n\n        // 如果所有重试都失败，显示手动刷新按钮\n        showManualRefresh.value = true;\n        return false;\n      }\n      return true;\n    };\n\n    // 添加缺失的函数\n    // 初始化追问选项\n    const initFollowupOptions = () => {\n      // 根据用户年龄调整追问选项\n      if (userAge.value !== null) {\n        if (userAge.value < 6) {\n          // 为婴幼儿调整选项\n          followupOptions.value = followupOptions.value.filter(option => ['health', 'personality', 'education', 'parents'].includes(option.id));\n        } else if (userAge.value < 18) {\n          // 为未成年人调整选项\n          followupOptions.value = followupOptions.value.filter(option => !['marriage', 'career'].includes(option.id));\n        }\n      }\n      console.log('初始化追问选项完成:', followupOptions.value);\n    };\n\n    // 加载已支付的追问分析结果\n    const loadFollowupResults = async () => {\n      try {\n        // 检查是否有结果ID\n        if (!resultId.value) {\n          console.warn('缺少结果ID，无法加载追问分析');\n          return;\n        }\n        console.log('开始加载追问分析结果列表:', resultId.value);\n\n        // 调用API获取已支付的追问列表\n        const response = await axios.get(`/api/bazi/followup/list/${resultId.value}`);\n        if (response.data.code === 200 && response.data.data.followups) {\n          const paidFollowups = response.data.data.followups;\n          console.log('获取到的追问列表:', paidFollowups);\n\n          // 更新已支付的追问选项\n          followupOptions.value = followupOptions.value.map(option => {\n            // 检查是否有匹配的追问分析\n            const isPaid = paidFollowups.some(f => {\n              // 尝试多种匹配方式\n              if (typeof f === 'object') {\n                // 对象格式：检查area字段\n                return f.area === option.id;\n              } else if (typeof f === 'string') {\n                // 字符串格式：直接比较\n                return f === option.id;\n              }\n              return false;\n            });\n            if (isPaid) {\n              console.log(`发现已支付的追问: ${option.id}`);\n              // 如果已支付，获取分析结果\n              getFollowupAnalysis(option.id);\n            }\n            return {\n              ...option,\n              paid: isPaid\n            };\n          });\n          console.log('更新后的追问选项:', followupOptions.value);\n        } else {\n          console.warn('获取追问列表失败或返回空列表');\n        }\n      } catch (error) {\n        console.error('加载追问分析结果出错:', error);\n        // 出错时不显示错误提示，静默失败\n      }\n    };\n\n    // 解析八字数据\n    const parseBaZiData = data => {\n      if (!data) return null;\n      return {\n        yearPillar: data.yearPillar || {\n          heavenlyStem: '未知',\n          earthlyBranch: '未知'\n        },\n        monthPillar: data.monthPillar || {\n          heavenlyStem: '未知',\n          earthlyBranch: '未知'\n        },\n        dayPillar: data.dayPillar || {\n          heavenlyStem: '未知',\n          earthlyBranch: '未知'\n        },\n        hourPillar: data.hourPillar || {\n          heavenlyStem: '未知',\n          earthlyBranch: '未知'\n        },\n        shenSha: data.shenSha || {\n          dayChong: '未知',\n          zhiShen: '未知',\n          pengZuGan: '未知',\n          pengZuZhi: '未知',\n          xiShen: '未知',\n          fuShen: '未知',\n          caiShen: '未知',\n          benMing: [],\n          yearGan: [],\n          yearZhi: [],\n          dayGan: [],\n          dayZhi: []\n        },\n        daYun: data.daYun || {\n          startAge: 0,\n          startYear: 0,\n          isForward: true,\n          daYunList: []\n        },\n        flowingYears: data.flowingYears || []\n      };\n    };\n\n    // 添加分析状态检测函数\n    const isAnalysisItemLoading = key => {\n      if (!aiAnalysis.value) return true;\n      const value = aiAnalysis.value[key];\n      return !value || value === '暂无' || value.includes && value.includes('正在分析');\n    };\n\n    // 清理组件时移除定时器\n    onUnmounted(() => {\n      if (analyzeTimer.value) {\n        clearInterval(analyzeTimer.value);\n        analyzeTimer.value = null;\n      }\n    });\n\n    // 刷新特定追问的分析结果\n    const reloadFollowupAnalysis = async area => {\n      if (!area) return;\n      try {\n        isLoadingFollowup.value = true;\n        Toast.loading({\n          message: '正在刷新分析结果...',\n          duration: 0\n        });\n        console.log(`刷新${area}分析结果`);\n        const analysis = await getFollowupAnalysis(area);\n        if (analysis && typeof analysis === 'string' && analysis.length > 0) {\n          Toast.success('刷新成功');\n          console.log(`成功刷新${area}分析结果，长度: ${analysis.length}`);\n        } else {\n          Toast.fail('分析结果尚未生成完成');\n          console.warn(`刷新${area}分析结果失败或为空`);\n        }\n      } catch (error) {\n        console.error(`刷新${area}分析失败:`, error);\n        Toast.fail('刷新失败，请重试');\n      } finally {\n        isLoadingFollowup.value = false;\n        Toast.clear();\n      }\n    };\n\n    // 在data部分添加showManualRefresh变量\n    const showManualRefresh = ref(false);\n\n    // 添加手动刷新函数\n    const manualRefresh = async () => {\n      showManualRefresh.value = false;\n      Toast.loading({\n        message: '正在重新获取分析结果...',\n        duration: 0,\n        forbidClick: true\n      });\n\n      // 从resultId中提取orderId\n      let orderId = '';\n      if (resultId.value.startsWith('RES')) {\n        orderId = 'BZ' + resultId.value.substring(3);\n        console.log('从resultId提取的orderId:', orderId);\n        try {\n          // 尝试手动更新订单状态\n          const manualResponse = await axios.get(`/api/order/manual_update/${orderId}`);\n          console.log('手动更新响应:', manualResponse.data);\n          if (manualResponse.data.code === 200) {\n            console.log('手动更新成功，等待2秒后重试获取结果');\n            // 等待2秒后重试，给后端时间创建记录\n            await new Promise(resolve => setTimeout(resolve, 2000));\n\n            // 重新获取结果\n            const success = await getBaziResult();\n            if (success) {\n              Toast.success('分析结果加载成功');\n            } else {\n              Toast.fail('获取分析结果失败，请稍后再试');\n            }\n          } else {\n            Toast.fail('手动更新失败: ' + (manualResponse.data.message || '未知错误'));\n          }\n        } catch (error) {\n          console.error('手动更新失败:', error);\n          Toast.fail('手动更新失败，请稍后再试');\n        }\n      } else {\n        // 直接重试获取结果\n        const success = await getBaziResult();\n        if (success) {\n          Toast.success('分析结果加载成功');\n        } else {\n          Toast.fail('获取分析结果失败，请稍后再试');\n        }\n      }\n      Toast.clear();\n    };\n\n    // 在data部分添加error变量\n    const error = ref('');\n\n    // 添加所有需要的变量定义\n    const baziChart = ref({});\n    const analysisStatus = ref('completed');\n    const analysisProgress = ref(100);\n    const orderId = ref('');\n    const userGender = ref('');\n    const userBirthTime = ref('');\n    const shenShaData = ref({});\n    const daYunData = ref({});\n    const flowingYearsData = ref([]);\n    const __returned__ = {\n      md,\n      route,\n      router,\n      resultId,\n      activeTab,\n      loading,\n      isAnalyzing,\n      analyzeProgress,\n      analyzeTimer,\n      renderMarkdown,\n      userAge,\n      getAnalysisContent,\n      focusAreas,\n      analysisResult,\n      baziData,\n      aiAnalysis,\n      testApiConnection,\n      getElementName,\n      onClickLeft,\n      downloadPDFAsStream,\n      downloadPDF,\n      generatePDFLocally,\n      shareResult,\n      handleLocalPDFGeneration,\n      checkAnalysisStatus,\n      pollAnalysisStatus,\n      reloadBaziData,\n      followupOptions,\n      currentFollowup,\n      showFollowupDialog,\n      followupAnalysis,\n      isLoadingFollowup,\n      selectFollowupOption,\n      payForFollowup,\n      pollFollowupStatus,\n      getFollowupAnalysis,\n      checkPaidFollowups,\n      getBaziResult,\n      initFollowupOptions,\n      loadFollowupResults,\n      parseBaZiData,\n      isAnalysisItemLoading,\n      reloadFollowupAnalysis,\n      showManualRefresh,\n      manualRefresh,\n      error,\n      baziChart,\n      analysisStatus,\n      analysisProgress,\n      orderId,\n      userGender,\n      userBirthTime,\n      shenShaData,\n      daYunData,\n      flowingYearsData,\n      ref,\n      onMounted,\n      reactive,\n      computed,\n      watch,\n      onUnmounted,\n      get useRoute() {\n        return useRoute;\n      },\n      get useRouter() {\n        return useRouter;\n      },\n      get Toast() {\n        return Toast;\n      },\n      get Dialog() {\n        return Dialog;\n      },\n      get jsPDF() {\n        return jsPDF;\n      },\n      get html2canvas() {\n        return html2canvas;\n      },\n      get axios() {\n        return axios;\n      },\n      get MarkdownIt() {\n        return MarkdownIt;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","reactive","computed","watch","onUnmounted","useRoute","useRouter","Toast","Dialog","jsPDF","html2canvas","axios","MarkdownIt","md","html","breaks","linkify","typographer","route","router","resultId","params","id","query","activeTab","loading","isAnalyzing","analyzeProgress","analyzeTimer","renderMarkdown","content","includes","processedContent","replace","match","hashes","text","level","Math","min","length","hasNumberList","test","listTag","paragraphs","split","map","p","trim","startsWith","join","render","e","console","error","userAge","age","isNaN","parseInt","value","localStorage","getItem","log","getAnalysisContent","sectionName","aiAnalysis","personality","education","health","healthText","sectionMatch","RegExp","overall","futureMatch","focusAreas","analysisResult","baziData","yearPillar","heavenlyStem","earthlyBranch","naYin","shiShen","wangShuai","monthPillar","dayPillar","hourPillar","fiveElements","flowingYears","shenSha","dayChong","zhiShen","xiShen","fuShen","caiShen","benMing","yearGan","yearZhi","dayGan","dayZhi","daYun","startAge","startYear","isForward","daYunList","birthDate","birthTime","gender","career","relationship","children","social","future","parents","coreAnalysis","shenShaAnalysis","keyPoints","testApiConnection","response","get","data","success","fail","isApiConnected","warn","localResultId","urlResultId","setItem","message","duration","forbidClick","getBaziResult","stillAnalyzing","Object","values","some","analysisStatus","pollAnalysisStatus","analysisProgress","clear","getElementName","element","elementNames","onClickLeft","push","downloadPDFAsStream","position","timestamp","Date","getTime","downloadUrl","fetch","method","cache","headers","ok","errorMsg","status","contentType","errorData","json","errorText","substring","Error","disposition","filename","filenameMatch","fileExtension","endsWith","blob","size","isDownloadStarted","fileReader","FileReader","headerPromise","Promise","resolve","reject","onloadend","target","result","onerror","readAsArrayBuffer","slice","header","headerView","Uint8Array","headerString","String","fromCharCode","apply","url","window","URL","createObjectURL","iframe","document","createElement","style","display","body","appendChild","a","href","download","rel","contentWindow","click","setTimeout","revokeObjectURL","removeChild","pdfWindow","open","alert","title","confirmButtonText","then","openError","downloadPDF","loadFollowupResults","attempts","generatePDFLocally","querySelector","sections","querySelectorAll","originalContents","forEach","section","index","contentElement","classList","contains","innerHTML","textContent","add","canvas","scale","useCORS","logging","windowWidth","documentElement","offsetWidth","windowHeight","offsetHeight","pdf","imgData","toDataURL","imgWidth","pageHeight","imgHeight","height","width","heightLeft","addImage","addPage","pageCount","internal","getNumberOfPages","i","setPage","setFontSize","setTextColor","pageSize","getWidth","getHeight","align","item","remove","save","shareResult","handleLocalPDFGeneration","needsRendering","contentElements","original","find","checkAnalysisStatus","code","aiAnalysisData","totalItems","completedItems","entries","key","floor","maxAttempts","progress","setInterval","random","allGenerated","checkInterval","isComplete","clearInterval","reloadBaziData","baziChart","paidOptions","followupOptions","filter","option","paid","o","getFollowupAnalysis","name","selected","currentFollowup","showFollowupDialog","followupAnalysis","isLoadingFollowup","selectFollowupOption","analysis","payForFollowup","urlParams","URLSearchParams","location","search","orderResponse","post","area","followupOrderId","orderId","paymentResponse","paymentMethod","deviceType","returnQrCode","paymentData","qrCodeImage","qr_image","confirm","messageAlign","cancelButtonText","showCancelButton","checkCount","maxChecks","isPaid","statusResponse","orderStatus","findIndex","pollFollowupStatus","catch","info","startTime","timeoutMs","currentTime","finalResult","sectionMap","targetTitle","scrollIntoView","behavior","block","parentElement","JSON","stringify","defaultMessage","analysisContent","keys","toLowerCase","errorMessage","checkPaidFollowups","followups","paidFollowups","f","retryCount","maxRetries","birthYear","currentYear","getFullYear","userGender","userBirthTime","shenShaData","daYunData","flowingYearsData","manualResponse","manualError","showManualRefresh","initFollowupOptions","parseBaZiData","pengZuGan","pengZuZhi","isAnalysisItemLoading","reloadFollowupAnalysis","manualRefresh"],"sources":["D:/Python/20250603开发八字命理AI指导功能页码/开发八字命理AI指导功能页码/frontend/src/Result.vue"],"sourcesContent":["<template>\r\n  <div class=\"result-container\">\r\n    <van-nav-bar\r\n      title=\"八字分析结果\"\r\n      left-text=\"返回\"\r\n      left-arrow\r\n      @click-left=\"onClickLeft\"\r\n    />\r\n    \r\n    <div class=\"result-header\">\r\n      <h2>您的八字命盘分析</h2>\r\n      <p>基于您的出生信息，AI为您提供的个性化人生指导</p>\r\n    </div>\r\n    \r\n    <!-- 添加全局分析状态提示 -->\r\n    <van-notice-bar\r\n      v-if=\"analysisStatus === 'pending'\"\r\n      color=\"#1989fa\"\r\n      background=\"#ecf9ff\"\r\n      left-icon=\"info-o\"\r\n      :scrollable=\"false\"\r\n      class=\"analysis-progress-notice\"\r\n    >\r\n      <div class=\"analysis-progress\">\r\n        <p>AI正在生成八字分析结果，这可能需要30-60秒</p>\r\n        <van-progress :percentage=\"analysisProgress\" :show-pivot=\"false\" color=\"#1989fa\" />\r\n      </div>\r\n    </van-notice-bar>\r\n    \r\n    <!-- 添加手动刷新按钮 -->\r\n    <div v-if=\"showManualRefresh\" class=\"manual-refresh-container\">\r\n      <van-empty description=\"获取分析结果失败\" />\r\n      <van-button type=\"primary\" size=\"normal\" @click=\"manualRefresh\">手动刷新</van-button>\r\n      <p class=\"refresh-tip\">如果多次刷新仍然失败，请联系客服</p>\r\n    </div>\r\n    \r\n    <van-tabs v-model=\"activeTab\" sticky v-if=\"!showManualRefresh\">\r\n      <van-tab title=\"命盘信息\">\r\n        <div class=\"bazi-chart\">\r\n          <h3>八字命盘</h3>\r\n          <div v-if=\"baziChart && baziChart.yearPillar && baziChart.monthPillar && baziChart.dayPillar && baziChart.hourPillar\" class=\"four-pillars\">\r\n            <!-- 年柱 -->\r\n            <div class=\"pillar\">\r\n              <div class=\"stem\">{{ baziChart.yearPillar.heavenlyStem }}</div>\r\n              <div class=\"branch\">{{ baziChart.yearPillar.earthlyBranch }}</div>\r\n              <div class=\"label\">年柱</div>\r\n              <div class=\"nayin\">{{ baziChart.yearPillar.naYin }}</div>\r\n              <div class=\"shishen\">{{ baziChart.yearPillar.shiShen }}</div>\r\n              <div class=\"wangshuai\">{{ baziChart.yearPillar.wangShuai }}</div>\r\n            </div>\r\n            \r\n            <!-- 月柱 -->\r\n            <div class=\"pillar\">\r\n              <div class=\"stem\">{{ baziChart.monthPillar.heavenlyStem }}</div>\r\n              <div class=\"branch\">{{ baziChart.monthPillar.earthlyBranch }}</div>\r\n              <div class=\"label\">月柱</div>\r\n              <div class=\"nayin\">{{ baziChart.monthPillar.naYin }}</div>\r\n              <div class=\"shishen\">{{ baziChart.monthPillar.shiShen }}</div>\r\n              <div class=\"wangshuai\">{{ baziChart.monthPillar.wangShuai }}</div>\r\n            </div>\r\n            \r\n            <!-- 日柱 -->\r\n            <div class=\"pillar\">\r\n              <div class=\"stem\">{{ baziChart.dayPillar.heavenlyStem }}</div>\r\n              <div class=\"branch\">{{ baziChart.dayPillar.earthlyBranch }}</div>\r\n              <div class=\"label\">日柱</div>\r\n              <div class=\"nayin\">{{ baziChart.dayPillar.naYin }}</div>\r\n              <div class=\"shishen\">{{ baziChart.dayPillar.shiShen }}</div>\r\n              <div class=\"wangshuai\">{{ baziChart.dayPillar.wangShuai }}</div>\r\n            </div>\r\n            \r\n            <!-- 时柱 -->\r\n            <div class=\"pillar\">\r\n              <div class=\"stem\">{{ baziChart.hourPillar.heavenlyStem }}</div>\r\n              <div class=\"branch\">{{ baziChart.hourPillar.earthlyBranch }}</div>\r\n              <div class=\"label\">时柱</div>\r\n              <div class=\"nayin\">{{ baziChart.hourPillar.naYin }}</div>\r\n              <div class=\"shishen\">{{ baziChart.hourPillar.shiShen }}</div>\r\n              <div class=\"wangshuai\">{{ baziChart.hourPillar.wangShuai }}</div>\r\n            </div>\r\n          </div>\r\n          <div v-else class=\"error-message\">\r\n            <van-empty description=\"八字数据加载失败，请重试\" />\r\n            <van-button type=\"primary\" size=\"small\" @click=\"reloadBaziData\">重新加载</van-button>\r\n          </div>\r\n          \r\n          <h3>五行分布</h3>\r\n          <div class=\"five-elements\" v-if=\"baziChart && baziChart.fiveElements\">\r\n            <div class=\"element\" v-for=\"(value, element) in baziChart.fiveElements\" :key=\"element\">\r\n              <div class=\"element-name\">{{ getElementName(element) }}</div>\r\n              <div class=\"element-value\">{{ value }}</div>\r\n            </div>\r\n          </div>\r\n          <div class=\"five-elements\" v-else>\r\n            <div class=\"element\" v-for=\"element in ['wood', 'fire', 'earth', 'metal', 'water']\" :key=\"element\">\r\n              <div class=\"element-name\">{{ getElementName(element) }}</div>\r\n              <div class=\"element-value\">--</div>\r\n            </div>\r\n          </div>\r\n          \r\n          <!-- 添加神煞显示 -->\r\n          <h3>神煞信息</h3>\r\n          <div class=\"shen-sha-info\" v-if=\"baziChart && baziChart.shenSha\">\r\n            <div class=\"shen-sha-content\">\r\n              <div class=\"shen-sha-item\">\r\n                <span class=\"label\">日冲</span>\r\n                <span class=\"value\">{{ baziChart.shenSha.dayChong }}</span>\r\n              </div>\r\n              <div class=\"shen-sha-item\">\r\n                <span class=\"label\">值神</span>\r\n                <span class=\"value\">{{ baziChart.shenSha.zhiShen }}</span>\r\n              </div>\r\n              <div class=\"shen-sha-item\">\r\n                <span class=\"label\">喜神</span>\r\n                <span class=\"value\">{{ baziChart.shenSha.xiShen }}</span>\r\n              </div>\r\n              <div class=\"shen-sha-item\">\r\n                <span class=\"label\">福神</span>\r\n                <span class=\"value\">{{ baziChart.shenSha.fuShen }}</span>\r\n              </div>\r\n              <div class=\"shen-sha-item\">\r\n                <span class=\"label\">财神</span>\r\n                <span class=\"value\">{{ baziChart.shenSha.caiShen }}</span>\r\n              </div>\r\n            </div>\r\n            \r\n            <!-- 本命神煞 -->\r\n            <div class=\"ben-ming-sha\" v-if=\"baziChart.shenSha.benMing.length > 0\">\r\n              <h4>本命神煞</h4>\r\n              <div class=\"ben-ming-list\">\r\n                <span v-for=\"(sha, index) in baziChart.shenSha.benMing\" :key=\"index\" class=\"ben-ming-item\">\r\n                  {{ sha }}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"shen-sha-info\" v-else>\r\n            <van-cell-group inset>\r\n              <van-cell title=\"神煞信息\" value=\"暂无数据\" />\r\n            </van-cell-group>\r\n          </div>\r\n          \r\n          <!-- 添加大运显示 -->\r\n          <h3>大运信息</h3>\r\n          <div class=\"da-yun-info\" v-if=\"baziChart && baziChart.daYun\">\r\n            <div class=\"qi-yun-info\">\r\n              <p>起运年龄: {{ baziChart.daYun.startAge }}岁</p>\r\n              <p>起运年份: {{ baziChart.daYun.startYear }}年</p>\r\n              <p>大运顺序: {{ baziChart.daYun.isForward ? '顺行' : '逆行' }}</p>\r\n            </div>\r\n            \r\n            <!-- 大运列表 -->\r\n            <div class=\"da-yun-table\">\r\n              <table class=\"custom-table\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>年龄</th>\r\n                    <th>年份</th>\r\n                    <th>天干</th>\r\n                    <th>地支</th>\r\n                    <th>纳音</th>\r\n                    <th>吉凶</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr v-for=\"(yun, index) in baziChart.daYun.daYunList\" :key=\"index\">\r\n                    <td>{{ yun.startAge }}-{{ yun.endAge }}</td>\r\n                    <td>{{ yun.startYear }}-{{ yun.endYear }}</td>\r\n                    <td>{{ yun.heavenlyStem }}</td>\r\n                    <td>{{ yun.earthlyBranch }}</td>\r\n                    <td>{{ yun.naYin }}</td>\r\n                    <td>{{ yun.jiXiong }}</td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n          <div class=\"da-yun-info\" v-else>\r\n            <van-cell-group inset>\r\n              <van-cell title=\"大运信息\" value=\"暂无数据\" />\r\n            </van-cell-group>\r\n          </div>\r\n          \r\n          <h3>流年信息</h3>\r\n          <div class=\"liu-nian-info\" v-if=\"baziChart && baziChart.flowingYears && baziChart.flowingYears.length\">\r\n            <table class=\"custom-table\">\r\n              <thead>\r\n                <tr>\r\n                  <th>年份</th>\r\n                  <th>年龄</th>\r\n                  <th>天干</th>\r\n                  <th>地支</th>\r\n                  <th>五行</th>\r\n                  <th>神煞</th>\r\n                  <th>吉凶</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr v-for=\"(year, index) in baziChart.flowingYears\" :key=\"index\">\r\n                  <td>{{ year.year }}</td>\r\n                  <td>{{ year.age }}</td>\r\n                  <td>{{ year.heavenlyStem }}</td>\r\n                  <td>{{ year.earthlyBranch }}</td>\r\n                  <td>{{ getElementName(year.ganElement) }}/{{ getElementName(year.zhiElement) }}</td>\r\n                  <td>{{ year.shenSha && Array.isArray(year.shenSha) ? year.shenSha.join(', ') : '无' }}</td>\r\n                  <td>{{ year.jiXiong || '未知' }}</td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          <div class=\"liu-nian-info\" v-else>\r\n            <van-empty description=\"流年数据暂无\" />\r\n          </div>\r\n        </div>\r\n      </van-tab>\r\n      \r\n      <van-tab title=\"AI分析结果\">\r\n        <div class=\"ai-analysis\">\r\n          <div v-if=\"userAge !== null && userAge < 0\" class=\"age-notice\">\r\n            <van-notice-bar\r\n              color=\"#1989fa\"\r\n              background=\"#ecf9ff\"\r\n              left-icon=\"info-o\"\r\n            >\r\n              此分析针对未来出生的宝宝，重点关注性格特点、天赋才能和健康发展趋势。\r\n            </van-notice-bar>\r\n          </div>\r\n          <div v-else-if=\"userAge !== null && userAge < 6\" class=\"age-notice\">\r\n            <van-notice-bar\r\n              color=\"#1989fa\"\r\n              background=\"#ecf9ff\"\r\n              left-icon=\"info-o\"\r\n            >\r\n              此分析针对婴幼儿({{userAge}}岁)，重点关注性格特点、天赋才能和健康发展趋势。\r\n            </van-notice-bar>\r\n          </div>\r\n          <div v-else-if=\"userAge !== null && userAge < 18\" class=\"age-notice\">\r\n            <van-notice-bar\r\n              color=\"#1989fa\"\r\n              background=\"#ecf9ff\"\r\n              left-icon=\"info-o\"\r\n            >\r\n              此分析针对未成年人({{userAge}}岁)，重点关注性格特点、学业发展和健康状况。\r\n            </van-notice-bar>\r\n          </div>\r\n          \r\n          <!-- 添加全局分析状态提示 -->\r\n          <van-notice-bar\r\n            v-if=\"analysisStatus === 'pending'\"\r\n            color=\"#1989fa\"\r\n            background=\"#ecf9ff\"\r\n            left-icon=\"info-o\"\r\n            :scrollable=\"false\"\r\n            class=\"analysis-progress-notice\"\r\n          >\r\n            <div class=\"analysis-progress\">\r\n              <p>AI正在生成八字分析结果，这可能需要30-60秒</p>\r\n              <van-progress :percentage=\"analysisProgress\" :show-pivot=\"false\" color=\"#1989fa\" />\r\n            </div>\r\n          </van-notice-bar>\r\n          \r\n          <!-- 核心分析 -->\r\n          <div class=\"analysis-section\">\r\n            <h3>八字命局核心分析</h3>\r\n            <template v-if=\"!aiAnalysis.coreAnalysis || aiAnalysis.coreAnalysis === '暂无' || aiAnalysis.coreAnalysis === '分析生成中...'\">\r\n              <div class=\"loading-content\">\r\n                <van-loading size=\"24px\" vertical>分析生成中...</van-loading>\r\n              </div>\r\n            </template>\r\n            <div v-else v-html=\"renderMarkdown(aiAnalysis.coreAnalysis)\" class=\"markdown-content\"></div>\r\n          </div>\r\n          \r\n          <!-- 五行旺衰与用神 -->\r\n          <div class=\"analysis-section\">\r\n            <h3>五行旺衰与用神</h3>\r\n            <template v-if=\"!aiAnalysis.fiveElements || aiAnalysis.fiveElements === '暂无' || aiAnalysis.fiveElements === '分析生成中...'\">\r\n              <div class=\"loading-content\">\r\n                <van-loading size=\"24px\" vertical>分析生成中...</van-loading>\r\n              </div>\r\n            </template>\r\n            <div v-else v-html=\"renderMarkdown(aiAnalysis.fiveElements)\" class=\"markdown-content\"></div>\r\n          </div>\r\n          \r\n          <!-- 神煞解析 -->\r\n          <div class=\"analysis-section\">\r\n            <h3>神煞解析</h3>\r\n            <template v-if=\"!aiAnalysis.shenShaAnalysis || aiAnalysis.shenShaAnalysis === '暂无' || aiAnalysis.shenShaAnalysis === '分析生成中...'\">\r\n              <div class=\"loading-content\">\r\n                <van-loading size=\"24px\" vertical>分析生成中...</van-loading>\r\n              </div>\r\n            </template>\r\n            <div v-else v-html=\"renderMarkdown(aiAnalysis.shenShaAnalysis)\" class=\"markdown-content\"></div>\r\n          </div>\r\n          \r\n          <!-- 大运与流年关键节点 -->\r\n          <div class=\"analysis-section\">\r\n            <h3>大运与流年关键节点</h3>\r\n            <template v-if=\"!aiAnalysis.keyPoints || aiAnalysis.keyPoints === '暂无' || aiAnalysis.keyPoints === '分析生成中...'\">\r\n              <div class=\"loading-content\">\r\n                <van-loading size=\"24px\" vertical>分析生成中...</van-loading>\r\n              </div>\r\n            </template>\r\n            <div v-else v-html=\"renderMarkdown(aiAnalysis.keyPoints)\" class=\"markdown-content\"></div>\r\n          </div>\r\n          \r\n          <!-- 婚姻感情 -->\r\n          <div class=\"analysis-section\">\r\n            <h3>{{ userAge !== null && userAge >= 18 ? '婚姻感情' : '未来感情发展' }}</h3>\r\n            <template v-if=\"!aiAnalysis.relationship || aiAnalysis.relationship === '暂无' || aiAnalysis.relationship === '分析生成中...'\">\r\n              <div class=\"loading-content\">\r\n                <van-loading size=\"24px\" vertical>分析生成中...</van-loading>\r\n              </div>\r\n            </template>\r\n            <div v-else>\r\n              <!-- 如果有追问分析结果，优先显示追问分析 -->\r\n              <div v-if=\"followupAnalysis.relationship || followupAnalysis.marriage\" class=\"enhanced-analysis\">\r\n                <div v-html=\"renderMarkdown(followupAnalysis.relationship || followupAnalysis.marriage)\" class=\"markdown-content\"></div>\r\n                <div class=\"analysis-source\">\r\n                  <van-tag type=\"primary\" size=\"medium\">深度分析</van-tag>\r\n                </div>\r\n              </div>\r\n              <div v-else v-html=\"renderMarkdown(aiAnalysis.relationship)\" class=\"markdown-content\"></div>\r\n            </div>\r\n          </div>\r\n          \r\n          <!-- 事业财运 -->\r\n          <div class=\"analysis-section\">\r\n            <h3>{{ userAge !== null && userAge >= 18 ? '事业财运' : '未来事业财运' }}</h3>\r\n            <template v-if=\"!aiAnalysis.career || aiAnalysis.career === '暂无' || aiAnalysis.career === '分析生成中...'\">\r\n              <div class=\"loading-content\">\r\n                <van-loading size=\"24px\" vertical>分析生成中...</van-loading>\r\n              </div>\r\n            </template>\r\n            <div v-else>\r\n              <!-- 如果有追问分析结果，优先显示追问分析 -->\r\n              <div v-if=\"followupAnalysis.career || followupAnalysis.work || followupAnalysis.money || followupAnalysis.wealth\" class=\"enhanced-analysis\">\r\n                <div v-html=\"renderMarkdown(followupAnalysis.career || followupAnalysis.work || followupAnalysis.money || followupAnalysis.wealth)\" class=\"markdown-content\"></div>\r\n                <div class=\"analysis-source\">\r\n                  <van-tag type=\"primary\" size=\"medium\">深度分析</van-tag>\r\n                </div>\r\n              </div>\r\n              <div v-else v-html=\"renderMarkdown(aiAnalysis.career)\" class=\"markdown-content\"></div>\r\n            </div>\r\n          </div>\r\n          \r\n          <!-- 子女情况 -->\r\n          <div class=\"analysis-section\">\r\n            <h3>{{ userAge !== null && userAge >= 18 ? '子女情况' : '未来子女缘分' }}</h3>\r\n            <template v-if=\"!aiAnalysis.children || aiAnalysis.children === '暂无' || aiAnalysis.children === '分析生成中...'\">\r\n              <div class=\"loading-content\">\r\n                <van-loading size=\"24px\" vertical>分析生成中...</van-loading>\r\n              </div>\r\n            </template>\r\n            <div v-else>\r\n              <!-- 如果有追问分析结果，优先显示追问分析 -->\r\n              <div v-if=\"followupAnalysis.children || followupAnalysis.family\" class=\"enhanced-analysis\">\r\n                <div v-html=\"renderMarkdown(followupAnalysis.children || followupAnalysis.family)\" class=\"markdown-content\"></div>\r\n                <div class=\"analysis-source\">\r\n                  <van-tag type=\"primary\" size=\"medium\">深度分析</van-tag>\r\n                </div>\r\n              </div>\r\n              <div v-else v-html=\"renderMarkdown(aiAnalysis.children)\" class=\"markdown-content\"></div>\r\n            </div>\r\n          </div>\r\n          \r\n          <!-- 父母情况 -->\r\n          <div class=\"analysis-section\">\r\n            <h3>父母情况</h3>\r\n            <template v-if=\"!aiAnalysis.parents || aiAnalysis.parents === '暂无' || aiAnalysis.parents === '分析生成中...'\">\r\n              <div class=\"loading-content\">\r\n                <van-loading size=\"24px\" vertical>分析生成中...</van-loading>\r\n              </div>\r\n            </template>\r\n            <div v-else>\r\n              <!-- 如果有追问分析结果，优先显示追问分析 -->\r\n              <div v-if=\"followupAnalysis.parents\" class=\"enhanced-analysis\">\r\n                <div v-html=\"renderMarkdown(followupAnalysis.parents)\" class=\"markdown-content\"></div>\r\n                <div class=\"analysis-source\">\r\n                  <van-tag type=\"primary\" size=\"medium\">深度分析</van-tag>\r\n                </div>\r\n              </div>\r\n              <div v-else v-html=\"renderMarkdown(aiAnalysis.parents)\" class=\"markdown-content\"></div>\r\n            </div>\r\n          </div>\r\n          \r\n          <!-- 身体健康 -->\r\n          <div class=\"analysis-section\">\r\n            <h3>身体健康</h3>\r\n            <template v-if=\"!aiAnalysis.health || aiAnalysis.health === '暂无' || aiAnalysis.health === '分析生成中...'\">\r\n              <div class=\"loading-content\">\r\n                <van-loading size=\"24px\" vertical>分析生成中...</van-loading>\r\n              </div>\r\n            </template>\r\n            <div v-else>\r\n              <!-- 如果有追问分析结果，优先显示追问分析 -->\r\n              <div v-if=\"followupAnalysis.health\" class=\"enhanced-analysis\">\r\n                <div v-html=\"renderMarkdown(followupAnalysis.health)\" class=\"markdown-content\"></div>\r\n                <div class=\"analysis-source\">\r\n                  <van-tag type=\"primary\" size=\"medium\">深度分析</van-tag>\r\n                </div>\r\n              </div>\r\n              <div v-else v-html=\"renderMarkdown(aiAnalysis.health)\" class=\"markdown-content\"></div>\r\n            </div>\r\n          </div>\r\n          \r\n          <!-- 学业 -->\r\n          <div class=\"analysis-section\">\r\n            <h3>学业</h3>\r\n            <template v-if=\"!aiAnalysis.education || aiAnalysis.education === '暂无' || aiAnalysis.education === '分析生成中...'\">\r\n              <div class=\"loading-content\">\r\n                <van-loading size=\"24px\" vertical>分析生成中...</van-loading>\r\n              </div>\r\n            </template>\r\n            <div v-else>\r\n              <!-- 如果有追问分析结果，优先显示追问分析 -->\r\n              <div v-if=\"followupAnalysis.education || followupAnalysis.study\" class=\"enhanced-analysis\">\r\n                <div v-html=\"renderMarkdown(followupAnalysis.education || followupAnalysis.study)\" class=\"markdown-content\"></div>\r\n                <div class=\"analysis-source\">\r\n                  <van-tag type=\"primary\" size=\"medium\">深度分析</van-tag>\r\n                </div>\r\n              </div>\r\n              <div v-else v-html=\"renderMarkdown(aiAnalysis.education)\" class=\"markdown-content\"></div>\r\n            </div>\r\n          </div>\r\n          \r\n          <!-- 人际关系 -->\r\n          <div class=\"analysis-section\">\r\n            <h3>人际关系</h3>\r\n            <template v-if=\"!aiAnalysis.social || aiAnalysis.social === '暂无' || aiAnalysis.social === '分析生成中...'\">\r\n              <div class=\"loading-content\">\r\n                <van-loading size=\"24px\" vertical>分析生成中...</van-loading>\r\n              </div>\r\n            </template>\r\n            <div v-else>\r\n              <!-- 如果有追问分析结果，优先显示追问分析 -->\r\n              <div v-if=\"followupAnalysis.social || followupAnalysis.relationship || followupAnalysis.friends\" class=\"enhanced-analysis\">\r\n                <div v-html=\"renderMarkdown(followupAnalysis.social || followupAnalysis.relationship || followupAnalysis.friends)\" class=\"markdown-content\"></div>\r\n                <div class=\"analysis-source\">\r\n                  <van-tag type=\"primary\" size=\"medium\">深度分析</van-tag>\r\n                </div>\r\n              </div>\r\n              <div v-else v-html=\"renderMarkdown(aiAnalysis.social)\" class=\"markdown-content\"></div>\r\n            </div>\r\n          </div>\r\n          \r\n          <!-- 近五年运势 -->\r\n          <div class=\"analysis-section\">\r\n            <h3>近五年运势</h3>\r\n            <template v-if=\"!aiAnalysis.future || aiAnalysis.future === '暂无' || aiAnalysis.future === '分析生成中...'\">\r\n              <div class=\"loading-content\">\r\n                <van-loading size=\"24px\" vertical>分析生成中...</van-loading>\r\n              </div>\r\n            </template>\r\n            <div v-else>\r\n              <!-- 如果有追问分析结果，优先显示追问分析 -->\r\n              <div v-if=\"followupAnalysis.future || followupAnalysis.fiveYears\" class=\"enhanced-analysis\">\r\n                <div v-html=\"renderMarkdown(followupAnalysis.future || followupAnalysis.fiveYears)\" class=\"markdown-content\"></div>\r\n                <div class=\"analysis-source\">\r\n                  <van-tag type=\"primary\" size=\"medium\">深度分析</van-tag>\r\n                </div>\r\n              </div>\r\n              <div v-else v-html=\"renderMarkdown(aiAnalysis.future)\" class=\"markdown-content\"></div>\r\n            </div>\r\n          </div>\r\n          \r\n          <!-- 人生规划建议 -->\r\n          <div class=\"analysis-section\">\r\n            <h3>人生规划建议</h3>\r\n            <template v-if=\"!aiAnalysis.lifePlan || aiAnalysis.lifePlan === '暂无' || aiAnalysis.lifePlan === '分析生成中...'\">\r\n              <div class=\"loading-content\">\r\n                <van-loading size=\"24px\" vertical>分析生成中...</van-loading>\r\n              </div>\r\n            </template>\r\n            <div v-else>\r\n              <!-- 如果有追问分析结果，优先显示追问分析 -->\r\n              <div v-if=\"followupAnalysis.lifePlan\" class=\"enhanced-analysis\">\r\n                <div v-html=\"renderMarkdown(followupAnalysis.lifePlan)\" class=\"markdown-content\"></div>\r\n                <div class=\"analysis-source\">\r\n                  <van-tag type=\"primary\" size=\"medium\">深度分析</van-tag>\r\n                </div>\r\n              </div>\r\n              <div v-else v-html=\"renderMarkdown(aiAnalysis.lifePlan)\" class=\"markdown-content\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </van-tab>\r\n    </van-tabs>\r\n    \r\n    <div class=\"action-buttons\">\r\n      <van-button type=\"primary\" block @click=\"downloadPDF\">\r\n        下载PDF报告\r\n      </van-button>\r\n      <van-button plain type=\"primary\" block style=\"margin-top: 10px;\" @click=\"shareResult\">\r\n        分享结果\r\n      </van-button>\r\n      \r\n      <!-- 本地生成PDF按钮 -->\r\n      <van-button plain type=\"info\" \r\n                  block \r\n                  style=\"margin-top: 10px;\" \r\n                  @click=\"handleLocalPDFGeneration\">\r\n        本地生成PDF\r\n      </van-button>\r\n      \r\n      <!-- 调试按钮 -->\r\n      <van-button plain type=\"warning\" \r\n                  block \r\n                  style=\"margin-top: 10px;\" \r\n                  @click=\"reloadBaziData\">\r\n        重新加载分析数据\r\n      </van-button>\r\n    </div>\r\n    \r\n    <!-- 添加追问部分 -->\r\n    <div class=\"followup-section\" v-if=\"baziChart && !loading\">\r\n      <h2 class=\"section-title\">深度分析</h2>\r\n      <p class=\"section-desc\">选择您感兴趣的领域，进行深度分析</p>\r\n      \r\n      <div class=\"followup-options\">\r\n        <div \r\n          v-for=\"option in followupOptions\" \r\n          :key=\"option.id\" \r\n          class=\"followup-option\" \r\n          :class=\"{ 'paid': option.paid }\"\r\n          @click=\"selectFollowupOption(option)\"\r\n        >\r\n          <div class=\"option-content\">\r\n            <span class=\"option-name\">{{ option.name }}</span>\r\n            <span class=\"option-status\" v-if=\"option.paid\">已解锁</span>\r\n            <span class=\"option-status\" v-else>￥9.9</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- 已支付的追问分析结果展示 -->\r\n      <div v-if=\"currentFollowup && currentFollowup.paid\" class=\"followup-result\">\r\n        <h3>{{ currentFollowup.name }}分析</h3>\r\n        <div v-if=\"isLoadingFollowup\" class=\"loading-content\">\r\n          <van-loading size=\"24px\" vertical>分析加载中...</van-loading>\r\n        </div>\r\n        <div v-else-if=\"!followupAnalysis[currentFollowup.id]\" class=\"loading-content\">\r\n          <van-empty description=\"分析结果尚未生成，请稍后刷新页面\" />\r\n          <van-button type=\"primary\" size=\"small\" @click=\"reloadFollowupAnalysis(currentFollowup.id)\">\r\n            刷新分析\r\n          </van-button>\r\n        </div>\r\n        <div v-else class=\"analysis-content\" v-html=\"renderMarkdown(followupAnalysis[currentFollowup.id])\"></div>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- 追问支付对话框 -->\r\n    <van-dialog\r\n      v-model:show=\"showFollowupDialog\"\r\n      title=\"深度分析\"\r\n      confirm-button-text=\"支付 ￥9.9\"\r\n      @confirm=\"payForFollowup\"\r\n      :before-close=\"() => !isLoadingFollowup\"\r\n    >\r\n      <div class=\"followup-dialog-content\">\r\n        <p>您选择了「{{ currentFollowup?.name }}」深度分析</p>\r\n        <p>支付后，AI将根据您的八字和流年运势，为您提供专业的命理分析</p>\r\n      </div>\r\n    </van-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, reactive, computed, watch, onUnmounted } from 'vue';\r\nimport { useRoute, useRouter } from 'vue-router';\r\nimport { Toast, Dialog } from 'vant';\r\nimport { jsPDF } from 'jspdf';\r\nimport html2canvas from 'html2canvas';\r\nimport axios from 'axios';\r\nimport MarkdownIt from 'markdown-it';  // 添加markdown-it导入\r\n\r\n// 创建markdown解析器实例\r\nconst md = new MarkdownIt({\r\n  html: true,\r\n  breaks: true,\r\n  linkify: true,\r\n  typographer: true\r\n});\r\n\r\nconst route = useRoute();\r\nconst router = useRouter();\r\nconst resultId = ref(route.params.id || route.query.resultId);\r\nconst activeTab = ref(0);\r\nconst loading = ref(false);\r\n\r\n// 添加分析状态相关变量\r\nconst isAnalyzing = ref(false);\r\nconst analyzeProgress = ref(0);\r\nconst analyzeTimer = ref(null);\r\n\r\n// 渲染Markdown内容\r\nconst renderMarkdown = (content) => {\r\n  if (!content) return '';\r\n  try {\r\n    // 检查内容是否已经是HTML\r\n    if (content.includes('<') && content.includes('>') && content.includes('<div') || content.includes('<p>')) {\r\n      // 如果已经含有HTML标签，可能已经被渲染过，直接返回\r\n      return content;\r\n    }\r\n\r\n    // 预处理八字分析特殊格式\r\n    let processedContent = content;\r\n    \r\n    // 处理加粗文本 **文本**\r\n    processedContent = processedContent.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>');\r\n    \r\n    // 处理分隔符 --\r\n    processedContent = processedContent.replace(/\\s*--\\s*/g, '<hr>');\r\n    \r\n    // 处理标题（以#开头的行）\r\n    processedContent = processedContent.replace(/^(#+)\\s+(.*?)$/gm, (match, hashes, text) => {\r\n      const level = Math.min(hashes.length, 6);\r\n      return `<h${level}>${text}</h${level}>`;\r\n    });\r\n    \r\n    // 处理列表（以-或数字开头的行）\r\n    processedContent = processedContent.replace(/^- (.*?)$/gm, '<li>$1</li>');\r\n    processedContent = processedContent.replace(/^(\\d+)\\. (.*?)$/gm, '<li>$1. $2</li>');\r\n    \r\n    // 将连续的<li>元素包装在<ul>或<ol>中\r\n    if (processedContent.includes('<li>')) {\r\n      // 简单检测是否含有数字列表\r\n      const hasNumberList = /^<li>\\d+\\./.test(processedContent);\r\n      const listTag = hasNumberList ? 'ol' : 'ul';\r\n      \r\n      // 将连续的<li>元素包装在列表标签中\r\n      processedContent = processedContent.replace(/(<li>.*?<\\/li>\\n*)+/g, match => {\r\n        return `<${listTag}>${match}</${listTag}>`;\r\n      });\r\n    }\r\n    \r\n    // 处理段落\r\n    if (!processedContent.includes('<p>')) {\r\n      const paragraphs = processedContent.split('\\n\\n');\r\n      processedContent = paragraphs.map(p => {\r\n        // 如果段落不是以HTML标签开头，则添加<p>标签\r\n        if (p.trim() && !p.trim().startsWith('<')) {\r\n          return `<p>${p}</p>`;\r\n        }\r\n        return p;\r\n      }).join('\\n');\r\n    }\r\n    \r\n    // 最后使用markdown-it处理任何剩余的Markdown标记\r\n    return md.render(processedContent);\r\n  } catch (e) {\r\n    console.error('Markdown渲染失败:', e);\r\n    return content; // 如果渲染失败，返回原始内容\r\n  }\r\n};\r\n\r\n// 用户年龄，从URL参数或localStorage获取\r\nconst userAge = ref(null);\r\n// 尝试从URL参数获取年龄\r\nif (route.query.age && !isNaN(parseInt(route.query.age))) {\r\n  userAge.value = parseInt(route.query.age);\r\n} \r\n// 如果URL参数中没有年龄，尝试从localStorage获取\r\nelse if (localStorage.getItem('userAge') && !isNaN(parseInt(localStorage.getItem('userAge')))) {\r\n  userAge.value = parseInt(localStorage.getItem('userAge'));\r\n}\r\n// 记录用户年龄到控制台，便于调试\r\nconsole.log('用户年龄:', userAge.value);\r\n\r\n// 从分析文本中提取特定部分内容\r\nconst getAnalysisContent = (sectionName) => {\r\n  try {\r\n    // 如果是性格特点或学业发展，直接从对应字段获取\r\n    if (sectionName === '性格特点' && aiAnalysis.value.personality) {\r\n      return aiAnalysis.value.personality;\r\n    }\r\n    \r\n    if (sectionName === '学业发展' && aiAnalysis.value.education) {\r\n      return aiAnalysis.value.education;\r\n    }\r\n    \r\n    // 处理健康分析文本，尝试提取学业、性格等内容\r\n    if (aiAnalysis.value.health) {\r\n      const healthText = aiAnalysis.value.health;\r\n      \r\n      // 查找各部分的标记\r\n      const sectionMatch = healthText.match(new RegExp(`###\\\\s*${sectionName}([\\\\s\\\\S]*?)(?=###|$)`, 'i'));\r\n      if (sectionMatch && sectionMatch[1]) {\r\n        return sectionMatch[1].trim();\r\n      }\r\n      \r\n      // 如果是未来发展，尝试从overall中提取\r\n      if (sectionName === '未来发展' && aiAnalysis.value.overall) {\r\n        const futureMatch = aiAnalysis.value.overall.match(/未来(\\d+)年[：:]([\\s\\S]*?)(?=（本分析|$)/i);\r\n        if (futureMatch && futureMatch[2]) {\r\n          return futureMatch[2].trim();\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 如果没有找到对应部分或提取失败，返回空字符串\r\n    return '';\r\n  } catch (e) {\r\n    console.error(`提取${sectionName}内容时出错:`, e);\r\n    return '';\r\n  }\r\n};\r\n\r\n// 修改数据初始化\r\nconst focusAreas = ref([]);\r\nconst analysisResult = ref({});\r\n\r\n// 初始化八字数据\r\nconst baziData = ref({\r\n  yearPillar: { \r\n    heavenlyStem: '', \r\n    earthlyBranch: '',\r\n    naYin: '',\r\n    shiShen: '',\r\n    wangShuai: ''\r\n  },\r\n  monthPillar: { \r\n    heavenlyStem: '', \r\n    earthlyBranch: '',\r\n    naYin: '',\r\n    shiShen: '',\r\n    wangShuai: ''\r\n  },\r\n  dayPillar: { \r\n    heavenlyStem: '', \r\n    earthlyBranch: '',\r\n    naYin: '',\r\n    shiShen: '',\r\n    wangShuai: ''\r\n  },\r\n  hourPillar: { \r\n    heavenlyStem: '', \r\n    earthlyBranch: '',\r\n    naYin: '',\r\n    shiShen: '',\r\n    wangShuai: ''\r\n  },\r\n  fiveElements: {},\r\n  flowingYears: [],\r\n  shenSha: {\r\n    dayChong: '',\r\n    zhiShen: '',\r\n    xiShen: '',\r\n    fuShen: '',\r\n    caiShen: '',\r\n    benMing: [],\r\n    yearGan: [],\r\n    yearZhi: [],\r\n    dayGan: [],\r\n    dayZhi: []\r\n  },\r\n  daYun: {\r\n    startAge: 0,\r\n    startYear: 0,\r\n    isForward: true,\r\n    daYunList: []\r\n  },\r\n  birthDate: null,\r\n  birthTime: null,\r\n  gender: null\r\n});\r\n\r\n// 初始化分析数据\r\nconst aiAnalysis = ref({\r\n  health: '',\r\n  career: '',\r\n  relationship: '',\r\n  children: '',\r\n  social: '',\r\n  future: '',\r\n  parents: '',\r\n  education: '',\r\n  // 新增字段\r\n  coreAnalysis: '',\r\n  fiveElements: '',\r\n  shenShaAnalysis: '',\r\n  keyPoints: ''\r\n});\r\n\r\nconst testApiConnection = async () => {\r\n  try {\r\n    Toast.loading('正在测试API连接...');\r\n    // 使用配置好的http实例\r\n    const response = await axios.get('/');\r\n    console.log('API根路径响应:', response.data);\r\n    Toast.success('API连接成功');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('API连接测试失败:', error);\r\n    Toast.fail('API连接失败，请检查后端服务');\r\n    return false;\r\n  }\r\n};\r\n\r\nonMounted(async () => {\r\n  // 先测试API连接\r\n  const isApiConnected = await testApiConnection();\r\n  if (!isApiConnected) {\r\n    console.warn('API连接失败，将使用模拟数据');\r\n    loading.value = false;\r\n    return;\r\n  }\r\n  \r\n  console.log('结果页面加载，URL参数中的ID:', resultId.value);\r\n  \r\n  // 如果没有resultId，尝试从本地存储获取\r\n  const localResultId = localStorage.getItem('resultId');\r\n  if (!resultId.value && localResultId) {\r\n    console.log('从本地存储获取ID:', localResultId);\r\n    // 更新resultId为从本地存储获取的值\r\n    resultId.value = localResultId;\r\n  }\r\n  \r\n  // 确保resultId是字符串类型，不是布尔值或其他数据类型\r\n  if (resultId.value === true || resultId.value === false) {\r\n    console.error('resultId不应该是布尔值:', resultId.value);\r\n    resultId.value = localResultId || route.query.resultId || '';\r\n  }\r\n  \r\n  console.log('最终使用的resultId:', resultId.value);\r\n  \r\n  // 如果resultId为空或无效，显示错误并尝试从URL查询参数获取\r\n  if (!resultId.value) {\r\n    console.error('缺少结果ID，无法获取分析结果');\r\n    \r\n    // 尝试从URL查询参数获取备选ID\r\n    const urlResultId = route.query.resultId;\r\n    if (urlResultId) {\r\n      console.log('从URL查询参数获取备选ID:', urlResultId);\r\n      resultId.value = urlResultId;\r\n    } else {\r\n      Toast.fail('缺少结果ID，无法获取分析结果');\r\n      loading.value = false;\r\n      return;\r\n    }\r\n  }\r\n  \r\n  // 存储确认的resultId到本地存储\r\n  localStorage.setItem('resultId', resultId.value);\r\n  \r\n  // 显示加载提示\r\n  Toast.loading({\r\n    message: '正在加载八字分析结果，请稍候...',\r\n    duration: 0,\r\n    forbidClick: true\r\n  });\r\n  \r\n  // 调用getBaziResult函数获取结果\r\n  await getBaziResult();\r\n  \r\n  // 检查分析是否完成\r\n  const stillAnalyzing = Object.values(aiAnalysis.value).some(\r\n    value => typeof value === 'string' && value.includes('正在分析')\r\n  );\r\n  \r\n  if (stillAnalyzing) {\r\n    console.log('检测到分析仍在进行中...');\r\n    Toast.loading({\r\n      message: '正在生成八字分析结果，这可能需要30-60秒...',\r\n      duration: 0\r\n    });\r\n    \r\n    // 设置分析状态为进行中\r\n    analysisStatus.value = 'pending';\r\n    \r\n    // 启动轮询\r\n    await pollAnalysisStatus(resultId.value);\r\n    Toast.success('分析完成');\r\n    \r\n    // 分析完成后更新状态\r\n    analysisStatus.value = 'completed';\r\n    analysisProgress.value = 100;\r\n  }\r\n  \r\n  // 关闭加载提示\r\n  Toast.clear();\r\n});\r\n\r\nconst getElementName = (element) => {\r\n  if (!element) return '--';\r\n  \r\n  const elementNames = {\r\n    'wood': '木',\r\n    'fire': '火',\r\n    'earth': '土',\r\n    'metal': '金',\r\n    'water': '水',\r\n    '木': '木',\r\n    '火': '火',\r\n    '土': '土',\r\n    '金': '金',\r\n    '水': '水'\r\n  };\r\n  \r\n  return elementNames[element] || element;\r\n};\r\n\r\nconst onClickLeft = () => {\r\n  router.push('/');\r\n};\r\n\r\n// 修改后的直接流下载函数，适应后端始终返回文件流\r\nconst downloadPDFAsStream = async () => {\r\n  Toast.loading({\r\n    message: '正在生成PDF并下载报告...',\r\n    duration: 0,\r\n    position: 'middle',\r\n    forbidClick: true\r\n  });\r\n  \r\n  if (!resultId.value) {\r\n    Toast.clear();\r\n    Toast.fail('缺少结果ID，无法下载报告');\r\n    return false;\r\n  }\r\n  \r\n  try {\r\n    console.log('直接下载报告, 结果ID:', resultId.value);\r\n    \r\n    // 创建下载链接，添加时间戳避免缓存问题和force参数强制重新生成\r\n    const timestamp = new Date().getTime();\r\n    // 默认启用markdown解析\r\n    const downloadUrl = `/api/bazi/pdf/${resultId.value}?t=${timestamp}&force=true&parseMarkdown=true`;\r\n    console.log('下载URL:', downloadUrl);\r\n    \r\n    // 使用fetch API获取文件流\r\n    const response = await fetch(downloadUrl, {\r\n      method: 'GET',\r\n      cache: 'no-cache',\r\n      headers: {\r\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\r\n        'Pragma': 'no-cache',\r\n        'Expires': '0'\r\n      }\r\n    });\r\n    \r\n    // 检查错误\r\n    if (!response.ok) {\r\n      let errorMsg = `下载失败: HTTP错误 ${response.status}`;\r\n      try {\r\n        const contentType = response.headers.get('content-type');\r\n        if (contentType && contentType.includes('application/json')) {\r\n          const errorData = await response.json();\r\n          errorMsg = errorData.message || errorMsg;\r\n        } else {\r\n          // 如果不是JSON格式的错误，尝试获取文本错误信息\r\n          const errorText = await response.text();\r\n          if (errorText) {\r\n            errorMsg = `下载失败: ${errorText.substring(0, 100)}`;\r\n          }\r\n        }\r\n      } catch (e) {\r\n        console.error('解析错误响应失败:', e);\r\n      }\r\n      throw new Error(errorMsg);\r\n    }\r\n    \r\n    // 检查内容类型\r\n    const contentType = response.headers.get('content-type');\r\n    const disposition = response.headers.get('content-disposition');\r\n    \r\n    console.log('响应内容类型:', contentType);\r\n    console.log('响应内容处置:', disposition);\r\n    \r\n    // 确定文件名和扩展名\r\n    let filename = `八字命理分析_${resultId.value}.pdf`;\r\n    if (disposition && disposition.includes('filename=')) {\r\n      const filenameMatch = disposition.match(/filename=[\"']?([^\"']+)[\"']?/);\r\n      if (filenameMatch && filenameMatch[1]) {\r\n        filename = filenameMatch[1];\r\n      }\r\n    }\r\n    \r\n    // 确定文件类型\r\n    const fileExtension = contentType && contentType.includes('html') ? 'html' : 'pdf';\r\n    if (!filename.endsWith(fileExtension)) {\r\n      filename = `八字命理分析_${resultId.value}.${fileExtension}`;\r\n    }\r\n    \r\n    // 转换为Blob对象\r\n    const blob = await response.blob();\r\n    console.log('PDF Blob大小:', blob.size, '字节');\r\n    \r\n    // 检查Blob大小 - 注意：当浏览器接管下载时，可能会导致blob.size为0\r\n    // 因此，如果有Content-Disposition头部，我们应该认为下载已经开始\r\n    const isDownloadStarted = disposition && disposition.includes('attachment');\r\n    if (blob.size === 0 && !isDownloadStarted) {\r\n      throw new Error('下载的文件为空');\r\n    }\r\n    \r\n    // 对于小文件，我们可以验证文件内容\r\n    // 但对于大文件或浏览器接管的下载，跳过验证\r\n    if (blob.size > 0 && blob.size < 1024*1024 && contentType && contentType.includes('pdf')) {\r\n      try {\r\n        // 读取文件头部以验证是否为有效的PDF\r\n        const fileReader = new FileReader();\r\n        const headerPromise = new Promise((resolve, reject) => {\r\n          fileReader.onloadend = (e) => resolve(e.target.result);\r\n          fileReader.onerror = (e) => reject(e);\r\n        });\r\n        fileReader.readAsArrayBuffer(blob.slice(0, 5));\r\n        \r\n        const header = await headerPromise;\r\n        const headerView = new Uint8Array(header);\r\n        const headerString = String.fromCharCode.apply(null, headerView);\r\n        \r\n        if (!headerString.startsWith('%PDF')) {\r\n          console.error('无效的PDF文件头:', headerString);\r\n          throw new Error('下载的不是有效的PDF文件');\r\n        } else {\r\n          console.log('PDF文件头验证通过');\r\n        }\r\n      } catch (e) {\r\n        console.error('验证PDF文件失败:', e);\r\n        // 如果是浏览器接管下载导致的验证失败，我们不抛出错误\r\n        if (!isDownloadStarted) {\r\n          throw new Error('验证PDF文件失败: ' + e.message);\r\n        } else {\r\n          console.warn('浏览器接管了下载，跳过PDF验证');\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 不管浏览器是否已经接管下载，我们都手动创建一个下载链接\r\n    try {\r\n      // 创建下载链接\r\n      const url = window.URL.createObjectURL(blob);\r\n      console.log('创建Blob URL:', url);\r\n      \r\n      // 使用iframe方式下载，避免某些浏览器的下载拦截\r\n      const iframe = document.createElement('iframe');\r\n      iframe.style.display = 'none';\r\n      document.body.appendChild(iframe);\r\n      \r\n      // 创建a标签并触发下载\r\n      const a = document.createElement('a');\r\n      a.href = url;\r\n      a.download = `八字命理分析_${resultId.value}.pdf`; // 强制使用自定义文件名\r\n      a.target = '_blank';\r\n      a.rel = 'noopener noreferrer';\r\n      \r\n      // 在iframe中添加a标签并点击\r\n      iframe.contentWindow.document.body.appendChild(a);\r\n      console.log('触发下载, 文件名:', a.download);\r\n      a.click();\r\n      \r\n      // 清理\r\n      setTimeout(() => {\r\n        window.URL.revokeObjectURL(url);\r\n        document.body.removeChild(iframe);\r\n        console.log('清理下载资源完成');\r\n      }, 1000); // 增加延时确保下载开始\r\n    } catch (e) {\r\n      console.error('创建下载链接失败:', e);\r\n      \r\n      // 尝试使用window.open直接打开PDF\r\n      try {\r\n        console.log('尝试使用window.open方法下载');\r\n        const pdfWindow = window.open(downloadUrl, '_blank');\r\n        if (!pdfWindow) {\r\n          console.warn('弹出窗口被阻止，尝试其他方法');\r\n          // 提示用户直接打开链接\r\n          Dialog.alert({\r\n            title: '下载提示',\r\n            message: '系统无法自动下载PDF，请点击确定后手动保存文件',\r\n            confirmButtonText: '确定',\r\n          }).then(() => {\r\n            window.open(downloadUrl, '_blank');\r\n          });\r\n        }\r\n      } catch (openError) {\r\n        console.error('使用window.open下载失败:', openError);\r\n        throw new Error('下载失败，请尝试使用其他浏览器');\r\n      }\r\n    }\r\n    \r\n    Toast.clear();\r\n    Toast.success('报告下载成功');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('直接下载PDF出错:', error);\r\n    Toast.clear();\r\n    \r\n    // 检查是否是因为浏览器已经接管了下载而导致的错误\r\n    if (error.message && (\r\n        error.message.includes('下载的文件为空') || \r\n        error.message.includes('验证PDF文件失败')\r\n      )) {\r\n      // 如果是这类错误，可能是浏览器已经开始下载，我们不显示错误\r\n      console.log('可能是浏览器已经接管了下载，不显示错误');\r\n      Toast.success('报告下载已开始，请等待浏览器完成下载');\r\n      return true;\r\n    }\r\n    \r\n    // 显示错误信息\r\n    Toast.fail(error.message || '下载失败，请稍后重试');\r\n    return false;\r\n  }\r\n};\r\n\r\n// 修改主下载函数，添加重试逻辑\r\nconst downloadPDF = async () => {\r\n  Toast.loading({\r\n    message: '正在准备生成PDF报告...',\r\n    duration: 5000,\r\n    position: 'middle'\r\n  });\r\n  \r\n  if (!resultId.value) {\r\n    Toast.fail('缺少结果ID，无法生成报告');\r\n    return;\r\n  }\r\n  \r\n  try {\r\n    // 先重新加载最新的数据，确保PDF包含最新的追问分析结果\r\n    Toast.loading({\r\n      message: '正在同步最新数据...',\r\n      duration: 5000\r\n    });\r\n    \r\n    // 获取最新的基础分析结果\r\n    await getBaziResult();\r\n    \r\n    // 获取最新的追问分析结果\r\n    await loadFollowupResults();\r\n    \r\n    Toast.loading({\r\n      message: '正在生成并下载PDF报告...',\r\n      duration: 5000\r\n    });\r\n    \r\n    // 最多尝试3次下载\r\n    let attempts = 0;\r\n    let success = false;\r\n    \r\n    while (attempts < 3 && !success) {\r\n      attempts++;\r\n      \r\n      if (attempts > 1) {\r\n        console.log(`尝试第${attempts}次下载...`);\r\n        Toast.loading({\r\n          message: `尝试第${attempts}次下载...`,\r\n          duration: 2000\r\n        });\r\n        // 在重试之前等待一段时间\r\n        await new Promise(resolve => setTimeout(resolve, 2000));\r\n      }\r\n      \r\n      // 使用流式下载模式，并处理返回值\r\n      success = await downloadPDFAsStream();\r\n      \r\n      // 如果流式下载成功，直接返回，不再尝试其他方法\r\n      if (success === true) {\r\n        return;\r\n      }\r\n    }\r\n    \r\n    // 如果多次尝试后仍然失败，提示用户\r\n    if (!success) {\r\n      Toast.clear();\r\n      Dialog.alert({\r\n        title: 'PDF下载失败',\r\n        message: '下载PDF报告失败，请稍后再试。如果问题持续存在，请联系客服。',\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('下载PDF过程中发生错误:', error);\r\n    Toast.clear();\r\n    Toast.fail('生成PDF报告失败: ' + (error.message || '未知错误'));\r\n  }\r\n};\r\n\r\n// 本地生成PDF的函数\r\nconst generatePDFLocally = async () => {\r\n  console.log('使用客户端jsPDF库生成PDF');\r\n  \r\n  // 获取内容元素\r\n  const element = document.querySelector('.result-container');\r\n  if (!element) {\r\n    throw new Error('找不到要转换的内容元素');\r\n  }\r\n  \r\n  Toast.loading({\r\n    message: '正在捕获页面内容...',\r\n    duration: 5000\r\n  });\r\n  \r\n  try {\r\n    // 在捕获内容前先应用Markdown格式（临时）\r\n    const sections = document.querySelectorAll('.analysis-section');\r\n    const originalContents = [];\r\n    \r\n    // 确保所有Markdown内容都已经被渲染为HTML\r\n    sections.forEach((section, index) => {\r\n      const contentElement = section.querySelector('p, .markdown-content');\r\n      if (contentElement && !contentElement.classList.contains('markdown-content')) {\r\n        originalContents.push({\r\n          element: contentElement,\r\n          content: contentElement.innerHTML\r\n        });\r\n        \r\n        // 如果内容中有Markdown语法但尚未渲染，则渲染它\r\n        if (contentElement.textContent.includes('**') || \r\n            contentElement.textContent.includes('##') ||\r\n            contentElement.textContent.includes('--') ||\r\n            contentElement.textContent.includes('- ')) {\r\n          contentElement.innerHTML = md.render(contentElement.textContent);\r\n          contentElement.classList.add('markdown-content-temp');\r\n        }\r\n      }\r\n    });\r\n    \r\n    // 使用html2canvas捕获内容\r\n    const canvas = await html2canvas(element, {\r\n      scale: 1,\r\n      useCORS: true,\r\n      logging: false,\r\n      windowWidth: document.documentElement.offsetWidth,\r\n      windowHeight: document.documentElement.offsetHeight,\r\n    });\r\n    \r\n    Toast.loading({\r\n      message: '正在生成PDF文件...',\r\n      duration: 5000\r\n    });\r\n        \r\n    // 创建PDF文档\r\n    const pdf = new jsPDF('p', 'mm', 'a4');\r\n        \r\n    // 计算尺寸和比例\r\n    const imgData = canvas.toDataURL('image/png');\r\n    const imgWidth = 210; // A4宽度，单位mm\r\n    const pageHeight = 297; // A4高度，单位mm\r\n    const imgHeight = canvas.height * imgWidth / canvas.width;\r\n    let heightLeft = imgHeight;\r\n    let position = 0;\r\n          \r\n    // 添加首页\r\n    pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);\r\n    heightLeft -= pageHeight;\r\n    \r\n    // 如果内容超过一页，添加更多页\r\n    while (heightLeft > 0) {\r\n      position = heightLeft - imgHeight;\r\n      pdf.addPage();\r\n      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);\r\n      heightLeft -= pageHeight;\r\n    }\r\n    \r\n    // 添加页脚\r\n    const pageCount = pdf.internal.getNumberOfPages();\r\n    for (let i = 1; i <= pageCount; i++) {\r\n      pdf.setPage(i);\r\n      pdf.setFontSize(10);\r\n      pdf.setTextColor(150);\r\n      pdf.text(`八字命理AI分析报告 - 页 ${i} / ${pageCount}`, pdf.internal.pageSize.getWidth() / 2, pdf.internal.pageSize.getHeight() - 10, { align: 'center' });\r\n    }\r\n    \r\n    // 恢复原始内容\r\n    originalContents.forEach(item => {\r\n      if (item && item.element) {\r\n        item.element.innerHTML = item.content;\r\n        item.element.classList.remove('markdown-content-temp');\r\n      }\r\n    });\r\n    \r\n    // 保存PDF\r\n    pdf.save(`八字命理分析_${resultId.value}.pdf`);\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('本地PDF生成错误:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst shareResult = () => {\r\n  Toast.success('分享功能开发中');\r\n};\r\n\r\n// 处理本地PDF生成\r\nconst handleLocalPDFGeneration = async () => {\r\n  try {\r\n    Toast.loading({\r\n      message: '正在本地生成PDF...',\r\n      duration: 0,\r\n      forbidClick: true\r\n    });\r\n    \r\n    // 确保所有内容都已经渲染Markdown\r\n    const sections = document.querySelectorAll('.analysis-section');\r\n    const originalContents = [];\r\n    let needsRendering = false;\r\n    \r\n    // 检查是否有内容需要渲染\r\n    sections.forEach((section) => {\r\n      const contentElement = section.querySelector('p:not(.markdown-content)');\r\n      if (contentElement) {\r\n        needsRendering = true;\r\n      }\r\n    });\r\n    \r\n    // 如果需要渲染，先将所有内容进行Markdown渲染\r\n    if (needsRendering) {\r\n      console.log('检测到需要渲染Markdown内容');\r\n      sections.forEach((section) => {\r\n        const contentElements = section.querySelectorAll('p:not(.markdown-content)');\r\n        contentElements.forEach((element) => {\r\n          const text = element.textContent;\r\n          if (text && (\r\n            text.includes('**') || \r\n            text.includes('#') || \r\n            text.includes('-') || \r\n            text.includes('1.') ||\r\n            text.includes('\\n')\r\n          )) {\r\n            originalContents.push({\r\n              element: element,\r\n              content: element.innerHTML\r\n            });\r\n            element.innerHTML = md.render(text);\r\n            element.classList.add('markdown-content');\r\n            element.classList.add('temp-rendered');\r\n          }\r\n        });\r\n      });\r\n    }\r\n    \r\n    // 生成PDF\r\n    await generatePDFLocally();\r\n    \r\n    // 恢复原始内容\r\n    if (needsRendering) {\r\n      document.querySelectorAll('.temp-rendered').forEach((element) => {\r\n        const original = originalContents.find(item => item.element === element);\r\n        if (original) {\r\n          element.innerHTML = original.content;\r\n          element.classList.remove('markdown-content');\r\n          element.classList.remove('temp-rendered');\r\n        }\r\n      });\r\n    }\r\n    \r\n    Toast.clear();\r\n    Toast.success('本地PDF生成成功');\r\n  } catch (error) {\r\n    console.error('本地PDF生成失败:', error);\r\n    Toast.clear();\r\n    Toast.fail('本地PDF生成失败: ' + (error.message || '未知错误'));\r\n  }\r\n};\r\n\r\n// 添加分析状态检查函数\r\nconst checkAnalysisStatus = async (resultId) => {\r\n  try {\r\n    console.log('检查分析状态:', resultId);\r\n    const response = await axios.get(`/api/bazi/result/${resultId}`);\r\n    \r\n    if (response.data.code === 200) {\r\n      // 检查AI分析是否已经生成\r\n      const aiAnalysisData = response.data.data.aiAnalysis || {};\r\n      \r\n      // 统计已完成和正在分析的项目\r\n      let totalItems = 0;\r\n      let completedItems = 0;\r\n      \r\n      Object.entries(aiAnalysisData).forEach(([key, value]) => {\r\n        totalItems++;\r\n        if (!(typeof value === 'string' && value.includes('正在分析'))) {\r\n          completedItems++;\r\n        }\r\n      });\r\n      \r\n      // 更新进度\r\n      if (totalItems > 0) {\r\n        analyzeProgress.value = Math.floor((completedItems / totalItems) * 100);\r\n      }\r\n      \r\n      // 检查是否还有\"正在分析\"的内容\r\n      const stillAnalyzing = Object.values(aiAnalysisData).some(\r\n        value => typeof value === 'string' && value.includes('正在分析')\r\n      );\r\n      \r\n      isAnalyzing.value = stillAnalyzing;\r\n      \r\n      if (stillAnalyzing) {\r\n        console.log('分析仍在进行中...', `完成度: ${analyzeProgress.value}%`);\r\n        return false;\r\n      } else {\r\n        console.log('分析已完成');\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  } catch (error) {\r\n    console.error('检查分析状态出错:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// 轮询检查分析状态\r\nconst pollAnalysisStatus = async (resultId) => {\r\n  let attempts = 0;\r\n  const maxAttempts = 30; // 最多轮询30次，约60秒\r\n  \r\n  // 启动模拟进度条\r\n  if (!analyzeTimer.value) {\r\n    let progress = analysisProgress.value || 0;\r\n    analyzeTimer.value = setInterval(() => {\r\n      if (progress < 95) { // 最多到95%，留5%给实际完成时\r\n        progress += Math.random() * 3;\r\n        if (progress > 95) progress = 95;\r\n        analysisProgress.value = Math.floor(progress);\r\n      }\r\n    }, 1000);\r\n  }\r\n  \r\n  // 检查分析状态\r\n  const checkAnalysisStatus = async (resultId) => {\r\n    try {\r\n      const response = await axios.get(`/api/bazi/result/${resultId}`);\r\n      if (response.data.code === 200) {\r\n        const data = response.data.data;\r\n        \r\n        // 更新AI分析结果\r\n        if (data.aiAnalysis) {\r\n          aiAnalysis.value = {\r\n            ...aiAnalysis.value,\r\n            ...data.aiAnalysis\r\n          };\r\n        }\r\n        \r\n        // 检查分析状态\r\n        const status = data.analysisStatus || 'completed';\r\n        const progress = data.analysisProgress || 0;\r\n        \r\n        // 更新状态和进度\r\n        analysisStatus.value = status;\r\n        analysisProgress.value = progress;\r\n        \r\n        // 检查是否完成\r\n        if (status === 'completed' || progress >= 100) {\r\n          return true;\r\n        }\r\n        \r\n        // 检查内容是否已生成（即使状态未更新）\r\n        const allGenerated = !Object.values(aiAnalysis.value).some(\r\n          value => typeof value === 'string' && value.includes('正在分析')\r\n        );\r\n        \r\n        return allGenerated;\r\n      }\r\n      return false;\r\n    } catch (error) {\r\n      console.error('检查分析状态失败:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  return new Promise((resolve) => {\r\n    const checkInterval = setInterval(async () => {\r\n      attempts++;\r\n      const isComplete = await checkAnalysisStatus(resultId);\r\n      \r\n      if (isComplete || attempts >= maxAttempts) {\r\n        clearInterval(checkInterval);\r\n        \r\n        // 清除模拟进度定时器\r\n        if (analyzeTimer.value) {\r\n          clearInterval(analyzeTimer.value);\r\n          analyzeTimer.value = null;\r\n        }\r\n        \r\n        if (isComplete) {\r\n          // 如果完成，确保进度显示100%\r\n          analysisProgress.value = 100;\r\n          setTimeout(() => {\r\n            analysisStatus.value = 'completed';\r\n          }, 1000); // 短暂显示100%后隐藏进度条\r\n        }\r\n        \r\n        await getBaziResult(); // 最后再获取一次完整结果\r\n        Toast.clear();\r\n        resolve(isComplete);\r\n      }\r\n    }, 2000); // 每2秒检查一次\r\n  });\r\n};\r\n\r\n// 重新加载八字数据\r\nconst reloadBaziData = async () => {\r\n  try {\r\n    Toast.loading({\r\n      message: '正在加载现有分析结果...',\r\n      duration: 0,\r\n      forbidClick: true\r\n    });\r\n    \r\n    const response = await axios.get(`/api/bazi/result/${resultId.value}`);\r\n    \r\n    if (response.data.code === 200) {\r\n      // 更新八字数据\r\n      if (response.data.data.baziChart) {\r\n        baziChart.value = response.data.data.baziChart;\r\n      }\r\n      \r\n      // 更新AI分析结果\r\n      if (response.data.data.aiAnalysis) {\r\n        aiAnalysis.value = response.data.data.aiAnalysis;\r\n      }\r\n      \r\n      // 检查分析状态和进度\r\n      analysisStatus.value = response.data.data.analysisStatus || 'completed';\r\n      analysisProgress.value = response.data.data.analysisProgress || 100;\r\n      \r\n      // 如果分析已完成但进度条未达到100%，强制设置为100%\r\n      if (analysisStatus.value === 'completed' && analysisProgress.value < 100) {\r\n        analysisProgress.value = 100;\r\n      }\r\n      \r\n      console.log('分析状态:', analysisStatus.value);\r\n      console.log('分析进度:', analysisProgress.value);\r\n      console.log('AI分析结果更新:', aiAnalysis.value);\r\n      \r\n      // 重新加载追问分析结果\r\n      console.log('重新加载追问分析结果...');\r\n      await loadFollowupResults();\r\n      \r\n      // 遍历所有已支付的追问选项，强制重新获取分析结果\r\n      const paidOptions = followupOptions.value.filter(option => option.paid);\r\n      if (paidOptions.length > 0) {\r\n        console.log('发现已支付的追问选项，强制重新获取:', paidOptions.map(o => o.id));\r\n        for (const option of paidOptions) {\r\n          await getFollowupAnalysis(option.id);\r\n        }\r\n      }\r\n      \r\n      Toast.success('数据刷新成功');\r\n    } else {\r\n      Toast.fail(response.data.message || '加载失败');\r\n    }\r\n  } catch (error) {\r\n    console.error('重新加载失败:', error);\r\n    Toast.fail('加载失败: ' + (error.message || '未知错误'));\r\n  }\r\n};\r\n\r\n// 追问相关状态\r\nconst followupOptions = ref([\r\n  { id: 'marriage', name: '婚姻感情', selected: false, paid: false },\r\n  { id: 'career', name: '事业财运', selected: false, paid: false },\r\n  { id: 'children', name: '子女情况', selected: false, paid: false },\r\n  { id: 'parents', name: '父母情况', selected: false, paid: false },\r\n  { id: 'health', name: '身体健康', selected: false, paid: false },\r\n  { id: 'education', name: '学业', selected: false, paid: false },\r\n  { id: 'relationship', name: '人际关系', selected: false, paid: false },\r\n  { id: 'fiveYears', name: '近五年运势', selected: false, paid: false }\r\n]);\r\n\r\nconst currentFollowup = ref(null);\r\nconst showFollowupDialog = ref(false);\r\nconst followupAnalysis = ref({});\r\nconst isLoadingFollowup = ref(false);\r\n\r\n// 选择追问选项\r\nconst selectFollowupOption = async (option) => {\r\n  // 设置当前选择的追问选项\r\n  currentFollowup.value = option;\r\n  \r\n  // 如果已经支付过，直接显示结果\r\n  if (option.paid) {\r\n    console.log(`选择已支付的追问: ${option.id}`);\r\n    \r\n    // 如果已有分析结果，直接显示\r\n    if (followupAnalysis.value[option.id]) {\r\n      console.log(`已有${option.id}分析结果，直接显示`);\r\n      return;\r\n    }\r\n    \r\n    // 如果没有分析结果，尝试获取\r\n    console.log(`尝试获取${option.id}分析结果`);\r\n    Toast.loading({\r\n      message: '正在加载分析结果...',\r\n      duration: 0\r\n    });\r\n    \r\n    try {\r\n      // 尝试获取分析结果\r\n      const analysis = await getFollowupAnalysis(option.id);\r\n      if (analysis && typeof analysis === 'string' && analysis.length > 0) {\r\n        Toast.success('加载成功');\r\n        console.log(`成功获取${option.id}分析结果，长度: ${analysis.length}`);\r\n      } else {\r\n        Toast.fail('分析结果尚未生成完成，请稍后再试');\r\n        console.warn(`获取${option.id}分析结果失败或为空`);\r\n      }\r\n    } catch (error) {\r\n      console.error(`获取${option.id}分析失败:`, error);\r\n      Toast.fail('获取分析失败，请重试');\r\n    } finally {\r\n      Toast.clear();\r\n    }\r\n    \r\n    return;\r\n  }\r\n  \r\n  // 否则显示支付对话框\r\n  showFollowupDialog.value = true;\r\n};\r\n\r\n// 支付追问费用\r\nconst payForFollowup = async () => {\r\n  if (!currentFollowup.value) return;\r\n  \r\n  try {\r\n    isLoadingFollowup.value = true;\r\n    \r\n    // 第一步：创建订单\r\n    Toast.loading({\r\n      message: '正在创建订单...',\r\n      forbidClick: true,\r\n      duration: 0\r\n    });\r\n    \r\n    // 获取URL参数\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    \r\n    // 创建追问订单\r\n    const orderResponse = await axios.post('/api/order/create/followup', {\r\n      resultId: resultId.value,\r\n      area: currentFollowup.value.id\r\n    });\r\n    \r\n    if (orderResponse.data.code === 200) {\r\n      const followupOrderId = orderResponse.data.data.orderId;\r\n      console.log('追问订单创建成功:', followupOrderId);\r\n      \r\n      // 调用微信支付\r\n      Toast.loading({\r\n        message: '正在准备支付...',\r\n        forbidClick: true,\r\n        duration: 0\r\n      });\r\n      \r\n      // 获取微信支付参数\r\n      const paymentResponse = await axios.post('/api/order/payment', {\r\n        orderId: followupOrderId,\r\n        paymentMethod: 'wechat',\r\n        deviceType: 'pc',\r\n        returnQrCode: true // 返回二维码图片\r\n      });\r\n      \r\n      if (paymentResponse.data.code === 200) {\r\n        Toast.clear();\r\n        \r\n        // 显示微信支付二维码\r\n        const paymentData = paymentResponse.data.data;\r\n        const qrCodeImage = paymentData.qr_image;\r\n        \r\n        Dialog.confirm({\r\n          title: '微信支付',\r\n          message: `\r\n            <div style=\"text-align: center\">\r\n              <p>请使用微信扫描下方二维码支付</p>\r\n              <p>金额: ￥9.9</p>\r\n              <img src=\"${qrCodeImage}\" style=\"width: 200px; height: 200px\" />\r\n              <p style=\"font-size: 12px; color: #999\">付款完成后，请点击\"已完成支付\"按钮</p>\r\n            </div>\r\n          `,\r\n          messageAlign: 'center',\r\n          confirmButtonText: '已完成支付',\r\n          cancelButtonText: '取消',\r\n          showCancelButton: true,\r\n        })\r\n        .then(async () => {\r\n          // 用户点击\"已完成支付\"\r\n          Toast.loading({\r\n            message: '正在确认支付结果...',\r\n            forbidClick: true,\r\n            duration: 0\r\n          });\r\n          \r\n          // 轮询检查支付结果\r\n          let checkCount = 0;\r\n          const maxChecks = 10;\r\n          let isPaid = false;\r\n          \r\n          while (checkCount < maxChecks && !isPaid) {\r\n            try {\r\n              const statusResponse = await axios.get(`/api/order/status/${followupOrderId}`);\r\n              \r\n              if (statusResponse.data.code === 200) {\r\n                const orderStatus = statusResponse.data.data.status;\r\n                \r\n                if (orderStatus === 'paid') {\r\n                  isPaid = true;\r\n                  \r\n                  // 如果有返回新的resultId，更新它\r\n                  if (statusResponse.data.data.resultId) {\r\n                    resultId.value = statusResponse.data.data.resultId;\r\n                    localStorage.setItem('resultId', statusResponse.data.data.resultId);\r\n                  }\r\n                  \r\n                  break;\r\n                }\r\n              }\r\n            } catch (error) {\r\n              console.error('检查支付状态出错:', error);\r\n            }\r\n            \r\n            // 等待2秒后再次检查\r\n            await new Promise(resolve => setTimeout(resolve, 2000));\r\n            checkCount++;\r\n          }\r\n          \r\n          Toast.clear();\r\n          \r\n          if (isPaid) {\r\n            // 支付成功\r\n            Toast.success('支付成功');\r\n            \r\n            // 更新UI，将当前追问项标记为已付费\r\n            const index = followupOptions.value.findIndex(o => o.id === currentFollowup.value.id);\r\n            if (index !== -1) {\r\n              followupOptions.value[index].paid = true;\r\n              followupOptions.value = [...followupOptions.value]; // 强制Vue更新\r\n            }\r\n            \r\n            // 加载分析结果\r\n            Toast.loading({\r\n              message: '正在生成分析结果，这可能需要30-60秒...',\r\n              forbidClick: true,\r\n              duration: 0\r\n            });\r\n            \r\n            // 轮询检查分析结果状态\r\n            const area = currentFollowup.value.id;\r\n            await pollFollowupStatus();\r\n          } else {\r\n            // 支付未完成\r\n            Toast.fail('未检测到支付完成，请稍后再试');\r\n          }\r\n        })\r\n        .catch(() => {\r\n          // 用户取消支付\r\n          Toast.clear();\r\n          Toast.info('已取消支付');\r\n        });\r\n      } else {\r\n        Toast.clear();\r\n        Toast.fail(paymentResponse.data.message || '获取支付参数失败');\r\n      }\r\n    } else {\r\n      Toast.fail('创建订单失败');\r\n    }\r\n  } catch (error) {\r\n    console.error('追问支付过程出错:', error);\r\n    Toast.fail('处理失败，请重试');\r\n  } finally {\r\n    isLoadingFollowup.value = false;\r\n  }\r\n};\r\n\r\n// 自定义轮询检查追问分析状态\r\nconst pollFollowupStatus = async () => {\r\n  const area = currentFollowup.value.id;\r\n  console.log(`开始轮询追问分析状态: ${area}`);\r\n  \r\n  // 开始计时\r\n  const startTime = new Date().getTime();\r\n  const timeoutMs = 120000; // 120秒超时\r\n  let attempts = 0;\r\n  const maxAttempts = 60; // 最多等待120秒（60次 * 2秒）\r\n  let isComplete = false;\r\n  \r\n  while (attempts < maxAttempts && !isComplete) {\r\n    attempts++;\r\n    try {\r\n      // 等待2秒\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n      \r\n      // 检查是否超时\r\n      const currentTime = new Date().getTime();\r\n      if (currentTime - startTime > timeoutMs) {\r\n        console.warn(`轮询追问分析状态超时: ${area}`);\r\n        break;\r\n      }\r\n      \r\n      // 检查追问分析结果\r\n      console.log(`尝试第${attempts}次获取追问分析: ${area}`);\r\n      const response = await axios.get(`/api/bazi/followup/${resultId.value}/${area}`);\r\n      \r\n      if (response.data.code === 200 && response.data.data && response.data.data.analysis) {\r\n        // 检查分析内容是否为\"正在分析\"\r\n        const analysis = response.data.data.analysis;\r\n        if (typeof analysis === 'string' && !analysis.includes('正在分析')) {\r\n          console.log(`成功获取追问分析结果: ${area}`);\r\n          isComplete = true;\r\n          followupAnalysis.value[area] = analysis;\r\n          break;\r\n        } else {\r\n          console.log(`追问分析结果还在生成中: ${area}`);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // 只有非404错误才打印详细信息\r\n      if (!error.response || error.response.status !== 404) {\r\n        console.error('检查追问分析状态出错:', error);\r\n      }\r\n      \r\n      // 如果遇到404错误，表示追问分析尚未创建完毕\r\n      if (error.response && error.response.status === 404) {\r\n        console.log('追问分析尚未创建完毕，继续等待...');\r\n      } else if (attempts >= maxAttempts / 2) {\r\n        // 如果尝试次数超过一半且仍然失败，不要退出轮询，但记录错误\r\n        console.warn(`获取分析数据失败(${attempts}/${maxAttempts})，继续尝试...`);\r\n      }\r\n    }\r\n  }\r\n  \r\n  // 无论是否完成，都尝试获取最终结果\r\n  console.log(`轮询完成，最终尝试获取追问分析: ${area}`);\r\n  try {\r\n    const finalResult = await getFollowupAnalysis(area);\r\n    console.log(`最终获取追问分析结果: ${finalResult ? '成功' : '失败'}`);\r\n    \r\n    // 更新UI\r\n    Toast.clear();\r\n    if (finalResult) {\r\n      Toast.success('分析已完成');\r\n      \r\n      // 支付成功且分析完成后，切换到AI分析结果标签页显示结果\r\n      activeTab.value = 1; // 切换到AI分析结果标签\r\n      \r\n      // 滚动到相应分析部分\r\n      setTimeout(() => {\r\n        const sectionMap = {\r\n          'relationship': '婚姻感情',\r\n          'marriage': '婚姻感情',\r\n          'career': '事业财运',\r\n          'work': '事业财运',\r\n          'money': '事业财运',\r\n          'wealth': '事业财运',\r\n          'children': '子女情况',\r\n          'family': '子女情况',\r\n          'parents': '父母情况',\r\n          'health': '身体健康',\r\n          'education': '学业',\r\n          'study': '学业',\r\n          'social': '人际关系',\r\n          'friends': '人际关系',\r\n          'future': '近五年运势',\r\n          'fiveYears': '近五年运势'\r\n        };\r\n        \r\n        const targetTitle = sectionMap[currentFollowup.value.id];\r\n        if (targetTitle) {\r\n          // 查找并滚动到对应的分析部分\r\n          const sections = document.querySelectorAll('.analysis-section h3');\r\n          for (let i = 0; i < sections.length; i++) {\r\n            if (sections[i].textContent.includes(targetTitle)) {\r\n              sections[i].scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n              \r\n              // 高亮显示该部分\r\n              const section = sections[i].parentElement;\r\n              section.classList.add('highlight-section');\r\n              setTimeout(() => {\r\n                section.classList.remove('highlight-section');\r\n              }, 3000);\r\n              \r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }, 500);\r\n    } else {\r\n      Toast.success('正在生成分析，请稍后刷新查看');\r\n    }\r\n    \r\n    showFollowupDialog.value = false;\r\n    \r\n    return finalResult;\r\n  } catch (error) {\r\n    console.error('获取最终追问分析结果失败:', error);\r\n    Toast.clear();\r\n    Toast.fail('分析生成失败，请稍后刷新页面');\r\n    \r\n    // 如果分析结果仍然不可用，显示友好的错误信息\r\n    followupAnalysis.value[area] = \"分析正在处理中，请稍后刷新页面查看。\";\r\n    return null;\r\n  }\r\n};\r\n\r\n// 获取追问分析结果\r\nconst getFollowupAnalysis = async (area) => {\r\n  loading.value = true;\r\n  try {\r\n    console.log(`开始获取[${area}]追问分析，结果ID: ${resultId.value}`);\r\n    const response = await axios.get(`/api/bazi/followup/${resultId.value}/${area}`);\r\n    \r\n    if (response.data.code === 200) {\r\n      console.log('获取追问分析成功，响应数据:', response.data);\r\n      console.log('响应data字段详情:', JSON.stringify(response.data.data));\r\n      \r\n      // 处理分析结果为null或空的情况\r\n      if (!response.data.data) {\r\n        console.warn(`追问分析结果data为空: ${area}`);\r\n        const defaultMessage = `${followupOptions.value.find(o => o.id === area)?.name || area}分析正在生成中，请稍后刷新页面查看。`;\r\n        followupAnalysis.value[area] = defaultMessage;\r\n        return defaultMessage;\r\n      }\r\n      \r\n      // 提取分析内容，处理不同的响应格式\r\n      let analysisContent = null;\r\n      \r\n      if (response.data.data.analysis) {\r\n        // 标准格式：{area, analysis}\r\n        analysisContent = response.data.data.analysis;\r\n        console.log(`获取到标准格式分析结果, 类型: ${typeof analysisContent}, 长度: ${analysisContent ? analysisContent.length : 0}`);\r\n      } else if (typeof response.data.data === 'string') {\r\n        // 直接字符串格式\r\n        analysisContent = response.data.data;\r\n        console.log(`获取到字符串格式分析结果, 长度: ${analysisContent.length}`);\r\n      } else if (response.data.data[area]) {\r\n        // 对象格式：{area1: \"分析1\", area2: \"分析2\"}\r\n        analysisContent = response.data.data[area];\r\n        console.log(`获取到对象格式分析结果, 长度: ${analysisContent ? analysisContent.length : 0}`);\r\n      } else {\r\n        // 尝试遍历所有属性，看是否有匹配的内容\r\n        console.log('尝试查找匹配内容，data的所有键:', Object.keys(response.data.data));\r\n        for (const key in response.data.data) {\r\n          if (key.toLowerCase() === area.toLowerCase() || \r\n             (area === 'fiveYears' && key === 'future') ||\r\n             (area === 'future' && key === 'fiveYears')) {\r\n            analysisContent = response.data.data[key];\r\n            console.log(`找到匹配的键[${key}]，内容长度: ${analysisContent ? analysisContent.length : 0}`);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      \r\n      // 检查分析结果是否为null或空\r\n      if (!analysisContent) {\r\n        console.warn(`无法从响应中提取有效分析内容: ${area}`);\r\n        const defaultMessage = `${followupOptions.value.find(o => o.id === area)?.name || area}分析尚未生成，请稍后刷新页面查看。`;\r\n        followupAnalysis.value[area] = defaultMessage;\r\n        return defaultMessage;\r\n      }\r\n      \r\n      // 检查分析结果是否是空字符串\r\n      if (typeof analysisContent === 'string' && analysisContent.trim() === '') {\r\n        console.warn(`追问分析结果为空字符串: ${area}`);\r\n        const defaultMessage = `${followupOptions.value.find(o => o.id === area)?.name || area}分析正在生成中，请稍后刷新页面查看。`;\r\n        followupAnalysis.value[area] = defaultMessage;\r\n        return defaultMessage;\r\n      }\r\n      \r\n      // 记录有效的分析结果\r\n      console.log(`获取到有效的[${area}]分析结果，长度: ${analysisContent.length}`);\r\n      \r\n      // 存储并返回分析结果\r\n      followupAnalysis.value[area] = analysisContent;\r\n      return analysisContent;\r\n    } else {\r\n      console.error('获取追问分析失败:', response.data);\r\n      const errorMessage = `获取分析失败: ${response.data.message || '未知错误'}`;\r\n      followupAnalysis.value[area] = errorMessage;\r\n      return errorMessage;\r\n    }\r\n  } catch (error) {\r\n    console.error('获取追问分析出错:', error);\r\n    const errorMessage = `获取分析出错: ${error.message || '请稍后重试'}`;\r\n    followupAnalysis.value[area] = errorMessage;\r\n    return errorMessage;\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 检查已支付的追问\r\nconst checkPaidFollowups = async () => {\r\n  try {\r\n    const response = await axios.get(`/api/bazi/followup/list/${resultId.value}`);\r\n    \r\n    if (response.data.code === 200 && response.data.data.followups) {\r\n      const paidFollowups = response.data.data.followups;\r\n      \r\n      // 更新已支付的追问选项\r\n      followupOptions.value = followupOptions.value.map(option => {\r\n        const isPaid = paidFollowups.some(f => f.area === option.id);\r\n        if (isPaid) {\r\n          // 如果已支付，获取分析结果\r\n          getFollowupAnalysis(option.id);\r\n        }\r\n        return { ...option, paid: isPaid };\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('检查已支付追问出错:', error);\r\n  }\r\n};\r\n\r\n// 获取八字分析结果\r\nconst getBaziResult = async () => {\r\n  loading.value = true;\r\n  error.value = '';\r\n  \r\n  // 添加重试机制\r\n  let retryCount = 0;\r\n  const maxRetries = 3;\r\n  let success = false;\r\n  \r\n  while (retryCount < maxRetries && !success) {\r\n    try {\r\n      console.log(`获取八字分析结果 (尝试 ${retryCount + 1}/${maxRetries})，ID: ${resultId.value}`);\r\n      const response = await axios.get(`/api/bazi/result/${resultId.value}`);\r\n      \r\n      if (response.data.code === 200) {\r\n        // 将结果数据赋值给响应变量\r\n        const result = response.data.data;\r\n        \r\n        // 更新八字图数据\r\n        if (result.baziChart) {\r\n          baziChart.value = result.baziChart;\r\n          \r\n          // 计算年龄\r\n          if (result.baziChart.birthDate) {\r\n            const birthYear = parseInt(result.baziChart.birthDate.split('-')[0]);\r\n            const currentYear = new Date().getFullYear();\r\n            userAge.value = currentYear - birthYear;\r\n            console.log('用户年龄:', userAge.value);\r\n          }\r\n        }\r\n        \r\n        // 更新AI分析结果\r\n        if (result.aiAnalysis) {\r\n          aiAnalysis.value = result.aiAnalysis;\r\n        }\r\n        \r\n        // 更新用户信息\r\n        if (result.gender) {\r\n          userGender.value = result.gender === 'male' ? '男' : '女';\r\n        }\r\n        \r\n        if (result.birthTime) {\r\n          userBirthTime.value = result.birthTime;\r\n        }\r\n        \r\n        // 更新分析状态\r\n        analysisStatus.value = result.analysisStatus || 'completed';\r\n        analysisProgress.value = result.analysisProgress || 100;\r\n        \r\n        // 更新订单ID\r\n        orderId.value = result.orderId || '';\r\n        \r\n        // 标记为成功\r\n        success = true;\r\n        loading.value = false;\r\n        \r\n        // 检查是否有神煞数据\r\n        if (result.baziChart && result.baziChart.shenSha) {\r\n          shenShaData.value = result.baziChart.shenSha;\r\n        }\r\n        \r\n        // 检查是否有大运数据\r\n        if (result.baziChart && result.baziChart.daYun) {\r\n          daYunData.value = result.baziChart.daYun;\r\n        }\r\n        \r\n        // 检查是否有流年数据\r\n        if (result.baziChart && result.baziChart.flowingYears) {\r\n          flowingYearsData.value = result.baziChart.flowingYears;\r\n        }\r\n        \r\n        return true;\r\n      } else {\r\n        console.error('获取八字分析结果失败:', response.data.message);\r\n        error.value = response.data.message || '获取分析结果失败';\r\n        retryCount++;\r\n        await new Promise(resolve => setTimeout(resolve, 1000)); // 等待1秒后重试\r\n      }\r\n    } catch (e) {\r\n      console.error('获取八字分析结果出错:', e);\r\n      error.value = e.message || '获取分析结果出错';\r\n      \r\n      // 如果是404错误，可能是结果记录还未创建，尝试手动更新订单状态\r\n      if (e.response && e.response.status === 404) {\r\n        console.log('结果记录不存在，尝试手动更新订单状态');\r\n        \r\n        // 从resultId中提取orderId\r\n        let orderId = '';\r\n        if (resultId.value.startsWith('RES')) {\r\n          orderId = 'BZ' + resultId.value.substring(3);\r\n          console.log('从resultId提取的orderId:', orderId);\r\n          \r\n          try {\r\n            // 尝试手动更新订单状态\r\n            const manualResponse = await axios.get(`/api/order/manual_update/${orderId}`);\r\n            console.log('手动更新响应:', manualResponse.data);\r\n            \r\n            if (manualResponse.data.code === 200) {\r\n              console.log('手动更新成功，等待2秒后重试获取结果');\r\n              // 等待2秒后重试，给后端时间创建记录\r\n              await new Promise(resolve => setTimeout(resolve, 2000));\r\n            }\r\n          } catch (manualError) {\r\n            console.error('手动更新失败:', manualError);\r\n          }\r\n        }\r\n      }\r\n      \r\n      retryCount++;\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); // 等待1秒后重试\r\n    }\r\n  }\r\n  \r\n  if (!success) {\r\n    loading.value = false;\r\n    \r\n    // 如果所有重试都失败，显示手动刷新按钮\r\n    showManualRefresh.value = true;\r\n    \r\n    return false;\r\n  }\r\n  \r\n  return true;\r\n};\r\n\r\n// 添加缺失的函数\r\n// 初始化追问选项\r\nconst initFollowupOptions = () => {\r\n  // 根据用户年龄调整追问选项\r\n  if (userAge.value !== null) {\r\n    if (userAge.value < 6) {\r\n      // 为婴幼儿调整选项\r\n      followupOptions.value = followupOptions.value.filter(option => \r\n        ['health', 'personality', 'education', 'parents'].includes(option.id)\r\n      );\r\n    } else if (userAge.value < 18) {\r\n      // 为未成年人调整选项\r\n      followupOptions.value = followupOptions.value.filter(option => \r\n        !['marriage', 'career'].includes(option.id)\r\n      );\r\n    }\r\n  }\r\n  \r\n  console.log('初始化追问选项完成:', followupOptions.value);\r\n};\r\n\r\n// 加载已支付的追问分析结果\r\nconst loadFollowupResults = async () => {\r\n  try {\r\n    // 检查是否有结果ID\r\n    if (!resultId.value) {\r\n      console.warn('缺少结果ID，无法加载追问分析');\r\n      return;\r\n    }\r\n    \r\n    console.log('开始加载追问分析结果列表:', resultId.value);\r\n    \r\n    // 调用API获取已支付的追问列表\r\n    const response = await axios.get(`/api/bazi/followup/list/${resultId.value}`);\r\n    \r\n    if (response.data.code === 200 && response.data.data.followups) {\r\n      const paidFollowups = response.data.data.followups;\r\n      console.log('获取到的追问列表:', paidFollowups);\r\n      \r\n      // 更新已支付的追问选项\r\n      followupOptions.value = followupOptions.value.map(option => {\r\n        // 检查是否有匹配的追问分析\r\n        const isPaid = paidFollowups.some(f => {\r\n          // 尝试多种匹配方式\r\n          if (typeof f === 'object') {\r\n            // 对象格式：检查area字段\r\n            return f.area === option.id;\r\n          } else if (typeof f === 'string') {\r\n            // 字符串格式：直接比较\r\n            return f === option.id;\r\n          }\r\n          return false;\r\n        });\r\n        \r\n        if (isPaid) {\r\n          console.log(`发现已支付的追问: ${option.id}`);\r\n          // 如果已支付，获取分析结果\r\n          getFollowupAnalysis(option.id);\r\n        }\r\n        \r\n        return { ...option, paid: isPaid };\r\n      });\r\n      \r\n      console.log('更新后的追问选项:', followupOptions.value);\r\n    } else {\r\n      console.warn('获取追问列表失败或返回空列表');\r\n    }\r\n  } catch (error) {\r\n    console.error('加载追问分析结果出错:', error);\r\n    // 出错时不显示错误提示，静默失败\r\n  }\r\n};\r\n\r\n// 解析八字数据\r\nconst parseBaZiData = (data) => {\r\n  if (!data) return null;\r\n  \r\n  return {\r\n    yearPillar: data.yearPillar || { heavenlyStem: '未知', earthlyBranch: '未知' },\r\n    monthPillar: data.monthPillar || { heavenlyStem: '未知', earthlyBranch: '未知' },\r\n    dayPillar: data.dayPillar || { heavenlyStem: '未知', earthlyBranch: '未知' },\r\n    hourPillar: data.hourPillar || { heavenlyStem: '未知', earthlyBranch: '未知' },\r\n    shenSha: data.shenSha || {\r\n      dayChong: '未知',\r\n      zhiShen: '未知',\r\n      pengZuGan: '未知',\r\n      pengZuZhi: '未知',\r\n      xiShen: '未知',\r\n      fuShen: '未知',\r\n      caiShen: '未知',\r\n      benMing: [],\r\n      yearGan: [],\r\n      yearZhi: [],\r\n      dayGan: [],\r\n      dayZhi: []\r\n    },\r\n    daYun: data.daYun || {\r\n      startAge: 0,\r\n      startYear: 0,\r\n      isForward: true,\r\n      daYunList: []\r\n    },\r\n    flowingYears: data.flowingYears || []\r\n  };\r\n};\r\n\r\n// 添加分析状态检测函数\r\nconst isAnalysisItemLoading = (key) => {\r\n  if (!aiAnalysis.value) return true;\r\n  const value = aiAnalysis.value[key];\r\n  return !value || value === '暂无' || (value.includes && value.includes('正在分析'));\r\n};\r\n\r\n// 清理组件时移除定时器\r\nonUnmounted(() => {\r\n  if (analyzeTimer.value) {\r\n    clearInterval(analyzeTimer.value);\r\n    analyzeTimer.value = null;\r\n  }\r\n});\r\n\r\n// 刷新特定追问的分析结果\r\nconst reloadFollowupAnalysis = async (area) => {\r\n  if (!area) return;\r\n  \r\n  try {\r\n    isLoadingFollowup.value = true;\r\n    Toast.loading({\r\n      message: '正在刷新分析结果...',\r\n      duration: 0\r\n    });\r\n    \r\n    console.log(`刷新${area}分析结果`);\r\n    const analysis = await getFollowupAnalysis(area);\r\n    \r\n    if (analysis && typeof analysis === 'string' && analysis.length > 0) {\r\n      Toast.success('刷新成功');\r\n      console.log(`成功刷新${area}分析结果，长度: ${analysis.length}`);\r\n    } else {\r\n      Toast.fail('分析结果尚未生成完成');\r\n      console.warn(`刷新${area}分析结果失败或为空`);\r\n    }\r\n  } catch (error) {\r\n    console.error(`刷新${area}分析失败:`, error);\r\n    Toast.fail('刷新失败，请重试');\r\n  } finally {\r\n    isLoadingFollowup.value = false;\r\n    Toast.clear();\r\n  }\r\n};\r\n\r\n// 在data部分添加showManualRefresh变量\r\nconst showManualRefresh = ref(false);\r\n\r\n// 添加手动刷新函数\r\nconst manualRefresh = async () => {\r\n  showManualRefresh.value = false;\r\n  Toast.loading({\r\n    message: '正在重新获取分析结果...',\r\n    duration: 0,\r\n    forbidClick: true\r\n  });\r\n  \r\n  // 从resultId中提取orderId\r\n  let orderId = '';\r\n  if (resultId.value.startsWith('RES')) {\r\n    orderId = 'BZ' + resultId.value.substring(3);\r\n    console.log('从resultId提取的orderId:', orderId);\r\n    \r\n    try {\r\n      // 尝试手动更新订单状态\r\n      const manualResponse = await axios.get(`/api/order/manual_update/${orderId}`);\r\n      console.log('手动更新响应:', manualResponse.data);\r\n      \r\n      if (manualResponse.data.code === 200) {\r\n        console.log('手动更新成功，等待2秒后重试获取结果');\r\n        // 等待2秒后重试，给后端时间创建记录\r\n        await new Promise(resolve => setTimeout(resolve, 2000));\r\n        \r\n        // 重新获取结果\r\n        const success = await getBaziResult();\r\n        if (success) {\r\n          Toast.success('分析结果加载成功');\r\n        } else {\r\n          Toast.fail('获取分析结果失败，请稍后再试');\r\n        }\r\n      } else {\r\n        Toast.fail('手动更新失败: ' + (manualResponse.data.message || '未知错误'));\r\n      }\r\n    } catch (error) {\r\n      console.error('手动更新失败:', error);\r\n      Toast.fail('手动更新失败，请稍后再试');\r\n    }\r\n  } else {\r\n    // 直接重试获取结果\r\n    const success = await getBaziResult();\r\n    if (success) {\r\n      Toast.success('分析结果加载成功');\r\n    } else {\r\n      Toast.fail('获取分析结果失败，请稍后再试');\r\n    }\r\n  }\r\n  \r\n  Toast.clear();\r\n};\r\n\r\n// 在data部分添加error变量\r\nconst error = ref('');\r\n\r\n// 添加所有需要的变量定义\r\nconst baziChart = ref({});\r\nconst analysisStatus = ref('completed');\r\nconst analysisProgress = ref(100);\r\nconst orderId = ref('');\r\nconst userGender = ref('');\r\nconst userBirthTime = ref('');\r\nconst shenShaData = ref({});\r\nconst daYunData = ref({});\r\nconst flowingYearsData = ref([]);\r\n</script>\r\n\r\n<style scoped>\r\n.result-container {\r\n  padding-bottom: 20px;\r\n}\r\n\r\n.result-header {\r\n  text-align: center;\r\n  padding: 20px 0;\r\n  background-color: #f2f3f5;\r\n}\r\n\r\n.result-header h2 {\r\n  margin: 0;\r\n  font-size: 20px;\r\n  color: #323233;\r\n}\r\n\r\n.result-header p {\r\n  margin: 10px 0 0;\r\n  font-size: 14px;\r\n  color: #969799;\r\n}\r\n\r\n.bazi-chart {\r\n  padding: 20px 16px;\r\n}\r\n\r\n.bazi-chart h3 {\r\n  margin: 20px 0 10px;\r\n  color: #323233;\r\n}\r\n\r\n.four-pillars {\r\n  display: flex;\r\n  justify-content: space-around;\r\n  margin: 20px 0;\r\n}\r\n\r\n.pillar {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  background: #f5f7fa;\r\n  padding: 10px;\r\n  border-radius: 8px;\r\n  width: 80px;\r\n}\r\n\r\n.stem, .branch {\r\n  width: 40px;\r\n  height: 40px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n  margin: 4px 0;\r\n  border-radius: 4px;\r\n}\r\n\r\n.stem {\r\n  background: #1989fa;\r\n  color: white;\r\n}\r\n\r\n.branch {\r\n  background: #07c160;\r\n  color: white;\r\n}\r\n\r\n.label {\r\n  font-size: 12px;\r\n  color: #646566;\r\n  margin-top: 4px;\r\n}\r\n\r\n.nayin, .shishen, .wangshuai {\r\n  font-size: 12px;\r\n  color: #323233;\r\n  margin-top: 4px;\r\n}\r\n\r\n.five-elements {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin: 10px 0;\r\n}\r\n\r\n.element {\r\n  text-align: center;\r\n  flex: 1;\r\n}\r\n\r\n.element-name {\r\n  font-size: 14px;\r\n  color: #323233;\r\n}\r\n\r\n.element-value {\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n  color: #1989fa;\r\n  margin-top: 5px;\r\n}\r\n\r\n.flowing-years {\r\n  margin: 20px 0;\r\n}\r\n\r\n.ai-analysis {\r\n  padding: 20px 16px;\r\n}\r\n\r\n.analysis-section {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.analysis-section h3 {\r\n  margin: 0 0 10px;\r\n  color: #323233;\r\n}\r\n\r\n.analysis-section p {\r\n  margin: 0;\r\n  font-size: 14px;\r\n  color: #646566;\r\n  line-height: 1.6;\r\n}\r\n\r\n.action-buttons {\r\n  padding: 20px 16px;\r\n}\r\n\r\n.age-notice {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.shen-sha-info {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.da-yun-info {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.qi-yun-info {\r\n  margin: 0 0 10px;\r\n  font-size: 14px;\r\n  color: #646566;\r\n}\r\n\r\n.da-yun-table {\r\n  margin-top: 10px;\r\n}\r\n\r\n.placeholder {\r\n  background-color: #f2f3f5;\r\n  color: #969799;\r\n}\r\n\r\n/* 追问部分样式 */\r\n.followup-section {\r\n  margin-top: 20px;\r\n  padding: 15px;\r\n  background-color: #fff;\r\n  border-radius: 8px;\r\n}\r\n\r\n.section-title {\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n  margin-bottom: 10px;\r\n  color: #333;\r\n}\r\n\r\n.section-desc {\r\n  font-size: 14px;\r\n  color: #666;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.followup-options {\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  gap: 12px;\r\n}\r\n\r\n.followup-option {\r\n  background-color: #f5f7fa;\r\n  border-radius: 8px;\r\n  padding: 15px;\r\n  cursor: pointer;\r\n  transition: all 0.3s;\r\n}\r\n\r\n.followup-option:hover {\r\n  background-color: #e8f0fe;\r\n}\r\n\r\n.followup-option.paid {\r\n  background-color: #e6f7ff;\r\n  border: 1px solid #91d5ff;\r\n}\r\n\r\n.option-content {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.option-name {\r\n  font-size: 15px;\r\n  font-weight: 500;\r\n}\r\n\r\n.option-status {\r\n  font-size: 13px;\r\n  color: #ff6b00;\r\n}\r\n\r\n.followup-option.paid .option-status {\r\n  color: #52c41a;\r\n}\r\n\r\n.followup-result {\r\n  margin-top: 20px;\r\n  padding: 15px;\r\n  background-color: #f9f9f9;\r\n  border-radius: 8px;\r\n  border-left: 4px solid #1989fa;\r\n}\r\n\r\n.followup-result h3 {\r\n  font-size: 16px;\r\n  margin-bottom: 10px;\r\n  color: #333;\r\n}\r\n\r\n.analysis-content {\r\n  font-size: 14px;\r\n  line-height: 1.6;\r\n  color: #333;\r\n  white-space: pre-wrap;\r\n}\r\n\r\n.followup-dialog-content {\r\n  padding: 15px;\r\n  text-align: center;\r\n}\r\n\r\n/* 添加表格样式 */\r\n.custom-table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  border-spacing: 0;\r\n  margin: 10px 0;\r\n  background-color: #fff;\r\n  color: #323233;\r\n  font-size: 14px;\r\n}\r\n\r\n.custom-table th,\r\n.custom-table td {\r\n  padding: 8px 12px;\r\n  border-bottom: 1px solid #ebedf0;\r\n  text-align: center;\r\n}\r\n\r\n.custom-table th {\r\n  font-weight: 500;\r\n  background-color: #f7f8fa;\r\n  color: #646566;\r\n}\r\n\r\n.custom-table tr:hover {\r\n  background-color: #f2f3f5;\r\n}\r\n\r\n/* 添加分析状态相关样式 */\r\n.analysis-progress-notice {\r\n  margin: 10px 16px;\r\n  border-radius: 8px;\r\n}\r\n\r\n.analysis-progress {\r\n  width: 100%;\r\n}\r\n\r\n.analysis-progress p {\r\n  margin-bottom: 10px;\r\n  font-size: 14px;\r\n  color: #1989fa;\r\n}\r\n\r\n.loading-content {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 20px 0;\r\n  background-color: #f7f8fa;\r\n  border-radius: 8px;\r\n  margin: 10px 0;\r\n}\r\n\r\n.enhanced-analysis {\r\n  margin-bottom: 10px;\r\n  padding: 10px;\r\n  border-left: 3px solid #1989fa;\r\n  background-color: #f8f9ff;\r\n  border-radius: 4px;\r\n}\r\n\r\n.enhanced-analysis p {\r\n  color: #333;\r\n  line-height: 1.6;\r\n  white-space: pre-wrap;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.analysis-source {\r\n  text-align: right;\r\n  margin-top: 8px;\r\n}\r\n\r\n/* 高亮效果 */\r\n@keyframes highlight-pulse {\r\n  0% { box-shadow: 0 0 0 0 rgba(25, 137, 250, 0.7); }\r\n  70% { box-shadow: 0 0 0 10px rgba(25, 137, 250, 0); }\r\n  100% { box-shadow: 0 0 0 0 rgba(25, 137, 250, 0); }\r\n}\r\n\r\n.highlight-section {\r\n  animation: highlight-pulse 1.5s ease-in-out;\r\n  background-color: rgba(25, 137, 250, 0.08);\r\n  border-radius: 8px;\r\n  transition: background-color 0.5s ease;\r\n}\r\n\r\n.markdown-content {\r\n  white-space: pre-wrap;\r\n  line-height: 1.6;\r\n  font-size: 14px;\r\n  color: #333;\r\n}\r\n\r\n.markdown-content h1, \r\n.markdown-content h2, \r\n.markdown-content h3, \r\n.markdown-content h4, \r\n.markdown-content h5, \r\n.markdown-content h6 {\r\n  margin-top: 1em;\r\n  margin-bottom: 0.5em;\r\n  font-weight: bold;\r\n  color: #333;\r\n}\r\n\r\n.markdown-content h1 {\r\n  font-size: 1.8em;\r\n}\r\n\r\n.markdown-content h2 {\r\n  font-size: 1.5em;\r\n}\r\n\r\n.markdown-content h3 {\r\n  font-size: 1.3em;\r\n}\r\n\r\n.markdown-content h4 {\r\n  font-size: 1.1em;\r\n}\r\n\r\n.markdown-content p {\r\n  margin-bottom: 1em;\r\n}\r\n\r\n.markdown-content ul, \r\n.markdown-content ol {\r\n  margin-left: 2em;\r\n  margin-bottom: 1em;\r\n}\r\n\r\n.markdown-content ul {\r\n  list-style-type: disc;\r\n}\r\n\r\n.markdown-content ol {\r\n  list-style-type: decimal;\r\n}\r\n\r\n.markdown-content li {\r\n  margin-bottom: 0.5em;\r\n}\r\n\r\n.markdown-content strong {\r\n  font-weight: bold;\r\n}\r\n\r\n.markdown-content em {\r\n  font-style: italic;\r\n}\r\n\r\n.markdown-content blockquote {\r\n  border-left: 4px solid #ddd;\r\n  padding-left: 1em;\r\n  margin-left: 0;\r\n  color: #666;\r\n}\r\n\r\n.markdown-content hr {\r\n  height: 1px;\r\n  background-color: #ddd;\r\n  border: none;\r\n  margin: 1.5em 0;\r\n}\r\n\r\n/* 添加手动刷新按钮样式 */\r\n.manual-refresh-container {\r\n  padding: 20px;\r\n  text-align: center;\r\n}\r\n.refresh-tip {\r\n  margin-top: 10px;\r\n  color: #999;\r\n  font-size: 14px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
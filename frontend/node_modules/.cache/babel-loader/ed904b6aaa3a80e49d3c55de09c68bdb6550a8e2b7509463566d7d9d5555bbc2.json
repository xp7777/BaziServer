{"ast":null,"code":"import { ref, onMounted } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport { Toast } from 'vant';\nimport axios from 'axios';\nexport default {\n  name: 'PaymentPage',\n  setup() {\n    const route = useRoute();\n    const router = useRouter();\n\n    // 从路由参数获取订单信息\n    const gender = route.query.gender;\n    const calendarType = route.query.calendarType;\n    const birthDate = route.query.birthDate;\n    const birthTime = route.query.birthTime;\n    const birthPlace = route.query.birthPlace;\n    const livingPlace = route.query.livingPlace;\n    const focusAreas = route.query.focusAreas?.split(',') || [];\n\n    // 支付相关状态\n    const orderId = ref('BZ1749371719072');\n    const createTime = ref(new Date().toLocaleString());\n    const paymentMethod = ref('wechat');\n    const showQRCode = ref(false);\n    const qrCodeUrl = ref('');\n    const isProcessing = ref(false);\n    onMounted(() => {\n      // 实际项目中这里应该调用API创建订单\n      console.log('订单创建成功', {\n        gender,\n        calendarType,\n        birthDate,\n        birthTime,\n        birthPlace,\n        livingPlace,\n        focusAreas\n      });\n    });\n    const onClickLeft = () => {\n      router.go(-1);\n    };\n    const onPayment = () => {\n      // 根据支付方式获取真实二维码\n      Toast.loading({\n        message: '正在获取支付二维码...',\n        duration: 0,\n        forbidClick: true\n      });\n\n      // 创建真实支付订单并获取支付二维码\n      const createPayment = async () => {\n        try {\n          const paymentData = {\n            paymentMethod: paymentMethod.value,\n            birthDate,\n            birthTime,\n            gender,\n            focusAreas,\n            calendarType,\n            birthPlace,\n            livingPlace\n          };\n\n          // 调用真实支付API\n          const response = await axios.post(`/api/order/create/payment/${orderId.value}`, paymentData);\n          if (response.data.code === 200) {\n            Toast.clear();\n            if (response.data.data.qrCodeBase64) {\n              // 直接使用Base64二维码图片\n              qrCodeUrl.value = `data:image/png;base64,${response.data.data.qrCodeBase64}`;\n              showQRCode.value = true;\n            } else if (response.data.data.qrCodeUrl) {\n              // 使用外部URL\n              window.open(response.data.data.qrCodeUrl, '_blank');\n            } else {\n              Toast.fail('未获取到支付二维码');\n            }\n          } else {\n            Toast.fail(response.data.message || '获取支付二维码失败');\n          }\n        } catch (error) {\n          console.error('获取支付二维码出错:', error);\n          Toast.fail('获取支付二维码失败');\n        }\n      };\n      createPayment();\n    };\n    const onPaymentSuccess = async () => {\n      if (isProcessing.value) {\n        return false;\n      }\n      isProcessing.value = true;\n      Toast.loading({\n        message: '正在查询支付结果...',\n        duration: 0,\n        forbidClick: true\n      });\n      try {\n        // 查询支付结果API\n        console.log('查询支付结果:', orderId.value);\n        const response = await axios.get(`/api/order/query/${orderId.value}`);\n        console.log('支付查询响应:', response.data);\n        if (response.data.code === 200 && response.data.data.status === 'paid') {\n          Toast.success('支付成功');\n          showQRCode.value = false;\n\n          // 使用服务器返回的resultId\n          const resultId = response.data.data.resultId;\n          if (!resultId) {\n            console.error('服务器未返回有效的resultId');\n            Toast.fail('获取结果ID失败，请联系客服');\n            return;\n          }\n          console.log('获取到结果ID:', resultId);\n\n          // 请求立即计算完整的命盘数据\n          try {\n            Toast.loading({\n              message: '正在生成八字命盘...',\n              duration: 0,\n              forbidClick: true\n            });\n\n            // 修改：使用正确的update API端点\n            console.log('正在请求更新八字数据:', resultId);\n            const updateResponse = await axios.post(`http://localhost:5000/api/bazi/update/${resultId}`, {\n              birthDate,\n              birthTime,\n              gender,\n              calendarType,\n              birthPlace,\n              livingPlace,\n              focusAreas,\n              forceRecalculate: true,\n              // 强制重新计算基础数据\n              generateShenshaData: true,\n              // 生成神煞数据\n              generateDayunData: true,\n              // 生成大运数据 \n              generateLiunianData: true,\n              // 生成流年数据\n              useDeepseekAPI: true // 使用DeepSeek API进行分析\n            });\n            console.log('八字数据更新响应:', updateResponse.data);\n            if (updateResponse.data.code === 200) {\n              Toast.success('命盘数据生成中');\n\n              // 确保延迟足够长，以便后端完成八字数据处理\n              setTimeout(async () => {\n                try {\n                  console.log('正在请求八字深度分析:', resultId);\n                  const analyzeResponse = await axios.post(`http://localhost:5000/api/bazi/analyze/${resultId}`, {\n                    useDeepseekAPI: true\n                  });\n                  console.log('八字深度分析响应:', analyzeResponse.data);\n                  Toast.success('命盘分析已开始，请稍后刷新查看结果');\n                } catch (analyzeError) {\n                  console.error('深度分析请求失败:', analyzeError);\n                  Toast.fail('命盘分析请求失败');\n                }\n              }, 3000); // 延长等待时间到3秒\n            } else {\n              console.error('八字数据更新失败:', updateResponse.data.message);\n              Toast.fail('命盘计算请求失败: ' + (updateResponse.data.message || '未知错误'));\n            }\n          } catch (calcError) {\n            console.error('命盘计算请求失败:', calcError);\n            Toast.fail('命盘计算请求失败: ' + (calcError.message || '未知错误'));\n          }\n\n          // 跳转到结果页面，传递必要参数\n          router.push({\n            path: `/result/${resultId}`,\n            query: {\n              birthDate,\n              birthTime,\n              gender,\n              birthPlace,\n              livingPlace,\n              originalOrderId: orderId.value // 传递原始订单ID\n            }\n          });\n        } else {\n          Toast.fail(response.data.message || '支付处理失败');\n        }\n      } catch (error) {\n        console.error('支付处理出错:', error);\n\n        // 错误处理：尝试构造默认结果ID\n        Toast.clear();\n        Toast.fail('支付处理出错，将使用默认结果ID');\n\n        // 构造默认结果ID\n        const defaultResultId = 'RES' + orderId.value.replace(/^BZ/, '');\n        console.log('使用默认结果ID:', defaultResultId);\n\n        // 即使出错也跳转到结果页面，使用默认结果ID\n        router.push({\n          path: `/result/${defaultResultId}`,\n          query: {\n            birthDate,\n            birthTime,\n            gender,\n            birthPlace,\n            livingPlace,\n            originalOrderId: orderId.value // 传递原始订单ID\n          }\n        });\n      } finally {\n        isProcessing.value = false;\n      }\n    };\n    return {\n      orderId,\n      createTime,\n      paymentMethod,\n      showQRCode,\n      qrCodeUrl,\n      isProcessing,\n      onClickLeft,\n      onPayment,\n      onPaymentSuccess\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","useRoute","useRouter","Toast","axios","name","setup","route","router","gender","query","calendarType","birthDate","birthTime","birthPlace","livingPlace","focusAreas","split","orderId","createTime","Date","toLocaleString","paymentMethod","showQRCode","qrCodeUrl","isProcessing","console","log","onClickLeft","go","onPayment","loading","message","duration","forbidClick","createPayment","paymentData","value","response","post","data","code","clear","qrCodeBase64","window","open","fail","error","onPaymentSuccess","get","status","success","resultId","updateResponse","forceRecalculate","generateShenshaData","generateDayunData","generateLiunianData","useDeepseekAPI","setTimeout","analyzeResponse","analyzeError","calcError","push","path","originalOrderId","defaultResultId","replace"],"sources":["D:\\Python\\20250603开发八字命理AI指导功能页码\\开发八字命理AI指导功能页码\\frontend\\src\\Payment.vue"],"sourcesContent":["<template>\n  <div class=\"payment-container\">\n    <van-nav-bar\n      title=\"订单支付\"\n      left-text=\"返回\"\n      left-arrow\n      @click-left=\"onClickLeft\"\n    />\n    \n    <van-card\n      title=\"八字命理AI人生指导\"\n      desc=\"个性化人生指导建议\"\n      price=\"9.90\"\n      currency=\"¥\"\n    >\n      <template #tags>\n        <van-tag plain type=\"primary\">专业分析</van-tag>\n        <van-tag plain type=\"success\">AI解读</van-tag>\n        <van-tag plain type=\"warning\">PDF报告</van-tag>\n      </template>\n    </van-card>\n    \n    <van-cell-group inset title=\"订单信息\">\n      <van-cell title=\"订单编号\" :value=\"orderId\" />\n      <van-cell title=\"创建时间\" :value=\"createTime\" />\n      <van-cell title=\"支付金额\" value=\"¥9.90\" />\n    </van-cell-group>\n    \n    <van-cell-group inset title=\"选择支付方式\">\n      <van-cell clickable @click=\"paymentMethod = 'wechat'\">\n        <template #title>\n          <div class=\"payment-method\">\n            <van-icon name=\"wechat\" color=\"#07C160\" size=\"24\" />\n            <span class=\"payment-name\">微信支付</span>\n          </div>\n        </template>\n        <template #right-icon>\n          <van-radio :name=\"'wechat'\" :checked=\"paymentMethod === 'wechat'\" />\n        </template>\n      </van-cell>\n      \n      <van-cell clickable @click=\"paymentMethod = 'alipay'\">\n        <template #title>\n          <div class=\"payment-method\">\n            <van-icon name=\"alipay\" color=\"#1677FF\" size=\"24\" />\n            <span class=\"payment-name\">支付宝</span>\n          </div>\n        </template>\n        <template #right-icon>\n          <van-radio :name=\"'alipay'\" :checked=\"paymentMethod === 'alipay'\" />\n        </template>\n      </van-cell>\n    </van-cell-group>\n    \n    <div class=\"payment-action\">\n      <van-button round block type=\"primary\" @click=\"onPayment\">\n        立即支付\n      </van-button>\n    </div>\n    \n    <van-popup :show=\"showQRCode\" @update:show=\"showQRCode = $event\" round>\n      <div class=\"qrcode-container\">\n        <h3>请扫码支付</h3>\n        <div class=\"qrcode\">\n          <iframe v-if=\"qrCodeUrl\" :src=\"qrCodeUrl\" frameborder=\"0\" width=\"200\" height=\"200\"></iframe>\n          <div v-else class=\"qrcode-placeholder\">\n            <p>正在加载支付二维码...</p>\n          </div>\n        </div>\n        <p>支付金额: ¥9.90</p>\n        <van-button type=\"primary\" block @click=\"onPaymentSuccess\">\n          支付完成\n        </van-button>\n      </div>\n    </van-popup>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport { Toast } from 'vant';\nimport axios from 'axios';\n\nexport default {\n  name: 'PaymentPage',\n  setup() {\n    const route = useRoute();\n    const router = useRouter();\n    \n    // 从路由参数获取订单信息\n    const gender = route.query.gender;\n    const calendarType = route.query.calendarType;\n    const birthDate = route.query.birthDate;\n    const birthTime = route.query.birthTime;\n    const birthPlace = route.query.birthPlace;\n    const livingPlace = route.query.livingPlace;\n    const focusAreas = route.query.focusAreas?.split(',') || [];\n    \n    // 支付相关状态\n    const orderId = ref('BZ1749371719072');\n    const createTime = ref(new Date().toLocaleString());\n    const paymentMethod = ref('wechat');\n    const showQRCode = ref(false);\n    const qrCodeUrl = ref('');\n    const isProcessing = ref(false);\n    \n    onMounted(() => {\n      // 实际项目中这里应该调用API创建订单\n      console.log('订单创建成功', {\n        gender,\n        calendarType,\n        birthDate,\n        birthTime,\n        birthPlace,\n        livingPlace,\n        focusAreas\n      });\n    });\n    \n    const onClickLeft = () => {\n      router.go(-1);\n    };\n    \n    const onPayment = () => {\n      // 根据支付方式获取真实二维码\n      Toast.loading({\n        message: '正在获取支付二维码...',\n        duration: 0,\n        forbidClick: true\n      });\n      \n      // 创建真实支付订单并获取支付二维码\n      const createPayment = async () => {\n        try {\n          const paymentData = {\n            paymentMethod: paymentMethod.value,\n            birthDate,\n            birthTime,\n            gender,\n            focusAreas,\n            calendarType,\n            birthPlace,\n            livingPlace\n          };\n          \n          // 调用真实支付API\n          const response = await axios.post(`/api/order/create/payment/${orderId.value}`, paymentData);\n          \n          if (response.data.code === 200) {\n            Toast.clear();\n            \n            if (response.data.data.qrCodeBase64) {\n              // 直接使用Base64二维码图片\n              qrCodeUrl.value = `data:image/png;base64,${response.data.data.qrCodeBase64}`;\n              showQRCode.value = true;\n            } else if (response.data.data.qrCodeUrl) {\n              // 使用外部URL\n              window.open(response.data.data.qrCodeUrl, '_blank');\n            } else {\n              Toast.fail('未获取到支付二维码');\n            }\n          } else {\n            Toast.fail(response.data.message || '获取支付二维码失败');\n          }\n        } catch (error) {\n          console.error('获取支付二维码出错:', error);\n          Toast.fail('获取支付二维码失败');\n        }\n      };\n      \n      createPayment();\n    };\n    \n    const onPaymentSuccess = async () => {\n      if (isProcessing.value) {\n        return false;\n      }\n      \n      isProcessing.value = true;\n      Toast.loading({\n        message: '正在查询支付结果...',\n        duration: 0,\n        forbidClick: true\n      });\n      \n      try {\n        // 查询支付结果API\n        console.log('查询支付结果:', orderId.value);\n        \n        const response = await axios.get(`/api/order/query/${orderId.value}`);\n        \n        console.log('支付查询响应:', response.data);\n        \n        if (response.data.code === 200 && response.data.data.status === 'paid') {\n          Toast.success('支付成功');\n          showQRCode.value = false;\n          \n          // 使用服务器返回的resultId\n          const resultId = response.data.data.resultId;\n          \n          if (!resultId) {\n            console.error('服务器未返回有效的resultId');\n            Toast.fail('获取结果ID失败，请联系客服');\n            return;\n          }\n          \n          console.log('获取到结果ID:', resultId);\n          \n          // 请求立即计算完整的命盘数据\n          try {\n            Toast.loading({\n              message: '正在生成八字命盘...',\n              duration: 0,\n              forbidClick: true\n            });\n            \n            // 修改：使用正确的update API端点\n            console.log('正在请求更新八字数据:', resultId);\n            const updateResponse = await axios.post(`http://localhost:5000/api/bazi/update/${resultId}`, {\n              birthDate,\n              birthTime,\n              gender,\n              calendarType,\n              birthPlace,\n              livingPlace,\n              focusAreas,\n              forceRecalculate: true,        // 强制重新计算基础数据\n              generateShenshaData: true,     // 生成神煞数据\n              generateDayunData: true,       // 生成大运数据 \n              generateLiunianData: true,     // 生成流年数据\n              useDeepseekAPI: true           // 使用DeepSeek API进行分析\n            });\n            \n            console.log('八字数据更新响应:', updateResponse.data);\n            \n            if (updateResponse.data.code === 200) {\n              Toast.success('命盘数据生成中');\n              \n              // 确保延迟足够长，以便后端完成八字数据处理\n              setTimeout(async () => {\n                try {\n                  console.log('正在请求八字深度分析:', resultId);\n                  const analyzeResponse = await axios.post(`http://localhost:5000/api/bazi/analyze/${resultId}`, {\n                    useDeepseekAPI: true\n                  });\n                  console.log('八字深度分析响应:', analyzeResponse.data);\n                  Toast.success('命盘分析已开始，请稍后刷新查看结果');\n                } catch (analyzeError) {\n                  console.error('深度分析请求失败:', analyzeError);\n                  Toast.fail('命盘分析请求失败');\n                }\n              }, 3000); // 延长等待时间到3秒\n            } else {\n              console.error('八字数据更新失败:', updateResponse.data.message);\n              Toast.fail('命盘计算请求失败: ' + (updateResponse.data.message || '未知错误'));\n            }\n          } catch (calcError) {\n            console.error('命盘计算请求失败:', calcError);\n            Toast.fail('命盘计算请求失败: ' + (calcError.message || '未知错误'));\n          }\n          \n          // 跳转到结果页面，传递必要参数\n          router.push({\n            path: `/result/${resultId}`,\n            query: {\n              birthDate,\n              birthTime,\n              gender,\n              birthPlace,\n              livingPlace,\n              originalOrderId: orderId.value // 传递原始订单ID\n            }\n          });\n        } else {\n          Toast.fail(response.data.message || '支付处理失败');\n        }\n      } catch (error) {\n        console.error('支付处理出错:', error);\n        \n        // 错误处理：尝试构造默认结果ID\n        Toast.clear();\n        Toast.fail('支付处理出错，将使用默认结果ID');\n        \n        // 构造默认结果ID\n        const defaultResultId = 'RES' + orderId.value.replace(/^BZ/, '');\n        console.log('使用默认结果ID:', defaultResultId);\n        \n        // 即使出错也跳转到结果页面，使用默认结果ID\n        router.push({\n          path: `/result/${defaultResultId}`,\n          query: {\n            birthDate,\n            birthTime,\n            gender,\n            birthPlace,\n            livingPlace,\n            originalOrderId: orderId.value // 传递原始订单ID\n          }\n        });\n      } finally {\n        isProcessing.value = false;\n      }\n    };\n    \n    return {\n      orderId,\n      createTime,\n      paymentMethod,\n      showQRCode,\n      qrCodeUrl,\n      isProcessing,\n      onClickLeft,\n      onPayment,\n      onPaymentSuccess\n    };\n  }\n};\n</script>\n\n<style scoped>\n.payment-container {\n  padding-bottom: 20px;\n}\n\n.payment-method {\n  display: flex;\n  align-items: center;\n}\n\n.payment-name {\n  margin-left: 10px;\n}\n\n.payment-action {\n  padding: 20px 16px;\n}\n\n.qrcode-container {\n  padding: 20px;\n  text-align: center;\n  width: 280px;\n}\n\n.qrcode {\n  width: 200px;\n  height: 200px;\n  margin: 20px auto;\n  background-color: #f2f3f5;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: 1px solid #ebedf0;\n  border-radius: 4px;\n  overflow: hidden;\n}\n\n.qrcode iframe {\n  border: none;\n  width: 100%;\n  height: 100%;\n}\n\n.qrcode img {\n  max-width: 100%;\n  max-height: 100%;\n}\n\n.qrcode-placeholder {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  color: #969799;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
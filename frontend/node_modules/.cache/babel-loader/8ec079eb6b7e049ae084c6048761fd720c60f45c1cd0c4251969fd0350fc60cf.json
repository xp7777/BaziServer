{"ast":null,"code":"import axios from 'axios';\n\n// 创建一个axios实例\nconst http = axios.create({\n  baseURL: 'http://localhost:5000',\n  // 后端API基础URL\n  timeout: 10000,\n  // 请求超时时间\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器 - 添加token\nhttp.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    // 确保token格式正确，不要添加Bearer前缀（后端可能已经处理）\n    config.headers['Authorization'] = token;\n  }\n  return config;\n}, error => {\n  console.error('请求拦截器错误:', error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器 - 处理错误\nhttp.interceptors.response.use(response => {\n  return response;\n}, error => {\n  console.error('API请求错误:', error);\n  // 根据错误状态码处理特殊情况\n  if (error.response) {\n    switch (error.response.status) {\n      case 401:\n        console.log('未授权，请重新登录');\n        // 可以在这里处理登出逻辑\n        break;\n      case 404:\n        console.log('请求的资源不存在');\n        break;\n      case 500:\n        console.log('服务器错误');\n        break;\n      default:\n        console.log(`未知错误: ${error.response.status}`);\n    }\n  } else {\n    console.log('网络错误或服务器未响应');\n  }\n  return Promise.reject(error);\n});\nexport default http;","map":{"version":3,"names":["axios","http","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","error","console","Promise","reject","response","status","log"],"sources":["C:/Users/123/Desktop/开发八字命理AI指导功能页码/frontend/src/api/http.js"],"sourcesContent":["import axios from 'axios';\n\n// 创建一个axios实例\nconst http = axios.create({\n  baseURL: 'http://localhost:5000', // 后端API基础URL\n  timeout: 10000, // 请求超时时间\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器 - 添加token\nhttp.interceptors.request.use(\n  config => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      // 确保token格式正确，不要添加Bearer前缀（后端可能已经处理）\n      config.headers['Authorization'] = token;\n    }\n    return config;\n  },\n  error => {\n    console.error('请求拦截器错误:', error);\n    return Promise.reject(error);\n  }\n);\n\n// 响应拦截器 - 处理错误\nhttp.interceptors.response.use(\n  response => {\n    return response;\n  },\n  error => {\n    console.error('API请求错误:', error);\n    // 根据错误状态码处理特殊情况\n    if (error.response) {\n      switch (error.response.status) {\n        case 401:\n          console.log('未授权，请重新登录');\n          // 可以在这里处理登出逻辑\n          break;\n        case 404:\n          console.log('请求的资源不存在');\n          break;\n        case 500:\n          console.log('服务器错误');\n          break;\n        default:\n          console.log(`未知错误: ${error.response.status}`);\n      }\n    } else {\n      console.log('网络错误或服务器未响应');\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default http; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAAC;EACxBC,OAAO,EAAE,uBAAuB;EAAE;EAClCC,OAAO,EAAE,KAAK;EAAE;EAChBC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAJ,IAAI,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAC3BC,MAAM,IAAI;EACR,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACT;IACAD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAGK,KAAK;EACzC;EACA,OAAOD,MAAM;AACf,CAAC,EACDI,KAAK,IAAI;EACPC,OAAO,CAACD,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;EAChC,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAZ,IAAI,CAACK,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC5BS,QAAQ,IAAI;EACV,OAAOA,QAAQ;AACjB,CAAC,EACDJ,KAAK,IAAI;EACPC,OAAO,CAACD,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;EAChC;EACA,IAAIA,KAAK,CAACI,QAAQ,EAAE;IAClB,QAAQJ,KAAK,CAACI,QAAQ,CAACC,MAAM;MAC3B,KAAK,GAAG;QACNJ,OAAO,CAACK,GAAG,CAAC,WAAW,CAAC;QACxB;QACA;MACF,KAAK,GAAG;QACNL,OAAO,CAACK,GAAG,CAAC,UAAU,CAAC;QACvB;MACF,KAAK,GAAG;QACNL,OAAO,CAACK,GAAG,CAAC,OAAO,CAAC;QACpB;MACF;QACEL,OAAO,CAACK,GAAG,CAAC,SAASN,KAAK,CAACI,QAAQ,CAACC,MAAM,EAAE,CAAC;IACjD;EACF,CAAC,MAAM;IACLJ,OAAO,CAACK,GAAG,CAAC,aAAa,CAAC;EAC5B;EACA,OAAOJ,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeZ,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
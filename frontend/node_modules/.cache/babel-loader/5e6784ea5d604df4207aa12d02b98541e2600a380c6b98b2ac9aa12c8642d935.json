{"ast":null,"code":"import { ref, onMounted } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport { Toast } from 'vant';\nimport axios from 'axios';\nexport default {\n  name: 'PaymentPage',\n  setup() {\n    const route = useRoute();\n    const router = useRouter();\n\n    // 从路由参数获取订单信息\n    const gender = route.query.gender;\n    const calendarType = route.query.calendarType;\n    const birthDate = route.query.birthDate;\n    const birthTime = route.query.birthTime;\n    const birthPlace = route.query.birthPlace;\n    const livingPlace = route.query.livingPlace;\n    const focusAreas = route.query.focusAreas?.split(',') || [];\n\n    // 支付相关状态\n    const orderId = ref('BZ1749371719072');\n    const createTime = ref(new Date().toLocaleString());\n    const paymentMethod = ref('wechat');\n    const showQRCode = ref(false);\n    const qrCodeUrl = ref('');\n    const isProcessing = ref(false);\n    onMounted(() => {\n      // 实际项目中这里应该调用API创建订单\n      console.log('订单创建成功', {\n        gender,\n        calendarType,\n        birthDate,\n        birthTime,\n        birthPlace,\n        livingPlace,\n        focusAreas\n      });\n    });\n    const onClickLeft = () => {\n      router.go(-1);\n    };\n    const onPayment = () => {\n      // 根据支付方式显示不同的二维码\n      if (paymentMethod.value === 'wechat') {\n        // 使用本地HTML文件作为微信支付二维码\n        qrCodeUrl.value = '/images/wechat-qrcode.html';\n      } else {\n        // 使用本地HTML文件作为支付宝二维码\n        qrCodeUrl.value = '/images/alipay-qrcode.html';\n      }\n      showQRCode.value = true;\n\n      // 实际项目中这里应该调用API获取支付二维码\n      console.log('发起支付请求', {\n        orderId: orderId.value,\n        paymentMethod: paymentMethod.value\n      });\n\n      // 由于我们只是演示，记录一下二维码URL\n      console.log(`使用${paymentMethod.value}支付，二维码URL:`, qrCodeUrl.value);\n    };\n    const onPaymentSuccess = async () => {\n      if (isProcessing.value) {\n        return; // 防止重复点击\n      }\n      isProcessing.value = true;\n      Toast.loading({\n        message: '正在处理支付...',\n        duration: 0,\n        forbidClick: true\n      });\n      try {\n        // 调用模拟支付API\n        console.log('调用模拟支付API:', orderId.value);\n        const paymentData = {\n          birthDate,\n          birthTime,\n          gender,\n          focusAreas,\n          calendarType,\n          birthPlace,\n          livingPlace,\n          forceRecalculate: true // 强制重新计算所有数据\n        };\n        const response = await axios.post(`http://localhost:5000/api/order/mock/pay/${orderId.value}`, paymentData, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        console.log('模拟支付API响应:', response.data);\n        if (response.data.code === 200) {\n          Toast.success('支付成功');\n          showQRCode.value = false;\n\n          // 使用服务器返回的resultId\n          const resultId = response.data.data.resultId;\n          if (!resultId) {\n            console.error('服务器未返回有效的resultId');\n            Toast.fail('获取结果ID失败，请联系客服');\n            return;\n          }\n          console.log('获取到结果ID:', resultId);\n\n          // 请求立即计算完整的命盘数据\n          try {\n            Toast.loading({\n              message: '正在生成八字命盘...',\n              duration: 0,\n              forbidClick: true\n            });\n\n            // 使用update接口更新数据并触发计算\n            await axios.post(`http://localhost:5000/api/bazi/update/${resultId}`, {\n              birthDate,\n              birthTime,\n              gender,\n              calendarType,\n              birthPlace,\n              livingPlace,\n              focusAreas,\n              forceRecalculate: true,\n              generateShenshaData: true,\n              generateDayunData: true,\n              generateLiunianData: true,\n              useDeepseekAPI: true // 使用DeepSeek API进行分析\n            });\n            Toast.success('命盘数据生成中');\n\n            // 再次调用分析接口，确保触发深度分析\n            setTimeout(async () => {\n              try {\n                await axios.post(`http://localhost:5000/api/bazi/analyze/${resultId}`, {\n                  useDeepseekAPI: true\n                });\n                console.log('已触发八字深度分析');\n              } catch (analyzeError) {\n                console.error('深度分析请求失败:', analyzeError);\n              }\n            }, 1000);\n          } catch (calcError) {\n            console.error('命盘计算请求失败:', calcError);\n            // 即使计算请求失败，也继续跳转到结果页面\n          }\n\n          // 跳转到结果页面，传递必要参数\n          router.push({\n            path: `/result/${resultId}`,\n            query: {\n              birthDate,\n              birthTime,\n              gender,\n              birthPlace,\n              livingPlace,\n              originalOrderId: orderId.value // 传递原始订单ID\n            }\n          });\n        } else {\n          Toast.fail(response.data.message || '支付处理失败');\n        }\n      } catch (error) {\n        console.error('支付处理出错:', error);\n\n        // 错误处理：尝试构造默认结果ID\n        Toast.clear();\n        Toast.fail('支付处理出错，将使用默认结果ID');\n\n        // 构造默认结果ID\n        const defaultResultId = 'RES' + orderId.value.replace(/^BZ/, '');\n        console.log('使用默认结果ID:', defaultResultId);\n\n        // 即使出错也跳转到结果页面，使用默认结果ID\n        router.push({\n          path: `/result/${defaultResultId}`,\n          query: {\n            birthDate,\n            birthTime,\n            gender,\n            birthPlace,\n            livingPlace,\n            originalOrderId: orderId.value // 传递原始订单ID\n          }\n        });\n      } finally {\n        isProcessing.value = false;\n      }\n    };\n    return {\n      orderId,\n      createTime,\n      paymentMethod,\n      showQRCode,\n      qrCodeUrl,\n      isProcessing,\n      onClickLeft,\n      onPayment,\n      onPaymentSuccess\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","useRoute","useRouter","Toast","axios","name","setup","route","router","gender","query","calendarType","birthDate","birthTime","birthPlace","livingPlace","focusAreas","split","orderId","createTime","Date","toLocaleString","paymentMethod","showQRCode","qrCodeUrl","isProcessing","console","log","onClickLeft","go","onPayment","value","onPaymentSuccess","loading","message","duration","forbidClick","paymentData","forceRecalculate","response","post","headers","data","code","success","resultId","error","fail","generateShenshaData","generateDayunData","generateLiunianData","useDeepseekAPI","setTimeout","analyzeError","calcError","push","path","originalOrderId","clear","defaultResultId","replace"],"sources":["D:\\Python\\20250603开发八字命理AI指导功能页码\\开发八字命理AI指导功能页码\\frontend\\src\\Payment.vue"],"sourcesContent":["<template>\n  <div class=\"payment-container\">\n    <van-nav-bar\n      title=\"订单支付\"\n      left-text=\"返回\"\n      left-arrow\n      @click-left=\"onClickLeft\"\n    />\n    \n    <van-card\n      title=\"八字命理AI人生指导\"\n      desc=\"个性化人生指导建议\"\n      price=\"9.90\"\n      currency=\"¥\"\n    >\n      <template #tags>\n        <van-tag plain type=\"primary\">专业分析</van-tag>\n        <van-tag plain type=\"success\">AI解读</van-tag>\n        <van-tag plain type=\"warning\">PDF报告</van-tag>\n      </template>\n    </van-card>\n    \n    <van-cell-group inset title=\"订单信息\">\n      <van-cell title=\"订单编号\" :value=\"orderId\" />\n      <van-cell title=\"创建时间\" :value=\"createTime\" />\n      <van-cell title=\"支付金额\" value=\"¥9.90\" />\n    </van-cell-group>\n    \n    <van-cell-group inset title=\"选择支付方式\">\n      <van-cell clickable @click=\"paymentMethod = 'wechat'\">\n        <template #title>\n          <div class=\"payment-method\">\n            <van-icon name=\"wechat\" color=\"#07C160\" size=\"24\" />\n            <span class=\"payment-name\">微信支付</span>\n          </div>\n        </template>\n        <template #right-icon>\n          <van-radio :name=\"'wechat'\" :checked=\"paymentMethod === 'wechat'\" />\n        </template>\n      </van-cell>\n      \n      <van-cell clickable @click=\"paymentMethod = 'alipay'\">\n        <template #title>\n          <div class=\"payment-method\">\n            <van-icon name=\"alipay\" color=\"#1677FF\" size=\"24\" />\n            <span class=\"payment-name\">支付宝</span>\n          </div>\n        </template>\n        <template #right-icon>\n          <van-radio :name=\"'alipay'\" :checked=\"paymentMethod === 'alipay'\" />\n        </template>\n      </van-cell>\n    </van-cell-group>\n    \n    <div class=\"payment-action\">\n      <van-button round block type=\"primary\" @click=\"onPayment\">\n        立即支付\n      </van-button>\n    </div>\n    \n    <van-popup :show=\"showQRCode\" @update:show=\"showQRCode = $event\" round>\n      <div class=\"qrcode-container\">\n        <h3>请扫码支付</h3>\n        <div class=\"qrcode\">\n          <iframe v-if=\"qrCodeUrl\" :src=\"qrCodeUrl\" frameborder=\"0\" width=\"200\" height=\"200\"></iframe>\n          <div v-else class=\"qrcode-placeholder\">\n            <p>正在加载支付二维码...</p>\n          </div>\n        </div>\n        <p>支付金额: ¥9.90</p>\n        <van-button type=\"primary\" block @click=\"onPaymentSuccess\">\n          支付完成\n        </van-button>\n      </div>\n    </van-popup>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport { Toast } from 'vant';\nimport axios from 'axios';\n\nexport default {\n  name: 'PaymentPage',\n  setup() {\n    const route = useRoute();\n    const router = useRouter();\n    \n    // 从路由参数获取订单信息\n    const gender = route.query.gender;\n    const calendarType = route.query.calendarType;\n    const birthDate = route.query.birthDate;\n    const birthTime = route.query.birthTime;\n    const birthPlace = route.query.birthPlace;\n    const livingPlace = route.query.livingPlace;\n    const focusAreas = route.query.focusAreas?.split(',') || [];\n    \n    // 支付相关状态\n    const orderId = ref('BZ1749371719072');\n    const createTime = ref(new Date().toLocaleString());\n    const paymentMethod = ref('wechat');\n    const showQRCode = ref(false);\n    const qrCodeUrl = ref('');\n    const isProcessing = ref(false);\n    \n    onMounted(() => {\n      // 实际项目中这里应该调用API创建订单\n      console.log('订单创建成功', {\n        gender,\n        calendarType,\n        birthDate,\n        birthTime,\n        birthPlace,\n        livingPlace,\n        focusAreas\n      });\n    });\n    \n    const onClickLeft = () => {\n      router.go(-1);\n    };\n    \n    const onPayment = () => {\n      // 根据支付方式显示不同的二维码\n      if (paymentMethod.value === 'wechat') {\n        // 使用本地HTML文件作为微信支付二维码\n        qrCodeUrl.value = '/images/wechat-qrcode.html';\n      } else {\n        // 使用本地HTML文件作为支付宝二维码\n        qrCodeUrl.value = '/images/alipay-qrcode.html';\n      }\n      \n      showQRCode.value = true;\n      \n      // 实际项目中这里应该调用API获取支付二维码\n      console.log('发起支付请求', {\n        orderId: orderId.value,\n        paymentMethod: paymentMethod.value\n      });\n\n      // 由于我们只是演示，记录一下二维码URL\n      console.log(`使用${paymentMethod.value}支付，二维码URL:`, qrCodeUrl.value);\n    };\n    \n    const onPaymentSuccess = async () => {\n      if (isProcessing.value) {\n        return; // 防止重复点击\n      }\n      \n      isProcessing.value = true;\n      Toast.loading({\n        message: '正在处理支付...',\n        duration: 0,\n        forbidClick: true\n      });\n      \n      try {\n        // 调用模拟支付API\n        console.log('调用模拟支付API:', orderId.value);\n        const paymentData = {\n          birthDate,\n          birthTime,\n          gender,\n          focusAreas,\n          calendarType,\n          birthPlace,\n          livingPlace,\n          forceRecalculate: true  // 强制重新计算所有数据\n        };\n        \n        const response = await axios.post(`http://localhost:5000/api/order/mock/pay/${orderId.value}`, paymentData, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        \n        console.log('模拟支付API响应:', response.data);\n        \n        if (response.data.code === 200) {\n          Toast.success('支付成功');\n          showQRCode.value = false;\n          \n          // 使用服务器返回的resultId\n          const resultId = response.data.data.resultId;\n          \n          if (!resultId) {\n            console.error('服务器未返回有效的resultId');\n            Toast.fail('获取结果ID失败，请联系客服');\n            return;\n          }\n          \n          console.log('获取到结果ID:', resultId);\n          \n          // 请求立即计算完整的命盘数据\n          try {\n            Toast.loading({\n              message: '正在生成八字命盘...',\n              duration: 0,\n              forbidClick: true\n            });\n            \n            // 使用update接口更新数据并触发计算\n            await axios.post(`http://localhost:5000/api/bazi/update/${resultId}`, {\n              birthDate,\n              birthTime,\n              gender,\n              calendarType,\n              birthPlace,\n              livingPlace,\n              focusAreas,\n              forceRecalculate: true,\n              generateShenshaData: true,\n              generateDayunData: true,\n              generateLiunianData: true,\n              useDeepseekAPI: true  // 使用DeepSeek API进行分析\n            });\n            \n            Toast.success('命盘数据生成中');\n            \n            // 再次调用分析接口，确保触发深度分析\n            setTimeout(async () => {\n              try {\n                await axios.post(`http://localhost:5000/api/bazi/analyze/${resultId}`, {\n                  useDeepseekAPI: true\n                });\n                console.log('已触发八字深度分析');\n              } catch (analyzeError) {\n                console.error('深度分析请求失败:', analyzeError);\n              }\n            }, 1000);\n            \n          } catch (calcError) {\n            console.error('命盘计算请求失败:', calcError);\n            // 即使计算请求失败，也继续跳转到结果页面\n          }\n          \n          // 跳转到结果页面，传递必要参数\n          router.push({\n            path: `/result/${resultId}`,\n            query: {\n              birthDate,\n              birthTime,\n              gender,\n              birthPlace,\n              livingPlace,\n              originalOrderId: orderId.value // 传递原始订单ID\n            }\n          });\n        } else {\n          Toast.fail(response.data.message || '支付处理失败');\n        }\n      } catch (error) {\n        console.error('支付处理出错:', error);\n        \n        // 错误处理：尝试构造默认结果ID\n        Toast.clear();\n        Toast.fail('支付处理出错，将使用默认结果ID');\n        \n        // 构造默认结果ID\n        const defaultResultId = 'RES' + orderId.value.replace(/^BZ/, '');\n        console.log('使用默认结果ID:', defaultResultId);\n        \n        // 即使出错也跳转到结果页面，使用默认结果ID\n        router.push({\n          path: `/result/${defaultResultId}`,\n          query: {\n            birthDate,\n            birthTime,\n            gender,\n            birthPlace,\n            livingPlace,\n            originalOrderId: orderId.value // 传递原始订单ID\n          }\n        });\n      } finally {\n        isProcessing.value = false;\n      }\n    };\n    \n    return {\n      orderId,\n      createTime,\n      paymentMethod,\n      showQRCode,\n      qrCodeUrl,\n      isProcessing,\n      onClickLeft,\n      onPayment,\n      onPaymentSuccess\n    };\n  }\n};\n</script>\n\n<style scoped>\n.payment-container {\n  padding-bottom: 20px;\n}\n\n.payment-method {\n  display: flex;\n  align-items: center;\n}\n\n.payment-name {\n  margin-left: 10px;\n}\n\n.payment-action {\n  padding: 20px 16px;\n}\n\n.qrcode-container {\n  padding: 20px;\n  text-align: center;\n  width: 280px;\n}\n\n.qrcode {\n  width: 200px;\n  height: 200px;\n  margin: 20px auto;\n  background-color: #f2f3f5;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: 1px solid #ebedf0;\n  border-radius: 4px;\n  overflow: hidden;\n}\n\n.qrcode iframe {\n  border: none;\n  width: 100%;\n  height: 100%;\n}\n\n.qrcode img {\n  max-width: 100%;\n  max-height: 100%;\n}\n\n.qrcode-placeholder {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  color: #969799;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
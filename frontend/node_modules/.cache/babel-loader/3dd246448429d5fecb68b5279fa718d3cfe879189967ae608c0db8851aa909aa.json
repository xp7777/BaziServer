{"ast":null,"code":"import { ref, onMounted } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport { Toast } from 'vant';\nexport default {\n  name: 'PaymentPage',\n  setup() {\n    const route = useRoute();\n    const router = useRouter();\n\n    // 从路由参数获取订单信息\n    const gender = route.query.gender;\n    const calendarType = route.query.calendarType;\n    const birthDate = route.query.birthDate;\n    const birthTime = route.query.birthTime;\n    const birthPlace = route.query.birthPlace;\n    const livingPlace = route.query.livingPlace;\n    const focusAreas = route.query.focusAreas?.split(',') || [];\n\n    // 支付相关状态\n    const orderId = ref('BZ' + Date.now().toString());\n    const createTime = ref(new Date().toLocaleString());\n    const paymentMethod = ref('wechat');\n    const showQRCode = ref(false);\n    const qrCodeUrl = ref('');\n    onMounted(() => {\n      // 实际项目中这里应该调用API创建订单\n      console.log('订单创建成功', {\n        gender,\n        calendarType,\n        birthDate,\n        birthTime,\n        birthPlace,\n        livingPlace,\n        focusAreas\n      });\n    });\n    const onClickLeft = () => {\n      router.go(-1);\n    };\n    const onPayment = () => {\n      // 根据支付方式显示不同的二维码\n      if (paymentMethod.value === 'wechat') {\n        // 使用本地HTML文件作为微信支付二维码\n        qrCodeUrl.value = '/images/wechat-qrcode.html';\n      } else {\n        // 使用本地HTML文件作为支付宝二维码\n        qrCodeUrl.value = '/images/alipay-qrcode.html';\n      }\n      showQRCode.value = true;\n\n      // 实际项目中这里应该调用API获取支付二维码\n      console.log('发起支付请求', {\n        orderId: orderId.value,\n        paymentMethod: paymentMethod.value\n      });\n\n      // 由于我们只是演示，记录一下二维码URL\n      console.log(`使用${paymentMethod.value}支付，二维码URL:`, qrCodeUrl.value);\n    };\n    const onPaymentSuccess = () => {\n      Toast.success('支付成功');\n      showQRCode.value = false;\n\n      // 模拟支付成功后的结果ID\n      const resultId = 'RES' + Date.now().toString();\n\n      // 跳转到结果页面，传递出生日期和时间参数\n      router.push({\n        path: `/result/${resultId}`,\n        query: {\n          birthDate,\n          birthTime,\n          gender,\n          birthPlace,\n          livingPlace\n        }\n      });\n    };\n    return {\n      orderId,\n      createTime,\n      paymentMethod,\n      showQRCode,\n      qrCodeUrl,\n      onClickLeft,\n      onPayment,\n      onPaymentSuccess\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","useRoute","useRouter","Toast","name","setup","route","router","gender","query","calendarType","birthDate","birthTime","birthPlace","livingPlace","focusAreas","split","orderId","Date","now","toString","createTime","toLocaleString","paymentMethod","showQRCode","qrCodeUrl","console","log","onClickLeft","go","onPayment","value","onPaymentSuccess","success","resultId","push","path"],"sources":["D:\\Python\\20250603开发八字命理AI指导功能页码\\开发八字命理AI指导功能页码\\frontend\\src\\Payment.vue"],"sourcesContent":["<template>\n  <div class=\"payment-container\">\n    <van-nav-bar\n      title=\"订单支付\"\n      left-text=\"返回\"\n      left-arrow\n      @click-left=\"onClickLeft\"\n    />\n    \n    <van-card\n      title=\"八字命理AI人生指导\"\n      desc=\"个性化人生指导建议\"\n      price=\"9.90\"\n      currency=\"¥\"\n    >\n      <template #tags>\n        <van-tag plain type=\"primary\">专业分析</van-tag>\n        <van-tag plain type=\"success\">AI解读</van-tag>\n        <van-tag plain type=\"warning\">PDF报告</van-tag>\n      </template>\n    </van-card>\n    \n    <van-cell-group inset title=\"订单信息\">\n      <van-cell title=\"订单编号\" :value=\"orderId\" />\n      <van-cell title=\"创建时间\" :value=\"createTime\" />\n      <van-cell title=\"支付金额\" value=\"¥9.90\" />\n    </van-cell-group>\n    \n    <van-cell-group inset title=\"选择支付方式\">\n      <van-cell clickable @click=\"paymentMethod = 'wechat'\">\n        <template #title>\n          <div class=\"payment-method\">\n            <van-icon name=\"wechat\" color=\"#07C160\" size=\"24\" />\n            <span class=\"payment-name\">微信支付</span>\n          </div>\n        </template>\n        <template #right-icon>\n          <van-radio :name=\"'wechat'\" :checked=\"paymentMethod === 'wechat'\" />\n        </template>\n      </van-cell>\n      \n      <van-cell clickable @click=\"paymentMethod = 'alipay'\">\n        <template #title>\n          <div class=\"payment-method\">\n            <van-icon name=\"alipay\" color=\"#1677FF\" size=\"24\" />\n            <span class=\"payment-name\">支付宝</span>\n          </div>\n        </template>\n        <template #right-icon>\n          <van-radio :name=\"'alipay'\" :checked=\"paymentMethod === 'alipay'\" />\n        </template>\n      </van-cell>\n    </van-cell-group>\n    \n    <div class=\"payment-action\">\n      <van-button round block type=\"primary\" @click=\"onPayment\">\n        立即支付\n      </van-button>\n    </div>\n    \n    <van-popup :show=\"showQRCode\" @update:show=\"showQRCode = $event\" round>\n      <div class=\"qrcode-container\">\n        <h3>请扫码支付</h3>\n        <div class=\"qrcode\">\n          <iframe v-if=\"qrCodeUrl\" :src=\"qrCodeUrl\" frameborder=\"0\" width=\"200\" height=\"200\"></iframe>\n          <div v-else class=\"qrcode-placeholder\">\n            <p>正在加载支付二维码...</p>\n          </div>\n        </div>\n        <p>支付金额: ¥9.90</p>\n        <van-button type=\"primary\" block @click=\"onPaymentSuccess\">\n          支付完成\n        </van-button>\n      </div>\n    </van-popup>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport { Toast } from 'vant';\n\nexport default {\n  name: 'PaymentPage',\n  setup() {\n    const route = useRoute();\n    const router = useRouter();\n    \n    // 从路由参数获取订单信息\n    const gender = route.query.gender;\n    const calendarType = route.query.calendarType;\n    const birthDate = route.query.birthDate;\n    const birthTime = route.query.birthTime;\n    const birthPlace = route.query.birthPlace;\n    const livingPlace = route.query.livingPlace;\n    const focusAreas = route.query.focusAreas?.split(',') || [];\n    \n    // 支付相关状态\n    const orderId = ref('BZ' + Date.now().toString());\n    const createTime = ref(new Date().toLocaleString());\n    const paymentMethod = ref('wechat');\n    const showQRCode = ref(false);\n    const qrCodeUrl = ref('');\n    \n    onMounted(() => {\n      // 实际项目中这里应该调用API创建订单\n      console.log('订单创建成功', {\n        gender,\n        calendarType,\n        birthDate,\n        birthTime,\n        birthPlace,\n        livingPlace,\n        focusAreas\n      });\n    });\n    \n    const onClickLeft = () => {\n      router.go(-1);\n    };\n    \n    const onPayment = () => {\n      // 根据支付方式显示不同的二维码\n      if (paymentMethod.value === 'wechat') {\n        // 使用本地HTML文件作为微信支付二维码\n        qrCodeUrl.value = '/images/wechat-qrcode.html';\n      } else {\n        // 使用本地HTML文件作为支付宝二维码\n        qrCodeUrl.value = '/images/alipay-qrcode.html';\n      }\n      \n      showQRCode.value = true;\n      \n      // 实际项目中这里应该调用API获取支付二维码\n      console.log('发起支付请求', {\n        orderId: orderId.value,\n        paymentMethod: paymentMethod.value\n      });\n\n      // 由于我们只是演示，记录一下二维码URL\n      console.log(`使用${paymentMethod.value}支付，二维码URL:`, qrCodeUrl.value);\n    };\n    \n    const onPaymentSuccess = () => {\n      Toast.success('支付成功');\n      showQRCode.value = false;\n      \n      // 模拟支付成功后的结果ID\n      const resultId = 'RES' + Date.now().toString();\n      \n      // 跳转到结果页面，传递出生日期和时间参数\n      router.push({\n        path: `/result/${resultId}`,\n        query: {\n          birthDate,\n          birthTime,\n          gender,\n          birthPlace,\n          livingPlace\n        }\n      });\n    };\n    \n    return {\n      orderId,\n      createTime,\n      paymentMethod,\n      showQRCode,\n      qrCodeUrl,\n      onClickLeft,\n      onPayment,\n      onPaymentSuccess\n    };\n  }\n};\n</script>\n\n<style scoped>\n.payment-container {\n  padding-bottom: 20px;\n}\n\n.payment-method {\n  display: flex;\n  align-items: center;\n}\n\n.payment-name {\n  margin-left: 10px;\n}\n\n.payment-action {\n  padding: 20px 16px;\n}\n\n.qrcode-container {\n  padding: 20px;\n  text-align: center;\n  width: 280px;\n}\n\n.qrcode {\n  width: 200px;\n  height: 200px;\n  margin: 20px auto;\n  background-color: #f2f3f5;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: 1px solid #ebedf0;\n  border-radius: 4px;\n  overflow: hidden;\n}\n\n.qrcode iframe {\n  border: none;\n  width: 100%;\n  height: 100%;\n}\n\n.qrcode img {\n  max-width: 100%;\n  max-height: 100%;\n}\n\n.qrcode-placeholder {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  color: #969799;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}